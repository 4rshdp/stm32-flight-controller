
fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012860  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  080129f0  080129f0  000139f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131d8  080131d8  00015310  2**0
                  CONTENTS
  4 .ARM          00000008  080131d8  080131d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080131e0  080131e0  00015310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080131e0  080131e0  000141e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080131e4  080131e4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000310  20000000  080131e8  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00015310  2**0
                  CONTENTS
 10 .bss          000020e4  20000310  20000310  00015310  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200023f4  200023f4  00015310  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00015310  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001da04  00000000  00000000  00015340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a55  00000000  00000000  00032d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a60  00000000  00000000  000377a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001461  00000000  00000000  00039200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ba8  00000000  00000000  0003a661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023a9e  00000000  00000000  0005f209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9dde  00000000  00000000  00082ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014ca85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008768  00000000  00000000  0014cac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00155230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000310 	.word	0x20000310
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080129d8 	.word	0x080129d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000314 	.word	0x20000314
 80001cc:	080129d8 	.word	0x080129d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <flysky_update>:
uint16_t throttle  = 0;
uint16_t yaw       = 0;
uint16_t sw1       = 0;

void flysky_update(const uint16_t *data)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    // Map the raw IBUS data to the corresponding channels.
    roll      = data[0];  // Channel 1: Roll
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	881a      	ldrh	r2, [r3, #0]
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <flysky_update+0x44>)
 8000ff2:	801a      	strh	r2, [r3, #0]
    pitch     = data[1];  // Channel 2: Pitch
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	881a      	ldrh	r2, [r3, #0]
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <flysky_update+0x48>)
 8000ffc:	801a      	strh	r2, [r3, #0]
    throttle  = data[2];  // Channel 3: Throttle
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3304      	adds	r3, #4
 8001002:	881a      	ldrh	r2, [r3, #0]
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <flysky_update+0x4c>)
 8001006:	801a      	strh	r2, [r3, #0]
    yaw       = data[3];  // Channel 4: Yaw
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3306      	adds	r3, #6
 800100c:	881a      	ldrh	r2, [r3, #0]
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <flysky_update+0x50>)
 8001010:	801a      	strh	r2, [r3, #0]
    sw1       = data[4];  // Channel 5: Switch 1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3308      	adds	r3, #8
 8001016:	881a      	ldrh	r2, [r3, #0]
 8001018:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <flysky_update+0x54>)
 800101a:	801a      	strh	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	2000032c 	.word	0x2000032c
 800102c:	2000032e 	.word	0x2000032e
 8001030:	20000330 	.word	0x20000330
 8001034:	20000332 	.word	0x20000332
 8001038:	20000334 	.word	0x20000334

0800103c <flysky_process>:

void flysky_process(uint16_t *ibus_data)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
    // Read raw IBUS data.
    ibus_read(ibus_data);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f855 	bl	80010f4 <ibus_read>

    // Apply a soft failsafe with a threshold (for example, 50).
    ibus_soft_failsafe(ibus_data, 100);
 800104a:	2164      	movs	r1, #100	@ 0x64
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 f8e7 	bl	8001220 <ibus_soft_failsafe>

    // Update the FlySky channel values.
    flysky_update(ibus_data);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffc6 	bl	8000fe4 <flysky_update>

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <get_roll>:

/* Getter functions */

uint16_t get_roll(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
    return roll;
 8001064:	4b03      	ldr	r3, [pc, #12]	@ (8001074 <get_roll+0x14>)
 8001066:	881b      	ldrh	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	2000032c 	.word	0x2000032c

08001078 <get_pitch>:

uint16_t get_pitch(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
    return pitch;
 800107c:	4b03      	ldr	r3, [pc, #12]	@ (800108c <get_pitch+0x14>)
 800107e:	881b      	ldrh	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	2000032e 	.word	0x2000032e

08001090 <get_throttle>:

uint16_t get_throttle(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
    return throttle;
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <get_throttle+0x14>)
 8001096:	881b      	ldrh	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000330 	.word	0x20000330

080010a8 <get_yaw>:

uint16_t get_yaw(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
    return yaw;
 80010ac:	4b03      	ldr	r3, [pc, #12]	@ (80010bc <get_yaw+0x14>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000332 	.word	0x20000332

080010c0 <get_sw1>:

uint16_t get_sw1(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
    return sw1;
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <get_sw1+0x14>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000334 	.word	0x20000334

080010d8 <ibus_init>:



/* Main Functions */
void ibus_init()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(IBUS_UART, uart_rx_buffer, 32);
 80010dc:	2220      	movs	r2, #32
 80010de:	4903      	ldr	r1, [pc, #12]	@ (80010ec <ibus_init+0x14>)
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <ibus_init+0x18>)
 80010e2:	f007 f9e7 	bl	80084b4 <HAL_UART_Receive_DMA>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000338 	.word	0x20000338
 80010f0:	20000608 	.word	0x20000608

080010f4 <ibus_read>:

bool ibus_read(uint16_t* ibus_data)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	if(!ibus_is_valid()) 
 80010fc:	f000 f81a 	bl	8001134 <ibus_is_valid>
 8001100:	4603      	mov	r3, r0
 8001102:	f083 0301 	eor.w	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <ibus_read+0x1c>
		return false;
 800110c:	2300      	movs	r3, #0
 800110e:	e00d      	b.n	800112c <ibus_read+0x38>

	if(!ibus_checksum())
 8001110:	f000 f828 	bl	8001164 <ibus_checksum>
 8001114:	4603      	mov	r3, r0
 8001116:	f083 0301 	eor.w	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <ibus_read+0x30>
		return false;
 8001120:	2300      	movs	r3, #0
 8001122:	e003      	b.n	800112c <ibus_read+0x38>

	ibus_update(ibus_data);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f84d 	bl	80011c4 <ibus_update>
	return true;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <ibus_is_valid>:


/* Sub Functions */
bool ibus_is_valid()
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	// is it ibus?
	return (uart_rx_buffer[0] == IBUS_LENGTH && uart_rx_buffer[1] == IBUS_COMMAND40);
 8001138:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <ibus_is_valid+0x2c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b20      	cmp	r3, #32
 800113e:	d105      	bne.n	800114c <ibus_is_valid+0x18>
 8001140:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <ibus_is_valid+0x2c>)
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	2b40      	cmp	r3, #64	@ 0x40
 8001146:	d101      	bne.n	800114c <ibus_is_valid+0x18>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <ibus_is_valid+0x1a>
 800114c:	2300      	movs	r3, #0
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000338 	.word	0x20000338

08001164 <ibus_checksum>:

bool ibus_checksum()
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 	uint16_t checksum_cal = 0xffff;
 800116a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800116e:	81fb      	strh	r3, [r7, #14]
	uint16_t checksum_ibus;

	for(int i = 0; i < 30; i++)
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	e00a      	b.n	800118c <ibus_checksum+0x28>
	{
		checksum_cal -= uart_rx_buffer[i];
 8001176:	4a12      	ldr	r2, [pc, #72]	@ (80011c0 <ibus_checksum+0x5c>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	89fb      	ldrh	r3, [r7, #14]
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 30; i++)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	3301      	adds	r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	2b1d      	cmp	r3, #29
 8001190:	ddf1      	ble.n	8001176 <ibus_checksum+0x12>
	}

	checksum_ibus = uart_rx_buffer[31] << 8 | uart_rx_buffer[30]; // checksum value from ibus
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <ibus_checksum+0x5c>)
 8001194:	7fdb      	ldrb	r3, [r3, #31]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <ibus_checksum+0x5c>)
 800119c:	7f9b      	ldrb	r3, [r3, #30]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	80fb      	strh	r3, [r7, #6]
	return (checksum_ibus == checksum_cal);
 80011a6:	88fa      	ldrh	r2, [r7, #6]
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	20000338 	.word	0x20000338

080011c4 <ibus_update>:

void ibus_update(uint16_t* ibus_data)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	2302      	movs	r3, #2
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	e018      	b.n	8001208 <ibus_update+0x44>
	{
		ibus_data[ch_index] = uart_rx_buffer[bf_index + 1] << 8 | uart_rx_buffer[bf_index];
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a10      	ldr	r2, [pc, #64]	@ (800121c <ibus_update+0x58>)
 80011dc:	5cd3      	ldrb	r3, [r2, r3]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	490e      	ldr	r1, [pc, #56]	@ (800121c <ibus_update+0x58>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	440b      	add	r3, r1
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b219      	sxth	r1, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	b28a      	uxth	r2, r1
 80011fa:	801a      	strh	r2, [r3, #0]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index++, bf_index += 2)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3301      	adds	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3302      	adds	r3, #2
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b05      	cmp	r3, #5
 800120c:	dde3      	ble.n	80011d6 <ibus_update+0x12>
	}
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	20000338 	.word	0x20000338

08001220 <ibus_soft_failsafe>:

/**
 * @note FS-A8S don't have fail safe feature, So make software fail-safe.
 */
void ibus_soft_failsafe(uint16_t* ibus_data, uint8_t fail_safe_max)
{	
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
	fail_safe_flag++;
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <ibus_soft_failsafe+0x70>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <ibus_soft_failsafe+0x70>)
 8001236:	701a      	strb	r2, [r3, #0]

	if(fail_safe_max > fail_safe_flag)
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <ibus_soft_failsafe+0x70>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	78fa      	ldrb	r2, [r7, #3]
 800123e:	429a      	cmp	r2, r3
 8001240:	d820      	bhi.n	8001284 <ibus_soft_failsafe+0x64>
		return;

	// Clear ibus data
	for(int i = 0; i < IBUS_USER_CHANNELS; i++)
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	e008      	b.n	800125a <ibus_soft_failsafe+0x3a>
		ibus_data[i] = 0;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	2200      	movs	r2, #0
 8001252:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < IBUS_USER_CHANNELS; i++)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b05      	cmp	r3, #5
 800125e:	ddf3      	ble.n	8001248 <ibus_soft_failsafe+0x28>

	// Clear ibus buffer
	for(int j = 0; j < IBUS_LENGTH; j++)
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	e007      	b.n	8001276 <ibus_soft_failsafe+0x56>
		uart_rx_buffer[j] = 0;
 8001266:	4a0b      	ldr	r2, [pc, #44]	@ (8001294 <ibus_soft_failsafe+0x74>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4413      	add	r3, r2
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < IBUS_LENGTH; j++)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	3301      	adds	r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	2b1f      	cmp	r3, #31
 800127a:	ddf4      	ble.n	8001266 <ibus_soft_failsafe+0x46>

	fail_safe_flag = 0;
 800127c:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <ibus_soft_failsafe+0x70>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
	return;
 8001282:	e000      	b.n	8001286 <ibus_soft_failsafe+0x66>
		return;
 8001284:	bf00      	nop
}
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	20000358 	.word	0x20000358
 8001294:	20000338 	.word	0x20000338

08001298 <ibus_reset_failsafe>:

/**
 * @note This function is located in HAL_UART_RxCpltCallback.
 */
void ibus_reset_failsafe()
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
		fail_safe_flag = 0; // flag reset
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <ibus_reset_failsafe+0x14>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	20000358 	.word	0x20000358

080012b0 <pid_init>:


#include "pid.h"

void pid_init(PIDController *pid, float kp, float ki, float kd)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80012bc:	edc7 0a01 	vstr	s1, [r7, #4]
 80012c0:	ed87 1a00 	vstr	s2, [r7]
    pid->kp = kp;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	609a      	str	r2, [r3, #8]
    pid->prev_error = 0.0f;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <pid_compute>:

float pid_compute(PIDController *pid, float error, float dt)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001300:	edc7 0a01 	vstr	s1, [r7, #4]
    pid->integral += error * dt;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	ed93 7a04 	vldr	s14, [r3, #16]
 800130a:	edd7 6a02 	vldr	s13, [r7, #8]
 800130e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	edc3 7a04 	vstr	s15, [r3, #16]

    // Anti-windup (optional)
    if (pid->integral > 400) pid->integral = 400;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	edd3 7a04 	vldr	s15, [r3, #16]
 8001326:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80013f0 <pid_compute+0xfc>
 800132a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	dd03      	ble.n	800133c <pid_compute+0x48>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4a2f      	ldr	r2, [pc, #188]	@ (80013f4 <pid_compute+0x100>)
 8001338:	611a      	str	r2, [r3, #16]
 800133a:	e00c      	b.n	8001356 <pid_compute+0x62>
    else if (pid->integral < -400) pid->integral = -400;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001342:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80013f8 <pid_compute+0x104>
 8001346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	d502      	bpl.n	8001356 <pid_compute+0x62>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4a2a      	ldr	r2, [pc, #168]	@ (80013fc <pid_compute+0x108>)
 8001354:	611a      	str	r2, [r3, #16]

    float derivative = (error - pid->prev_error) / dt;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	edd3 7a03 	vldr	s15, [r3, #12]
 800135c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001360:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001364:	ed97 7a01 	vldr	s14, [r7, #4]
 8001368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136c:	edc7 7a04 	vstr	s15, [r7, #16]
    pid->prev_error = error;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	60da      	str	r2, [r3, #12]

    float output = pid->kp * error + pid->ki * pid->integral + pid->kd * derivative;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	ed93 7a00 	vldr	s14, [r3]
 800137c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001380:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	edd3 6a01 	vldr	s13, [r3, #4]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001394:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	edd3 6a02 	vldr	s13, [r3, #8]
 800139e:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013aa:	edc7 7a05 	vstr	s15, [r7, #20]

    // Clamp output (optional)
    if (output > 400) output = 400;
 80013ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80013b2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80013f0 <pid_compute+0xfc>
 80013b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	dd02      	ble.n	80013c6 <pid_compute+0xd2>
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <pid_compute+0x100>)
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	e00a      	b.n	80013dc <pid_compute+0xe8>
    else if (output < -400) output = -400;
 80013c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ca:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80013f8 <pid_compute+0x104>
 80013ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d6:	d501      	bpl.n	80013dc <pid_compute+0xe8>
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <pid_compute+0x108>)
 80013da:	617b      	str	r3, [r7, #20]

    return output;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	ee07 3a90 	vmov	s15, r3
}
 80013e2:	eeb0 0a67 	vmov.f32	s0, s15
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	43c80000 	.word	0x43c80000
 80013f4:	43c80000 	.word	0x43c80000
 80013f8:	c3c80000 	.word	0xc3c80000
 80013fc:	c3c80000 	.word	0xc3c80000

08001400 <pid_reset>:

void pid_reset(PIDController *pid)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    pid->prev_error = 0.0f;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <mpu6050Init>:
uint8_t mpu6050Data[14];




void mpu6050Init(void){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(
 800142a:	2364      	movs	r3, #100	@ 0x64
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2301      	movs	r3, #1
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <mpu6050Init+0x24>)
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2301      	movs	r3, #1
 8001438:	2275      	movs	r2, #117	@ 0x75
 800143a:	21d0      	movs	r1, #208	@ 0xd0
 800143c:	4803      	ldr	r0, [pc, #12]	@ (800144c <mpu6050Init+0x28>)
 800143e:	f003 fb05 	bl	8004a4c <HAL_I2C_Mem_Read>
				1,
				&whoAreYou,
				1,
				100
				);
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000359 	.word	0x20000359
 800144c:	2000050c 	.word	0x2000050c

08001450 <mpu6050powerOn>:

void mpu6050powerOn(void){
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af04      	add	r7, sp, #16
	MemData = 0x00;
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <mpu6050powerOn+0x2c>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(
 800145c:	2364      	movs	r3, #100	@ 0x64
 800145e:	9302      	str	r3, [sp, #8]
 8001460:	2301      	movs	r3, #1
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	4b05      	ldr	r3, [pc, #20]	@ (800147c <mpu6050powerOn+0x2c>)
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2301      	movs	r3, #1
 800146a:	226b      	movs	r2, #107	@ 0x6b
 800146c:	21d0      	movs	r1, #208	@ 0xd0
 800146e:	4804      	ldr	r0, [pc, #16]	@ (8001480 <mpu6050powerOn+0x30>)
 8001470:	f003 f9f2 	bl	8004858 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000035a 	.word	0x2000035a
 8001480:	2000050c 	.word	0x2000050c

08001484 <mpu6050Sampling>:

void mpu6050Sampling(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af04      	add	r7, sp, #16
	MemData = 0x07;
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <mpu6050Sampling+0x2c>)
 800148c:	2207      	movs	r2, #7
 800148e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(
 8001490:	2364      	movs	r3, #100	@ 0x64
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2301      	movs	r3, #1
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <mpu6050Sampling+0x2c>)
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	2219      	movs	r2, #25
 80014a0:	21d0      	movs	r1, #208	@ 0xd0
 80014a2:	4804      	ldr	r0, [pc, #16]	@ (80014b4 <mpu6050Sampling+0x30>)
 80014a4:	f003 f9d8 	bl	8004858 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000035a 	.word	0x2000035a
 80014b4:	2000050c 	.word	0x2000050c

080014b8 <mpu6050GyroScale>:

void mpu6050GyroScale(gyroScale_t scale){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af04      	add	r7, sp, #16
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	MemData = 0x00 | (scale << 3);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <mpu6050GyroScale+0x34>)
 80014ca:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(
 80014cc:	2364      	movs	r3, #100	@ 0x64
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	2301      	movs	r3, #1
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <mpu6050GyroScale+0x34>)
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2301      	movs	r3, #1
 80014da:	221b      	movs	r2, #27
 80014dc:	21d0      	movs	r1, #208	@ 0xd0
 80014de:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <mpu6050GyroScale+0x38>)
 80014e0:	f003 f9ba 	bl	8004858 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000035a 	.word	0x2000035a
 80014f0:	2000050c 	.word	0x2000050c

080014f4 <mpu6050AccelScale>:

void mpu6050AccelScale(accelScale_t scale){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af04      	add	r7, sp, #16
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	MemData = 0x00 | (scale << 3);
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <mpu6050AccelScale+0x34>)
 8001506:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(
 8001508:	2364      	movs	r3, #100	@ 0x64
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	2301      	movs	r3, #1
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <mpu6050AccelScale+0x34>)
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	221c      	movs	r2, #28
 8001518:	21d0      	movs	r1, #208	@ 0xd0
 800151a:	4804      	ldr	r0, [pc, #16]	@ (800152c <mpu6050AccelScale+0x38>)
 800151c:	f003 f99c 	bl	8004858 <HAL_I2C_Mem_Write>
			1,
			&MemData,
			1,
			100
			);
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2000035a 	.word	0x2000035a
 800152c:	2000050c 	.word	0x2000050c

08001530 <mpu6050ConfigFilter>:

void mpu6050ConfigFilter(uint8_t ext_sync, dlpfCfg_t dlpf_cfg) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af04      	add	r7, sp, #16
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
    // The CONFIG register (address 0x1A) combines EXT_SYNC_SET (bits 5–3) and DLPF_CFG (bits 2–0).
    // ext_sync: external sync setting (0 if not used).
    // dlpf_cfg: desired digital low pass filter configuration.
    uint8_t config = (ext_sync << 3) | (uint8_t)dlpf_cfg;
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	b25a      	sxtb	r2, r3
 8001546:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800154a:	4313      	orrs	r3, r2
 800154c:	b25b      	sxtb	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Mem_Write(
 8001552:	2364      	movs	r3, #100	@ 0x64
 8001554:	9302      	str	r3, [sp, #8]
 8001556:	2301      	movs	r3, #1
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	f107 030f 	add.w	r3, r7, #15
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	2301      	movs	r3, #1
 8001562:	221a      	movs	r2, #26
 8001564:	21d0      	movs	r1, #208	@ 0xd0
 8001566:	4803      	ldr	r0, [pc, #12]	@ (8001574 <mpu6050ConfigFilter+0x44>)
 8001568:	f003 f976 	bl	8004858 <HAL_I2C_Mem_Write>
        1,
        &config,
        1,
        100
    );
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000050c 	.word	0x2000050c

08001578 <mpu6050Config>:


void mpu6050Config(void){
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	// is valid Condition true 0x68
	mpu6050Init();
 800157c:	f7ff ff52 	bl	8001424 <mpu6050Init>

	if(validCondition1){
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <mpu6050Config+0x30>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b68      	cmp	r3, #104	@ 0x68
 8001586:	d10d      	bne.n	80015a4 <mpu6050Config+0x2c>
	// power on
		mpu6050powerOn();
 8001588:	f7ff ff62 	bl	8001450 <mpu6050powerOn>
	// sampling data ratio
		mpu6050Sampling();
 800158c:	f7ff ff7a 	bl	8001484 <mpu6050Sampling>
	// gyro scale   (RAW)
		mpu6050GyroScale(degS500);
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff ff91 	bl	80014b8 <mpu6050GyroScale>
	// accel scale  (RAW)
		mpu6050AccelScale(g4);
 8001596:	2001      	movs	r0, #1
 8001598:	f7ff ffac 	bl	80014f4 <mpu6050AccelScale>
	// using low pass filter
		mpu6050ConfigFilter(0, DLPF_CFG_10HZ);
 800159c:	2105      	movs	r1, #5
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff ffc6 	bl	8001530 <mpu6050ConfigFilter>

	}
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000359 	.word	0x20000359

080015ac <mpu6050Read_DMA>:
	Ay = RAWaccelY/2048.0;
	Az = RAWaccelZ/2048.0;
}


void mpu6050Read_DMA(void) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(&hi2c1,
 80015b2:	230e      	movs	r3, #14
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <mpu6050Read_DMA+0x28>)
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2301      	movs	r3, #1
 80015bc:	223b      	movs	r2, #59	@ 0x3b
 80015be:	21d0      	movs	r1, #208	@ 0xd0
 80015c0:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <mpu6050Read_DMA+0x2c>)
 80015c2:	f003 fc75 	bl	8004eb0 <HAL_I2C_Mem_Read_DMA>
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
                                                    mpu6050Data,// Buffer to store the 14 bytes
                                                    14);        // Number of bytes to read
    if(status != HAL_OK) {
        // Handle error here, e.g., log or trigger an error flag.
    }
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000378 	.word	0x20000378
 80015d8:	2000050c 	.word	0x2000050c
 80015dc:	00000000 	.word	0x00000000

080015e0 <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    if(hi2c->Instance == I2C1) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a58      	ldr	r2, [pc, #352]	@ (8001750 <HAL_I2C_MemRxCpltCallback+0x170>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f040 80a6 	bne.w	8001740 <HAL_I2C_MemRxCpltCallback+0x160>
        // Accelerometer data conversion
        int16_t rawAccelX = (int16_t)((mpu6050Data[0] << 8) | mpu6050Data[1]);
 80015f4:	4b57      	ldr	r3, [pc, #348]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b55      	ldr	r3, [pc, #340]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 80015fe:	785b      	ldrb	r3, [r3, #1]
 8001600:	b21b      	sxth	r3, r3
 8001602:	4313      	orrs	r3, r2
 8001604:	82fb      	strh	r3, [r7, #22]
        int16_t rawAccelY = (int16_t)((mpu6050Data[2] << 8) | mpu6050Data[3]);
 8001606:	4b53      	ldr	r3, [pc, #332]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001608:	789b      	ldrb	r3, [r3, #2]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21a      	sxth	r2, r3
 800160e:	4b51      	ldr	r3, [pc, #324]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001610:	78db      	ldrb	r3, [r3, #3]
 8001612:	b21b      	sxth	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	82bb      	strh	r3, [r7, #20]
        int16_t rawAccelZ = (int16_t)((mpu6050Data[4] << 8) | mpu6050Data[5]);
 8001618:	4b4e      	ldr	r3, [pc, #312]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 800161a:	791b      	ldrb	r3, [r3, #4]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b21a      	sxth	r2, r3
 8001620:	4b4c      	ldr	r3, [pc, #304]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001622:	795b      	ldrb	r3, [r3, #5]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	827b      	strh	r3, [r7, #18]

        // Temperature data conversion
        int16_t rawTemp = (int16_t)((mpu6050Data[6] << 8) | mpu6050Data[7]);
 800162a:	4b4a      	ldr	r3, [pc, #296]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 800162c:	799b      	ldrb	r3, [r3, #6]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b21a      	sxth	r2, r3
 8001632:	4b48      	ldr	r3, [pc, #288]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001634:	79db      	ldrb	r3, [r3, #7]
 8001636:	b21b      	sxth	r3, r3
 8001638:	4313      	orrs	r3, r2
 800163a:	823b      	strh	r3, [r7, #16]
        // Conversion formula example: actualTemp = (rawTemp / 340.0) + 36.53

        // Gyro data conversion
        int16_t rawGyroX = (int16_t)((mpu6050Data[8]  << 8) | mpu6050Data[9]);
 800163c:	4b45      	ldr	r3, [pc, #276]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 800163e:	7a1b      	ldrb	r3, [r3, #8]
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	b21a      	sxth	r2, r3
 8001644:	4b43      	ldr	r3, [pc, #268]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001646:	7a5b      	ldrb	r3, [r3, #9]
 8001648:	b21b      	sxth	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	81fb      	strh	r3, [r7, #14]
        int16_t rawGyroY = (int16_t)((mpu6050Data[10] << 8) | mpu6050Data[11]);
 800164e:	4b41      	ldr	r3, [pc, #260]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001650:	7a9b      	ldrb	r3, [r3, #10]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b3f      	ldr	r3, [pc, #252]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001658:	7adb      	ldrb	r3, [r3, #11]
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	81bb      	strh	r3, [r7, #12]
        int16_t rawGyroZ = (int16_t)((mpu6050Data[12] << 8) | mpu6050Data[13]);
 8001660:	4b3c      	ldr	r3, [pc, #240]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 8001662:	7b1b      	ldrb	r3, [r3, #12]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b3a      	ldr	r3, [pc, #232]	@ (8001754 <HAL_I2C_MemRxCpltCallback+0x174>)
 800166a:	7b5b      	ldrb	r3, [r3, #13]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	817b      	strh	r3, [r7, #10]


        Ax = rawAccelX / 8192.0f;
 8001672:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800167e:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001758 <HAL_I2C_MemRxCpltCallback+0x178>
 8001682:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001686:	4b35      	ldr	r3, [pc, #212]	@ (800175c <HAL_I2C_MemRxCpltCallback+0x17c>)
 8001688:	edc3 7a00 	vstr	s15, [r3]
        Ay = rawAccelY / 8192.0f;
 800168c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001698:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001758 <HAL_I2C_MemRxCpltCallback+0x178>
 800169c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001760 <HAL_I2C_MemRxCpltCallback+0x180>)
 80016a2:	edc3 7a00 	vstr	s15, [r3]
        Az = rawAccelZ / 8192.0f;
 80016a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b2:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001758 <HAL_I2C_MemRxCpltCallback+0x178>
 80016b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001764 <HAL_I2C_MemRxCpltCallback+0x184>)
 80016bc:	edc3 7a00 	vstr	s15, [r3]

        temperature = (rawTemp / 340.0f) + 36.53f; // Example conversion formula
 80016c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016cc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001768 <HAL_I2C_MemRxCpltCallback+0x188>
 80016d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800176c <HAL_I2C_MemRxCpltCallback+0x18c>
 80016d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016dc:	4b24      	ldr	r3, [pc, #144]	@ (8001770 <HAL_I2C_MemRxCpltCallback+0x190>)
 80016de:	edc3 7a00 	vstr	s15, [r3]

        Gx = rawGyroX / 65.5f;
 80016e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ee:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001774 <HAL_I2C_MemRxCpltCallback+0x194>
 80016f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f6:	4b20      	ldr	r3, [pc, #128]	@ (8001778 <HAL_I2C_MemRxCpltCallback+0x198>)
 80016f8:	edc3 7a00 	vstr	s15, [r3]
        Gy = rawGyroY / 65.5;
 80016fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff0f 	bl	8000524 <__aeabi_i2d>
 8001706:	a310      	add	r3, pc, #64	@ (adr r3, 8001748 <HAL_I2C_MemRxCpltCallback+0x168>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7ff f89e 	bl	800084c <__aeabi_ddiv>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff fa66 	bl	8000be8 <__aeabi_d2f>
 800171c:	4603      	mov	r3, r0
 800171e:	4a17      	ldr	r2, [pc, #92]	@ (800177c <HAL_I2C_MemRxCpltCallback+0x19c>)
 8001720:	6013      	str	r3, [r2, #0]
        Gz = rawGyroZ / 65.5f;
 8001722:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172e:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001774 <HAL_I2C_MemRxCpltCallback+0x194>
 8001732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001736:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <HAL_I2C_MemRxCpltCallback+0x1a0>)
 8001738:	edc3 7a00 	vstr	s15, [r3]
        // Process or store these values as needed
        // For example, update global variables or send them to another module

        // If you need continuous reading and are not using circular mode,
        // you can re-initiate the DMA read here.
        mpu6050Read_DMA();
 800173c:	f7ff ff36 	bl	80015ac <mpu6050Read_DMA>
    }
}
 8001740:	bf00      	nop
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	00000000 	.word	0x00000000
 800174c:	40506000 	.word	0x40506000
 8001750:	40005400 	.word	0x40005400
 8001754:	20000378 	.word	0x20000378
 8001758:	46000000 	.word	0x46000000
 800175c:	2000035c 	.word	0x2000035c
 8001760:	20000360 	.word	0x20000360
 8001764:	20000364 	.word	0x20000364
 8001768:	43aa0000 	.word	0x43aa0000
 800176c:	42121eb8 	.word	0x42121eb8
 8001770:	20000374 	.word	0x20000374
 8001774:	42830000 	.word	0x42830000
 8001778:	20000368 	.word	0x20000368
 800177c:	2000036c 	.word	0x2000036c
 8001780:	20000370 	.word	0x20000370

08001784 <flight_manager_init>:
#define SAMPLE_DT 0.004f           // 4ms
#define ANGLE_MAX_DEG  30.0f
#define YAW_MAX_DPS    90.0f

void flight_manager_init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
    // Roll
    pid_init(&pid_roll_angle, 4.0f, 0.0f, 0.0f);
 8001788:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 80017e8 <flight_manager_init+0x64>
 800178c:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80017e8 <flight_manager_init+0x64>
 8001790:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001794:	4815      	ldr	r0, [pc, #84]	@ (80017ec <flight_manager_init+0x68>)
 8001796:	f7ff fd8b 	bl	80012b0 <pid_init>
    pid_init(&pid_roll_rate, 0.1f, 0.0f, 0.01f);
 800179a:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 80017f0 <flight_manager_init+0x6c>
 800179e:	eddf 0a12 	vldr	s1, [pc, #72]	@ 80017e8 <flight_manager_init+0x64>
 80017a2:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 80017f4 <flight_manager_init+0x70>
 80017a6:	4814      	ldr	r0, [pc, #80]	@ (80017f8 <flight_manager_init+0x74>)
 80017a8:	f7ff fd82 	bl	80012b0 <pid_init>

    // Pitch
    pid_init(&pid_pitch_angle, 4.0f, 0.0f, 0.0f);
 80017ac:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 80017e8 <flight_manager_init+0x64>
 80017b0:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80017e8 <flight_manager_init+0x64>
 80017b4:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 80017b8:	4810      	ldr	r0, [pc, #64]	@ (80017fc <flight_manager_init+0x78>)
 80017ba:	f7ff fd79 	bl	80012b0 <pid_init>
    pid_init(&pid_pitch_rate, 0.1f, 0.0f, 0.01f);
 80017be:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 80017f0 <flight_manager_init+0x6c>
 80017c2:	eddf 0a09 	vldr	s1, [pc, #36]	@ 80017e8 <flight_manager_init+0x64>
 80017c6:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80017f4 <flight_manager_init+0x70>
 80017ca:	480d      	ldr	r0, [pc, #52]	@ (8001800 <flight_manager_init+0x7c>)
 80017cc:	f7ff fd70 	bl	80012b0 <pid_init>

    // Yaw (rate mode only)
    pid_init(&pid_yaw_rate, 0.2f, 0.0f, 0.01f);
 80017d0:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 80017f0 <flight_manager_init+0x6c>
 80017d4:	eddf 0a04 	vldr	s1, [pc, #16]	@ 80017e8 <flight_manager_init+0x64>
 80017d8:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001804 <flight_manager_init+0x80>
 80017dc:	480a      	ldr	r0, [pc, #40]	@ (8001808 <flight_manager_init+0x84>)
 80017de:	f7ff fd67 	bl	80012b0 <pid_init>
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	00000000 	.word	0x00000000
 80017ec:	20000388 	.word	0x20000388
 80017f0:	3c23d70a 	.word	0x3c23d70a
 80017f4:	3dcccccd 	.word	0x3dcccccd
 80017f8:	2000039c 	.word	0x2000039c
 80017fc:	200003b0 	.word	0x200003b0
 8001800:	200003c4 	.word	0x200003c4
 8001804:	3e4ccccd 	.word	0x3e4ccccd
 8001808:	200003d8 	.word	0x200003d8

0800180c <flight_manager_update>:

void flight_manager_update(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b098      	sub	sp, #96	@ 0x60
 8001810:	af00      	add	r7, sp, #0
    // === Sensor Fusion (Kalman) ===
    imu_fusion_update(Gx, Gy, Gz, Ax, Ay, Az, SAMPLE_DT,
 8001812:	4bda      	ldr	r3, [pc, #872]	@ (8001b7c <flight_manager_update+0x370>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	4bd9      	ldr	r3, [pc, #868]	@ (8001b80 <flight_manager_update+0x374>)
 800181a:	ed93 7a00 	vldr	s14, [r3]
 800181e:	4bd9      	ldr	r3, [pc, #868]	@ (8001b84 <flight_manager_update+0x378>)
 8001820:	edd3 6a00 	vldr	s13, [r3]
 8001824:	4bd8      	ldr	r3, [pc, #864]	@ (8001b88 <flight_manager_update+0x37c>)
 8001826:	ed93 6a00 	vldr	s12, [r3]
 800182a:	4bd8      	ldr	r3, [pc, #864]	@ (8001b8c <flight_manager_update+0x380>)
 800182c:	edd3 5a00 	vldr	s11, [r3]
 8001830:	4bd7      	ldr	r3, [pc, #860]	@ (8001b90 <flight_manager_update+0x384>)
 8001832:	ed93 5a00 	vldr	s10, [r3]
 8001836:	49d7      	ldr	r1, [pc, #860]	@ (8001b94 <flight_manager_update+0x388>)
 8001838:	48d7      	ldr	r0, [pc, #860]	@ (8001b98 <flight_manager_update+0x38c>)
 800183a:	ed9f 3ad8 	vldr	s6, [pc, #864]	@ 8001b9c <flight_manager_update+0x390>
 800183e:	eef0 2a45 	vmov.f32	s5, s10
 8001842:	eeb0 2a65 	vmov.f32	s4, s11
 8001846:	eef0 1a46 	vmov.f32	s3, s12
 800184a:	eeb0 1a66 	vmov.f32	s2, s13
 800184e:	eef0 0a47 	vmov.f32	s1, s14
 8001852:	eeb0 0a67 	vmov.f32	s0, s15
 8001856:	f001 f947 	bl	8002ae8 <imu_fusion_update>
                      &roll_estimate_deg, &pitch_estimate_deg);

    // === RC Input (PWM: 1000–2000) ===
    float rc_throttle = get_throttle();
 800185a:	f7ff fc19 	bl	8001090 <get_throttle>
 800185e:	4603      	mov	r3, r0
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001868:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    float rc_roll     = get_roll();
 800186c:	f7ff fbf8 	bl	8001060 <get_roll>
 8001870:	4603      	mov	r3, r0
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    float rc_pitch    = get_pitch();
 800187e:	f7ff fbfb 	bl	8001078 <get_pitch>
 8001882:	4603      	mov	r3, r0
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800188c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    float rc_yaw      = get_yaw();
 8001890:	f7ff fc0a 	bl	80010a8 <get_yaw>
 8001894:	4603      	mov	r3, r0
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    float rc_sw1      = get_sw1();
 80018a2:	f7ff fc0d 	bl	80010c0 <get_sw1>
 80018a6:	4603      	mov	r3, r0
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    // === Arming Logic ===
    if (rc_sw1  > 1500) {
 80018b4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80018b8:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8001ba0 <flight_manager_update+0x394>
 80018bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c4:	dd03      	ble.n	80018ce <flight_manager_update+0xc2>
        armed = true;
 80018c6:	4bb7      	ldr	r3, [pc, #732]	@ (8001ba4 <flight_manager_update+0x398>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e002      	b.n	80018d4 <flight_manager_update+0xc8>
    } else {
        armed = false;
 80018ce:	4bb5      	ldr	r3, [pc, #724]	@ (8001ba4 <flight_manager_update+0x398>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
    }

    // === Map RC to target angles/rates ===
    float roll_target_deg   = ((rc_roll - 1500) / 500.0f) * ANGLE_MAX_DEG;
 80018d4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80018d8:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8001ba0 <flight_manager_update+0x394>
 80018dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018e0:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8001ba8 <flight_manager_update+0x39c>
 80018e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018e8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80018ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    float pitch_target_deg  = ((rc_pitch - 1500) / 500.0f) * ANGLE_MAX_DEG;
 80018f4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80018f8:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8001ba0 <flight_manager_update+0x394>
 80018fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001900:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001ba8 <flight_manager_update+0x39c>
 8001904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001908:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800190c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001910:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float yaw_target_rate   = ((rc_yaw - 1500) / 500.0f) * YAW_MAX_DPS;
 8001914:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001918:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8001ba0 <flight_manager_update+0x394>
 800191c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001920:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8001ba8 <flight_manager_update+0x39c>
 8001924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001928:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001bac <flight_manager_update+0x3a0>
 800192c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001930:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // === Angle PID (outer loop) ===
    float roll_error_angle  = roll_target_deg - roll_estimate_deg;
 8001934:	4b98      	ldr	r3, [pc, #608]	@ (8001b98 <flight_manager_update+0x38c>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800193e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001942:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float pitch_error_angle = pitch_target_deg - pitch_estimate_deg;
 8001946:	4b93      	ldr	r3, [pc, #588]	@ (8001b94 <flight_manager_update+0x388>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001954:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    float desired_roll_rate  = pid_compute(&pid_roll_angle, roll_error_angle, SAMPLE_DT);
 8001958:	eddf 0a90 	vldr	s1, [pc, #576]	@ 8001b9c <flight_manager_update+0x390>
 800195c:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8001960:	4893      	ldr	r0, [pc, #588]	@ (8001bb0 <flight_manager_update+0x3a4>)
 8001962:	f7ff fcc7 	bl	80012f4 <pid_compute>
 8001966:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
    float desired_pitch_rate = pid_compute(&pid_pitch_angle, pitch_error_angle, SAMPLE_DT);
 800196a:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8001b9c <flight_manager_update+0x390>
 800196e:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001972:	4890      	ldr	r0, [pc, #576]	@ (8001bb4 <flight_manager_update+0x3a8>)
 8001974:	f7ff fcbe 	bl	80012f4 <pid_compute>
 8001978:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

    // === Rate PID (inner loop) ===
    float roll_rate_error  = desired_roll_rate - Gx;
 800197c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b7c <flight_manager_update+0x370>)
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float pitch_rate_error = desired_pitch_rate - Gy;
 800198e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b80 <flight_manager_update+0x374>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float yaw_rate_error   = yaw_target_rate - Gz;
 80019a0:	4b78      	ldr	r3, [pc, #480]	@ (8001b84 <flight_manager_update+0x378>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80019aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float roll_output  = pid_compute(&pid_roll_rate, roll_rate_error, SAMPLE_DT);
 80019b2:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 8001b9c <flight_manager_update+0x390>
 80019b6:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80019ba:	487f      	ldr	r0, [pc, #508]	@ (8001bb8 <flight_manager_update+0x3ac>)
 80019bc:	f7ff fc9a 	bl	80012f4 <pid_compute>
 80019c0:	ed87 0a08 	vstr	s0, [r7, #32]
    float pitch_output = pid_compute(&pid_pitch_rate, pitch_rate_error, SAMPLE_DT);
 80019c4:	eddf 0a75 	vldr	s1, [pc, #468]	@ 8001b9c <flight_manager_update+0x390>
 80019c8:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80019cc:	487b      	ldr	r0, [pc, #492]	@ (8001bbc <flight_manager_update+0x3b0>)
 80019ce:	f7ff fc91 	bl	80012f4 <pid_compute>
 80019d2:	ed87 0a07 	vstr	s0, [r7, #28]
    float yaw_output   = pid_compute(&pid_yaw_rate, yaw_rate_error, SAMPLE_DT);
 80019d6:	eddf 0a71 	vldr	s1, [pc, #452]	@ 8001b9c <flight_manager_update+0x390>
 80019da:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80019de:	4878      	ldr	r0, [pc, #480]	@ (8001bc0 <flight_manager_update+0x3b4>)
 80019e0:	f7ff fc88 	bl	80012f4 <pid_compute>
 80019e4:	ed87 0a06 	vstr	s0, [r7, #24]

    // === Safety: Throttle Cutoff or Disarmed ===
    if (!armed || rc_throttle < 1050) {
 80019e8:	4b6e      	ldr	r3, [pc, #440]	@ (8001ba4 <flight_manager_update+0x398>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	f083 0301 	eor.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d108      	bne.n	8001a08 <flight_manager_update+0x1fc>
 80019f6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80019fa:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8001bc4 <flight_manager_update+0x3b8>
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d519      	bpl.n	8001a3c <flight_manager_update+0x230>
        motor_control_write(1000, 1000, 1000, 1000);
 8001a08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a18:	f000 f8da 	bl	8001bd0 <motor_control_write>

        // Reset PIDs
        pid_reset(&pid_roll_angle);
 8001a1c:	4864      	ldr	r0, [pc, #400]	@ (8001bb0 <flight_manager_update+0x3a4>)
 8001a1e:	f7ff fcef 	bl	8001400 <pid_reset>
        pid_reset(&pid_roll_rate);
 8001a22:	4865      	ldr	r0, [pc, #404]	@ (8001bb8 <flight_manager_update+0x3ac>)
 8001a24:	f7ff fcec 	bl	8001400 <pid_reset>
        pid_reset(&pid_pitch_angle);
 8001a28:	4862      	ldr	r0, [pc, #392]	@ (8001bb4 <flight_manager_update+0x3a8>)
 8001a2a:	f7ff fce9 	bl	8001400 <pid_reset>
        pid_reset(&pid_pitch_rate);
 8001a2e:	4863      	ldr	r0, [pc, #396]	@ (8001bbc <flight_manager_update+0x3b0>)
 8001a30:	f7ff fce6 	bl	8001400 <pid_reset>
        pid_reset(&pid_yaw_rate);
 8001a34:	4862      	ldr	r0, [pc, #392]	@ (8001bc0 <flight_manager_update+0x3b4>)
 8001a36:	f7ff fce3 	bl	8001400 <pid_reset>

        return; // Exit early
 8001a3a:	e09b      	b.n	8001b74 <flight_manager_update+0x368>
    }

    // === Motor Mixing ===
    float m1 = rc_throttle - roll_output - pitch_output - yaw_output;
 8001a3c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001a40:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a48:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a50:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a58:	edc7 7a05 	vstr	s15, [r7, #20]
    float m2 = rc_throttle + roll_output - pitch_output + yaw_output;
 8001a5c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001a60:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a68:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a70:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a78:	edc7 7a04 	vstr	s15, [r7, #16]
    float m3 = rc_throttle + roll_output + pitch_output - yaw_output;
 8001a7c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001a80:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a88:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a90:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a98:	edc7 7a03 	vstr	s15, [r7, #12]
    float m4 = rc_throttle - roll_output + pitch_output + yaw_output;
 8001a9c:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001aa0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001aa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab8:	edc7 7a02 	vstr	s15, [r7, #8]

    // Clamp to PWM range
    uint16_t pwm1 = (uint16_t)fminf(fmaxf(m1, 1000), 2000);
 8001abc:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8001bc8 <flight_manager_update+0x3bc>
 8001ac0:	ed97 0a05 	vldr	s0, [r7, #20]
 8001ac4:	f00f fe7c 	bl	80117c0 <fmaxf>
 8001ac8:	eef0 7a40 	vmov.f32	s15, s0
 8001acc:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8001bcc <flight_manager_update+0x3c0>
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	f00f fe91 	bl	80117fa <fminf>
 8001ad8:	eef0 7a40 	vmov.f32	s15, s0
 8001adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae0:	ee17 3a90 	vmov	r3, s15
 8001ae4:	80fb      	strh	r3, [r7, #6]
    uint16_t pwm2 = (uint16_t)fminf(fmaxf(m2, 1000), 2000);
 8001ae6:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8001bc8 <flight_manager_update+0x3bc>
 8001aea:	ed97 0a04 	vldr	s0, [r7, #16]
 8001aee:	f00f fe67 	bl	80117c0 <fmaxf>
 8001af2:	eef0 7a40 	vmov.f32	s15, s0
 8001af6:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8001bcc <flight_manager_update+0x3c0>
 8001afa:	eeb0 0a67 	vmov.f32	s0, s15
 8001afe:	f00f fe7c 	bl	80117fa <fminf>
 8001b02:	eef0 7a40 	vmov.f32	s15, s0
 8001b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b0a:	ee17 3a90 	vmov	r3, s15
 8001b0e:	80bb      	strh	r3, [r7, #4]
    uint16_t pwm3 = (uint16_t)fminf(fmaxf(m3, 1000), 2000);
 8001b10:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8001bc8 <flight_manager_update+0x3bc>
 8001b14:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b18:	f00f fe52 	bl	80117c0 <fmaxf>
 8001b1c:	eef0 7a40 	vmov.f32	s15, s0
 8001b20:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8001bcc <flight_manager_update+0x3c0>
 8001b24:	eeb0 0a67 	vmov.f32	s0, s15
 8001b28:	f00f fe67 	bl	80117fa <fminf>
 8001b2c:	eef0 7a40 	vmov.f32	s15, s0
 8001b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b34:	ee17 3a90 	vmov	r3, s15
 8001b38:	807b      	strh	r3, [r7, #2]
    uint16_t pwm4 = (uint16_t)fminf(fmaxf(m4, 1000), 2000);
 8001b3a:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8001bc8 <flight_manager_update+0x3bc>
 8001b3e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001b42:	f00f fe3d 	bl	80117c0 <fmaxf>
 8001b46:	eef0 7a40 	vmov.f32	s15, s0
 8001b4a:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8001bcc <flight_manager_update+0x3c0>
 8001b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b52:	f00f fe52 	bl	80117fa <fminf>
 8001b56:	eef0 7a40 	vmov.f32	s15, s0
 8001b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b5e:	ee17 3a90 	vmov	r3, s15
 8001b62:	803b      	strh	r3, [r7, #0]
     * - M2 (Front Right) -> PA7  -> pwm2
     * - M3 (Back Left)   -> PB0  -> pwm4
     * - M4 (Front Left)  -> PB1  -> pwm1
     * \todo Add a config file later for motor management, debug and other configurations.
     */
    motor_control_write(pwm3, pwm2, pwm4, pwm1);
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	883a      	ldrh	r2, [r7, #0]
 8001b68:	88b9      	ldrh	r1, [r7, #4]
 8001b6a:	8878      	ldrh	r0, [r7, #2]
 8001b6c:	f000 f830 	bl	8001bd0 <motor_control_write>
//                         roll_estimate_deg, pitch_estimate_deg,
//                         roll_output, pitch_output, yaw_output,
//                         pwm1, pwm2, pwm3, pwm4);


    debug_motor_test_sequence();
 8001b70:	f001 f86a 	bl	8002c48 <debug_motor_test_sequence>




}
 8001b74:	3760      	adds	r7, #96	@ 0x60
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000368 	.word	0x20000368
 8001b80:	2000036c 	.word	0x2000036c
 8001b84:	20000370 	.word	0x20000370
 8001b88:	2000035c 	.word	0x2000035c
 8001b8c:	20000360 	.word	0x20000360
 8001b90:	20000364 	.word	0x20000364
 8001b94:	200003f0 	.word	0x200003f0
 8001b98:	200003ec 	.word	0x200003ec
 8001b9c:	3b83126f 	.word	0x3b83126f
 8001ba0:	44bb8000 	.word	0x44bb8000
 8001ba4:	20000386 	.word	0x20000386
 8001ba8:	43fa0000 	.word	0x43fa0000
 8001bac:	42b40000 	.word	0x42b40000
 8001bb0:	20000388 	.word	0x20000388
 8001bb4:	200003b0 	.word	0x200003b0
 8001bb8:	2000039c 	.word	0x2000039c
 8001bbc:	200003c4 	.word	0x200003c4
 8001bc0:	200003d8 	.word	0x200003d8
 8001bc4:	44834000 	.word	0x44834000
 8001bc8:	447a0000 	.word	0x447a0000
 8001bcc:	44fa0000 	.word	0x44fa0000

08001bd0 <motor_control_write>:
extern TIM_HandleTypeDef htim3;


// Directly sets PWM pulse widths to ESCs via TIM3
void motor_control_write(uint16_t m1, uint16_t m2, uint16_t m3, uint16_t m4)
{
 8001bd0:	b490      	push	{r4, r7}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	4608      	mov	r0, r1
 8001bda:	4611      	mov	r1, r2
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4623      	mov	r3, r4
 8001be0:	80fb      	strh	r3, [r7, #6]
 8001be2:	4603      	mov	r3, r0
 8001be4:	80bb      	strh	r3, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	807b      	strh	r3, [r7, #2]
 8001bea:	4613      	mov	r3, r2
 8001bec:	803b      	strh	r3, [r7, #0]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, m1);
 8001bee:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <motor_control_write+0x48>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	88fa      	ldrh	r2, [r7, #6]
 8001bf4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, m2);
 8001bf6:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <motor_control_write+0x48>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	88ba      	ldrh	r2, [r7, #4]
 8001bfc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, m3);
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <motor_control_write+0x48>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, m4);
 8001c06:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <motor_control_write+0x48>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	883a      	ldrh	r2, [r7, #0]
 8001c0c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc90      	pop	{r4, r7}
 8001c16:	4770      	bx	lr
 8001c18:	200005c0 	.word	0x200005c0

08001c1c <_mulmat>:
        const _float_t * b, 
        _float_t * c, 
        const int arows, 
        const int acols, 
        const int bcols)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
    for (int i=0; i<arows; ++i) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e052      	b.n	8001cd6 <_mulmat+0xba>
        for (int j=0; j<bcols; ++j) {
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	e048      	b.n	8001cc8 <_mulmat+0xac>
            c[i*bcols+j] = 0;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c3a:	fb03 f202 	mul.w	r2, r3, r2
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
            for (int k=0; k<acols; ++k) {
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e032      	b.n	8001cba <_mulmat+0x9e>
                c[i*bcols+j] += a[i*acols+k] * b[k*bcols+j];
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c58:	fb03 f202 	mul.w	r2, r3, r2
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	ed93 7a00 	vldr	s14, [r3]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c6e:	fb03 f202 	mul.w	r2, r3, r2
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	edd3 6a00 	vldr	s13, [r3]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c84:	fb03 f202 	mul.w	r2, r3, r2
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	4413      	add	r3, r2
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb0:	edc3 7a00 	vstr	s15, [r3]
            for (int k=0; k<acols; ++k) {
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	dbc8      	blt.n	8001c54 <_mulmat+0x38>
        for (int j=0; j<bcols; ++j) {
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	dbb2      	blt.n	8001c36 <_mulmat+0x1a>
    for (int i=0; i<arows; ++i) {
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dba8      	blt.n	8001c30 <_mulmat+0x14>
            }
        }
    }
}
 8001cde:	bf00      	nop
 8001ce0:	bf00      	nop
 8001ce2:	3724      	adds	r7, #36	@ 0x24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_mulvec>:
        const _float_t * a, 
        const _float_t * x, 
        _float_t * y, 
        const int m, 
        const int n)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e034      	b.n	8001d6a <_mulvec+0x7e>
        y[i] = 0;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	e023      	b.n	8001d5c <_mulvec+0x70>
            y[i] += x[j] * a[i*n+j];
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	ed93 7a00 	vldr	s14, [r3]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	4413      	add	r3, r2
 8001d28:	edd3 6a00 	vldr	s13, [r3]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	6a3a      	ldr	r2, [r7, #32]
 8001d30:	fb03 f202 	mul.w	r2, r3, r2
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d52:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dbd7      	blt.n	8001d14 <_mulvec+0x28>
    for (int i=0; i<m; ++i) {
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	dbc6      	blt.n	8001d00 <_mulvec+0x14>
    }
}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_transpose>:

/// @private
static void _transpose(
        const _float_t * a, _float_t * at, const int m, const int n)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e020      	b.n	8001dd6 <_transpose+0x56>
        for (int j=0; j<n; ++j) {
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	e016      	b.n	8001dc8 <_transpose+0x48>
            at[j*m+i] = a[i*n+j];
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	fb03 f202 	mul.w	r2, r3, r2
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	441a      	add	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	fb03 f101 	mul.w	r1, r3, r1
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	440b      	add	r3, r1
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	440b      	add	r3, r1
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j) {
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dbe4      	blt.n	8001d9a <_transpose+0x1a>
    for (int i=0; i<m; ++i)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dbda      	blt.n	8001d94 <_transpose+0x14>
        }
}
 8001dde:	bf00      	nop
 8001de0:	bf00      	nop
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_addmat>:

/// @private
static void _addmat(
        const _float_t * a, const _float_t * b, _float_t * c, 
        const int m, const int n)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	e02f      	b.n	8001e60 <_addmat+0x74>
        for (int j=0; j<n; ++j) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	e025      	b.n	8001e52 <_addmat+0x66>
            c[i*n+j] = a[i*n+j] + b[i*n+j];
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	6a3a      	ldr	r2, [r7, #32]
 8001e0a:	fb03 f202 	mul.w	r2, r3, r2
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	ed93 7a00 	vldr	s14, [r3]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	6a3a      	ldr	r2, [r7, #32]
 8001e20:	fb03 f202 	mul.w	r2, r3, r2
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	6a3a      	ldr	r2, [r7, #32]
 8001e36:	fb03 f202 	mul.w	r2, r3, r2
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e48:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	dbd5      	blt.n	8001e06 <_addmat+0x1a>
    for (int i=0; i<m; ++i) {
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	dbcb      	blt.n	8001e00 <_addmat+0x14>
        }
    }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	371c      	adds	r7, #28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <_negate>:

/// @private
static void _negate(_float_t * a, const int m, const int n)
{        
 8001e76:	b480      	push	{r7}
 8001e78:	b087      	sub	sp, #28
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
    for (int i=0; i<m; ++i) {
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	e024      	b.n	8001ed2 <_negate+0x5c>
        for (int j=0; j<n; ++j) {
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e01a      	b.n	8001ec4 <_negate+0x4e>
            a[i*n+j] = -a[i*n+j];
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	fb03 f202 	mul.w	r2, r3, r2
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	fb03 f202 	mul.w	r2, r3, r2
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	eef1 7a67 	vneg.f32	s15, s15
 8001eba:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	dbe0      	blt.n	8001e8e <_negate+0x18>
    for (int i=0; i<m; ++i) {
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dbd6      	blt.n	8001e88 <_negate+0x12>
        }
    }
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	371c      	adds	r7, #28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_addeye>:

/// @private
static void _addeye(_float_t * a, const int n)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
    for (int i=0; i<n; ++i) {
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	e01c      	b.n	8001f32 <_addeye+0x4a>
        a[i*n+i] += 1;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	fb03 f202 	mul.w	r2, r3, r2
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	edd3 7a00 	vldr	s15, [r3]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	fb03 f202 	mul.w	r2, r3, r2
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f28:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<n; ++i) {
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	dbde      	blt.n	8001ef8 <_addeye+0x10>
    }
}
 8001f3a:	bf00      	nop
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_choldc1>:
/* Cholesky-decomposition matrix-inversion code, adapated from
http://jean-pierre.moreau.pagesperso-orange.fr/Cplus/_choles_cpp.txt */

/// @private
static int _choldc1(_float_t * a, _float_t * p, const int n) 
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b089      	sub	sp, #36	@ 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < n; i++) {
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	e075      	b.n	8002046 <_choldc1+0xfe>
        for (int j = i; j < n; j++) {
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	e06b      	b.n	8002038 <_choldc1+0xf0>
            _float_t sum = a[i*n+j];
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	fb03 f202 	mul.w	r2, r3, r2
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	617b      	str	r3, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	e020      	b.n	8001fc0 <_choldc1+0x78>
                sum -= a[i*n+k] * a[j*n+k];
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	fb03 f202 	mul.w	r2, r3, r2
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4413      	add	r3, r2
 8001f90:	ed93 7a00 	vldr	s14, [r3]
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	fb03 f202 	mul.w	r2, r3, r2
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fae:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb6:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	dadb      	bge.n	8001f7e <_choldc1+0x36>
            }
            if (i == j) {
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d11c      	bne.n	8002008 <_choldc1+0xc0>
                if (sum <= 0) {
 8001fce:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fda:	d801      	bhi.n	8001fe0 <_choldc1+0x98>
                    return 1; /* error */
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e037      	b.n	8002050 <_choldc1+0x108>
                }
                p[i] = sqrt(sum);
 8001fe0:	6978      	ldr	r0, [r7, #20]
 8001fe2:	f7fe fab1 	bl	8000548 <__aeabi_f2d>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	ec43 2b10 	vmov	d0, r2, r3
 8001fee:	f00f fb11 	bl	8011614 <sqrt>
 8001ff2:	ec51 0b10 	vmov	r0, r1, d0
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	18d4      	adds	r4, r2, r3
 8001ffe:	f7fe fdf3 	bl	8000be8 <__aeabi_d2f>
 8002002:	4603      	mov	r3, r0
 8002004:	6023      	str	r3, [r4, #0]
 8002006:	e014      	b.n	8002032 <_choldc1+0xea>
            }
            else {
                a[j*n+i] = sum / p[i];
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	4413      	add	r3, r2
 8002010:	ed93 7a00 	vldr	s14, [r3]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	fb03 f202 	mul.w	r2, r3, r2
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4413      	add	r3, r2
 8002026:	edd7 6a05 	vldr	s13, [r7, #20]
 800202a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800202e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i; j < n; j++) {
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	3301      	adds	r3, #1
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	db8f      	blt.n	8001f60 <_choldc1+0x18>
    for (int i = 0; i < n; i++) {
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	3301      	adds	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	db85      	blt.n	8001f5a <_choldc1+0x12>
            }
        }
    }

    return 0; // success:w
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3724      	adds	r7, #36	@ 0x24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}

08002058 <_choldcsl>:

/// @private
static int _choldcsl(const _float_t * A, _float_t * a, _float_t * p, const int n) 
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
 800206a:	e020      	b.n	80020ae <_choldcsl+0x56>
        for (int j = 0; j < n; j++) {
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
 8002070:	e016      	b.n	80020a0 <_choldcsl+0x48>
            a[i*n+j] = A[i*n+j];
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	fb03 f202 	mul.w	r2, r3, r2
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	441a      	add	r2, r3
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	6839      	ldr	r1, [r7, #0]
 8002088:	fb03 f101 	mul.w	r1, r3, r1
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	440b      	add	r3, r1
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	440b      	add	r3, r1
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < n; j++) {
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	3301      	adds	r3, #1
 800209e:	623b      	str	r3, [r7, #32]
 80020a0:	6a3a      	ldr	r2, [r7, #32]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	dbe4      	blt.n	8002072 <_choldcsl+0x1a>
    for (int i = 0; i < n; i++) {
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	3301      	adds	r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	dbda      	blt.n	800206c <_choldcsl+0x14>
        }
    }
    if (_choldc1(a, p, n)) {
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	68b8      	ldr	r0, [r7, #8]
 80020bc:	f7ff ff44 	bl	8001f48 <_choldc1>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <_choldcsl+0x72>
        return 1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e06a      	b.n	80021a0 <_choldcsl+0x148>
    }
    for (int i = 0; i < n; i++) {
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	e062      	b.n	8002196 <_choldcsl+0x13e>
        a[i*n+i] = 1 / p[i];
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	4413      	add	r3, r2
 80020d8:	ed93 7a00 	vldr	s14, [r3]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	fb03 f202 	mul.w	r2, r3, r2
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	4413      	add	r3, r2
 80020ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3301      	adds	r3, #1
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	e042      	b.n	8002188 <_choldcsl+0x130>
            _float_t sum = 0;
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
            for (int k = i; k < j; k++) {
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	e020      	b.n	8002150 <_choldcsl+0xf8>
                sum -= a[j*n+k] * a[k*n+i];
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	fb03 f202 	mul.w	r2, r3, r2
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	4413      	add	r3, r2
 8002120:	ed93 7a00 	vldr	s14, [r3]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	fb03 f202 	mul.w	r2, r3, r2
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4413      	add	r3, r2
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002146:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i; k < j; k++) {
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	3301      	adds	r3, #1
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	429a      	cmp	r2, r3
 8002156:	dbda      	blt.n	800210e <_choldcsl+0xb6>
            }
            a[j*n+i] = sum / p[j];
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	ed93 7a00 	vldr	s14, [r3]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	fb03 f202 	mul.w	r2, r3, r2
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	4413      	add	r3, r2
 8002176:	edd7 6a05 	vldr	s13, [r7, #20]
 800217a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800217e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	3301      	adds	r3, #1
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	dbb8      	blt.n	8002102 <_choldcsl+0xaa>
    for (int i = 0; i < n; i++) {
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	3301      	adds	r3, #1
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	db98      	blt.n	80020d0 <_choldcsl+0x78>
        }
    }

    return 0; // success
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3728      	adds	r7, #40	@ 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_cholsl>:

/// @private
static int _cholsl(const _float_t * A, _float_t * a, _float_t * p, const int n) 
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	@ 0x30
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
    if (_choldcsl(A,a,p,n)) {
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f7ff ff4b 	bl	8002058 <_choldcsl>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <_cholsl+0x24>
        return 1;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0f7      	b.n	80023bc <_cholsl+0x214>
    }

    for (int i = 0; i < n; i++) {
 80021cc:	2300      	movs	r3, #0
 80021ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021d0:	e019      	b.n	8002206 <_cholsl+0x5e>
        for (int j = i + 1; j < n; j++) {
 80021d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d4:	3301      	adds	r3, #1
 80021d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021d8:	e00e      	b.n	80021f8 <_cholsl+0x50>
            a[i*n+j] = 0.0;
 80021da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	fb03 f202 	mul.w	r2, r3, r2
 80021e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	4413      	add	r3, r2
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
        for (int j = i + 1; j < n; j++) {
 80021f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f4:	3301      	adds	r3, #1
 80021f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	dbec      	blt.n	80021da <_cholsl+0x32>
    for (int i = 0; i < n; i++) {
 8002200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002202:	3301      	adds	r3, #1
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	dbe1      	blt.n	80021d2 <_cholsl+0x2a>
        }
    }
    for (int i = 0; i < n; i++) {
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
 8002212:	e0a5      	b.n	8002360 <_cholsl+0x1b8>
        a[i*n+i] *= a[i*n+i];
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	fb03 f202 	mul.w	r2, r3, r2
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	4413      	add	r3, r2
 8002226:	ed93 7a00 	vldr	s14, [r3]
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	fb03 f202 	mul.w	r2, r3, r2
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	4413      	add	r3, r2
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	fb03 f202 	mul.w	r2, r3, r2
 8002248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	4413      	add	r3, r2
 8002252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002256:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	3301      	adds	r3, #1
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	e032      	b.n	80022c8 <_cholsl+0x120>
            a[i*n+i] += a[k*n+i] * a[k*n+i];
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	fb03 f202 	mul.w	r2, r3, r2
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	4413      	add	r3, r2
 8002274:	ed93 7a00 	vldr	s14, [r3]
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	fb03 f202 	mul.w	r2, r3, r2
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	4413      	add	r3, r2
 800228a:	edd3 6a00 	vldr	s13, [r3]
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	fb03 f202 	mul.w	r2, r3, r2
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	4413      	add	r3, r2
 80022a0:	edd3 7a00 	vldr	s15, [r3]
 80022a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	fb03 f202 	mul.w	r2, r3, r2
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	4413      	add	r3, r2
 80022ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022be:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	3301      	adds	r3, #1
 80022c6:	623b      	str	r3, [r7, #32]
 80022c8:	6a3a      	ldr	r2, [r7, #32]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	dbc8      	blt.n	8002262 <_cholsl+0xba>
        }
        for (int j = i + 1; j < n; j++) {
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	3301      	adds	r3, #1
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e03c      	b.n	8002352 <_cholsl+0x1aa>
            for (int k = j; k < n; k++) {
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	e032      	b.n	8002344 <_cholsl+0x19c>
                a[i*n+j] += a[k*n+i] * a[k*n+j];
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	fb03 f202 	mul.w	r2, r3, r2
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	4413      	add	r3, r2
 80022f0:	ed93 7a00 	vldr	s14, [r3]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	fb03 f202 	mul.w	r2, r3, r2
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4413      	add	r3, r2
 8002306:	edd3 6a00 	vldr	s13, [r3]
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	fb03 f202 	mul.w	r2, r3, r2
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	4413      	add	r3, r2
 800231c:	edd3 7a00 	vldr	s15, [r3]
 8002320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	fb03 f202 	mul.w	r2, r3, r2
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	4413      	add	r3, r2
 8002336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = j; k < n; k++) {
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	3301      	adds	r3, #1
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	dbc8      	blt.n	80022de <_cholsl+0x136>
        for (int j = i + 1; j < n; j++) {
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	3301      	adds	r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	dbbe      	blt.n	80022d8 <_cholsl+0x130>
    for (int i = 0; i < n; i++) {
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	3301      	adds	r3, #1
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	f6ff af55 	blt.w	8002214 <_cholsl+0x6c>
            }
        }
    }
    for (int i = 0; i < n; i++) {
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e020      	b.n	80023b2 <_cholsl+0x20a>
        for (int j = 0; j < i; j++) {
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	e016      	b.n	80023a4 <_cholsl+0x1fc>
            a[i*n+j] = a[j*n+i];
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	fb03 f202 	mul.w	r2, r3, r2
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	441a      	add	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	6839      	ldr	r1, [r7, #0]
 800238c:	fb03 f101 	mul.w	r1, r3, r1
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	440b      	add	r3, r1
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	440b      	add	r3, r1
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < i; j++) {
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	3301      	adds	r3, #1
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	dbe4      	blt.n	8002376 <_cholsl+0x1ce>
    for (int i = 0; i < n; i++) {
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	3301      	adds	r3, #1
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	dbda      	blt.n	8002370 <_cholsl+0x1c8>
        }
    }

    return 0; // success
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3730      	adds	r7, #48	@ 0x30
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_addvec>:

/// @private
static void _addvec(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	e016      	b.n	8002406 <_addvec+0x42>
        c[j] = a[j] + b[j];
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	ed93 7a00 	vldr	s14, [r3]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	4413      	add	r3, r2
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fc:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3301      	adds	r3, #1
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	dbe4      	blt.n	80023d8 <_addvec+0x14>
    }
}
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_sub>:

/// @private
static void _sub(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	e016      	b.n	800245e <_sub+0x42>
        c[j] = a[j] - b[j];
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	ed93 7a00 	vldr	s14, [r3]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	4413      	add	r3, r2
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002454:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	3301      	adds	r3, #1
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	dbe4      	blt.n	8002430 <_sub+0x14>
    }
}
 8002466:	bf00      	nop
 8002468:	bf00      	nop
 800246a:	371c      	adds	r7, #28
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <invert>:

/// @private
static bool invert(const _float_t * a, _float_t * ainv)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
    _float_t tmp[EKF_M];

    return _cholsl(a, ainv, tmp, EKF_M) == 0;
 800247e:	f107 020c 	add.w	r2, r7, #12
 8002482:	2303      	movs	r3, #3
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff fe8e 	bl	80021a8 <_cholsl>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf0c      	ite	eq
 8002492:	2301      	moveq	r3, #1
 8002494:	2300      	movne	r3, #0
 8002496:	b2db      	uxtb	r3, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <ekf_initialize>:
 * @param ekf pointer to an ekf_t structure
 * @param pdiag a vector of length EKF_N containing the initial values for the
 * covariance matrix diagonal
 */
static void ekf_initialize(ekf_t * ekf, const _float_t pdiag[EKF_N])
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
    for (int i=0; i<EKF_N; ++i) {
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	e027      	b.n	8002500 <ekf_initialize+0x60>

        for (int j=0; j<EKF_N; ++j) {
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	e017      	b.n	80024e6 <ekf_initialize+0x46>

            ekf->P[i*EKF_N+j] = i==j ? pdiag[i] : 0;
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d105      	bne.n	80024ca <ekf_initialize+0x2a>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	4413      	add	r3, r2
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	e001      	b.n	80024ce <ekf_initialize+0x2e>
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	0051      	lsls	r1, r2, #1
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	440a      	add	r2, r1
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	3202      	adds	r2, #2
 80024da:	0092      	lsls	r2, r2, #2
 80024dc:	440a      	add	r2, r1
 80024de:	6013      	str	r3, [r2, #0]
        for (int j=0; j<EKF_N; ++j) {
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	3301      	adds	r3, #1
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	dde4      	ble.n	80024b6 <ekf_initialize+0x16>
        }

        ekf->x[i] = 0;
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
    for (int i=0; i<EKF_N; ++i) {
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	3301      	adds	r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b01      	cmp	r3, #1
 8002504:	ddd4      	ble.n	80024b0 <ekf_initialize+0x10>
    }
}
 8002506:	bf00      	nop
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <ekf_predict>:
  */static void ekf_predict(
        ekf_t * ekf, 
        const _float_t fx[EKF_N],
        const _float_t F[EKF_N*EKF_N],
        const _float_t Q[EKF_N*EKF_N])
{        
 8002514:	b580      	push	{r7, lr}
 8002516:	b092      	sub	sp, #72	@ 0x48
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
    // \hat{x}_k = f(\hat{x}_{k-1}, u_k)
    memcpy(ekf->x, fx, EKF_N*sizeof(_float_t));
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2208      	movs	r2, #8
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	4618      	mov	r0, r3
 800252a:	f00b fd1a 	bl	800df62 <memcpy>

    // P_k = F_{k-1} P_{k-1} F^T_{k-1} + Q_{k-1}

    _float_t FP[EKF_N*EKF_N] = {};
 800252e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
    _mulmat(F, ekf->P,  FP, EKF_N, EKF_N, EKF_N);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f103 0108 	add.w	r1, r3, #8
 8002542:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002546:	2302      	movs	r3, #2
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	2302      	movs	r3, #2
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2302      	movs	r3, #2
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fb63 	bl	8001c1c <_mulmat>

    _float_t Ft[EKF_N*EKF_N] = {};
 8002556:	f107 0320 	add.w	r3, r7, #32
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
    _transpose(F, Ft, EKF_N, EKF_N);
 8002564:	f107 0120 	add.w	r1, r7, #32
 8002568:	2302      	movs	r3, #2
 800256a:	2202      	movs	r2, #2
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff fc07 	bl	8001d80 <_transpose>

    _float_t FPFt[EKF_N*EKF_N] = {};
 8002572:	f107 0310 	add.w	r3, r7, #16
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	60da      	str	r2, [r3, #12]
    _mulmat(FP, Ft, FPFt, EKF_N, EKF_N, EKF_N);
 8002580:	f107 0210 	add.w	r2, r7, #16
 8002584:	f107 0120 	add.w	r1, r7, #32
 8002588:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800258c:	2302      	movs	r3, #2
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	2302      	movs	r3, #2
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2302      	movs	r3, #2
 8002596:	f7ff fb41 	bl	8001c1c <_mulmat>

    _addmat(FPFt, Q, ekf->P, EKF_N, EKF_N);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f103 0208 	add.w	r2, r3, #8
 80025a0:	f107 0010 	add.w	r0, r7, #16
 80025a4:	2302      	movs	r3, #2
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2302      	movs	r3, #2
 80025aa:	6839      	ldr	r1, [r7, #0]
 80025ac:	f7ff fc1e 	bl	8001dec <_addmat>
}
 80025b0:	bf00      	nop
 80025b2:	3740      	adds	r7, #64	@ 0x40
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <ekf_update_step3>:

/// @private
static void ekf_update_step3(ekf_t * ekf, _float_t GH[EKF_N*EKF_N])
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
    _negate(GH, EKF_N, EKF_N);
 80025c2:	2202      	movs	r2, #2
 80025c4:	2102      	movs	r1, #2
 80025c6:	6838      	ldr	r0, [r7, #0]
 80025c8:	f7ff fc55 	bl	8001e76 <_negate>
    _addeye(GH, EKF_N);
 80025cc:	2102      	movs	r1, #2
 80025ce:	6838      	ldr	r0, [r7, #0]
 80025d0:	f7ff fc8a 	bl	8001ee8 <_addeye>
    _float_t GHP[EKF_N*EKF_N];
    _mulmat(GH, ekf->P, GHP, EKF_N, EKF_N, EKF_N);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f103 0108 	add.w	r1, r3, #8
 80025da:	f107 0208 	add.w	r2, r7, #8
 80025de:	2302      	movs	r3, #2
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	2302      	movs	r3, #2
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2302      	movs	r3, #2
 80025e8:	6838      	ldr	r0, [r7, #0]
 80025ea:	f7ff fb17 	bl	8001c1c <_mulmat>
    memcpy(ekf->P, GHP, EKF_N*EKF_N*sizeof(_float_t));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3308      	adds	r3, #8
 80025f2:	f107 0108 	add.w	r1, r7, #8
 80025f6:	2210      	movs	r2, #16
 80025f8:	4618      	mov	r0, r3
 80025fa:	f00b fcb2 	bl	800df62 <memcpy>
}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <ekf_update>:
        ekf_t * ekf, 
        const _float_t z[EKF_M], 
        const _float_t hx[EKF_N],
        const _float_t H[EKF_M*EKF_N],
        const _float_t R[EKF_M*EKF_M])
{        
 8002606:	b590      	push	{r4, r7, lr}
 8002608:	b0c7      	sub	sp, #284	@ 0x11c
 800260a:	af02      	add	r7, sp, #8
 800260c:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 8002610:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 8002614:	6020      	str	r0, [r4, #0]
 8002616:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800261a:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 800261e:	6001      	str	r1, [r0, #0]
 8002620:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002624:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8002628:	600a      	str	r2, [r1, #0]
 800262a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800262e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002632:	6013      	str	r3, [r2, #0]
    // G_k = P_k H^T_k (H_k P_k H^T_k + R)^{-1}
    _float_t G[EKF_N*EKF_M];
    _float_t Ht[EKF_N*EKF_M];
    _transpose(H, Ht, EKF_M, EKF_N);
 8002634:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8002638:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800263c:	f5a3 7088 	sub.w	r0, r3, #272	@ 0x110
 8002640:	2302      	movs	r3, #2
 8002642:	2203      	movs	r2, #3
 8002644:	6800      	ldr	r0, [r0, #0]
 8002646:	f7ff fb9b 	bl	8001d80 <_transpose>
    _float_t PHt[EKF_N*EKF_M];
    _mulmat(ekf->P, Ht, PHt, EKF_N, EKF_N, EKF_M);
 800264a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800264e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f103 0008 	add.w	r0, r3, #8
 8002658:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 800265c:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8002660:	2303      	movs	r3, #3
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	2302      	movs	r3, #2
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2302      	movs	r3, #2
 800266a:	f7ff fad7 	bl	8001c1c <_mulmat>
    _float_t HP[EKF_M*EKF_N];
    _mulmat(H, ekf->P, HP, EKF_M, EKF_N, EKF_N);
 800266e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f103 0108 	add.w	r1, r3, #8
 800267c:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8002680:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002684:	f5a3 7088 	sub.w	r0, r3, #272	@ 0x110
 8002688:	2302      	movs	r3, #2
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	2302      	movs	r3, #2
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2303      	movs	r3, #3
 8002692:	6800      	ldr	r0, [r0, #0]
 8002694:	f7ff fac2 	bl	8001c1c <_mulmat>
    _float_t HpHt[EKF_M*EKF_M];
    _mulmat(HP, Ht, HpHt, EKF_M, EKF_N, EKF_M);
 8002698:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 800269c:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 80026a0:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 80026a4:	2303      	movs	r3, #3
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	2302      	movs	r3, #2
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2303      	movs	r3, #3
 80026ae:	f7ff fab5 	bl	8001c1c <_mulmat>
    _float_t HpHtR[EKF_M*EKF_M];
    _addmat(HpHt, R, HpHtR, EKF_M, EKF_M);
 80026b2:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80026b6:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 80026ba:	2303      	movs	r3, #3
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2303      	movs	r3, #3
 80026c0:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 80026c4:	f7ff fb92 	bl	8001dec <_addmat>
    _float_t HPHtRinv[EKF_M*EKF_M];
    if (!invert(HpHtR, HPHtRinv)) {
 80026c8:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80026cc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fece 	bl	8002474 <invert>
 80026d8:	4603      	mov	r3, r0
 80026da:	f083 0301 	eor.w	r3, r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <ekf_update+0xe2>
        return false;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e050      	b.n	800278a <ekf_update+0x184>
    }
    _mulmat(PHt, HPHtRinv, G, EKF_N, EKF_M, EKF_M);
 80026e8:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 80026ec:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80026f0:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 80026f4:	2303      	movs	r3, #3
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	2303      	movs	r3, #3
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2302      	movs	r3, #2
 80026fe:	f7ff fa8d 	bl	8001c1c <_mulmat>

    // \hat{x}_k = \hat{x_k} + G_k(z_k - h(\hat{x}_k))
    _float_t z_hx[EKF_M];
    _sub(z, hx, z_hx, EKF_M);
 8002702:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002706:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800270a:	f5a3 7186 	sub.w	r1, r3, #268	@ 0x10c
 800270e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002712:	f5a3 7084 	sub.w	r0, r3, #264	@ 0x108
 8002716:	2303      	movs	r3, #3
 8002718:	6809      	ldr	r1, [r1, #0]
 800271a:	6800      	ldr	r0, [r0, #0]
 800271c:	f7ff fe7e 	bl	800241c <_sub>
    _float_t Gz_hx[EKF_M*EKF_N];
    _mulvec(G, z_hx, Gz_hx, EKF_N, EKF_M);
 8002720:	f107 0220 	add.w	r2, r7, #32
 8002724:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002728:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 800272c:	2303      	movs	r3, #3
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	2302      	movs	r3, #2
 8002732:	f7ff fadb 	bl	8001cec <_mulvec>
    _addvec(ekf->x, Gz_hx, ekf->x, EKF_N);
 8002736:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800273a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	f107 0120 	add.w	r1, r7, #32
 800274e:	2302      	movs	r3, #2
 8002750:	f7ff fe38 	bl	80023c4 <_addvec>

    // P_k = (I - G_k H_k) P_k
    _float_t GH[EKF_N*EKF_N];
    _mulmat(G, H, GH, EKF_N, EKF_M, EKF_N);
 8002754:	f107 0210 	add.w	r2, r7, #16
 8002758:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800275c:	f5a3 7188 	sub.w	r1, r3, #272	@ 0x110
 8002760:	f107 00f8 	add.w	r0, r7, #248	@ 0xf8
 8002764:	2302      	movs	r3, #2
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	2303      	movs	r3, #3
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2302      	movs	r3, #2
 800276e:	6809      	ldr	r1, [r1, #0]
 8002770:	f7ff fa54 	bl	8001c1c <_mulmat>
    ekf_update_step3(ekf, GH);
 8002774:	f107 0210 	add.w	r2, r7, #16
 8002778:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800277c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002780:	4611      	mov	r1, r2
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	f7ff ff18 	bl	80025b8 <ekf_update_step3>

    // success
    return true;
 8002788:	2301      	movs	r3, #1
}
 800278a:	4618      	mov	r0, r3
 800278c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}

08002794 <sensor_model>:
 * @param ekf Pointer to the current EKF state.
 * @param hx  Output predicted measurement vector (length EKF_M).
 * @param H   Output Jacobian matrix (EKF_M x EKF_N).
 */
static void sensor_model(const ekf_t * ekf, _float_t hx[EKF_M], _float_t H[EKF_M * EKF_N])
{
 8002794:	b5b0      	push	{r4, r5, r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
    // Extract current state estimates (in radians)
    _float_t phi   = ekf->x[0];  // roll
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61fb      	str	r3, [r7, #28]
    _float_t theta = ekf->x[1];  // pitch
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
    const _float_t g = 9.81f;
 80027ac:	4bc6      	ldr	r3, [pc, #792]	@ (8002ac8 <sensor_model+0x334>)
 80027ae:	617b      	str	r3, [r7, #20]

    // Predicted measurements:
    hx[0] = -g * sin(theta);            // ax
 80027b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80027b4:	eef1 7a67 	vneg.f32	s15, s15
 80027b8:	ee17 3a90 	vmov	r3, s15
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fec3 	bl	8000548 <__aeabi_f2d>
 80027c2:	4604      	mov	r4, r0
 80027c4:	460d      	mov	r5, r1
 80027c6:	69b8      	ldr	r0, [r7, #24]
 80027c8:	f7fd febe 	bl	8000548 <__aeabi_f2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	ec43 2b10 	vmov	d0, r2, r3
 80027d4:	f00e ffa0 	bl	8011718 <sin>
 80027d8:	ec53 2b10 	vmov	r2, r3, d0
 80027dc:	4620      	mov	r0, r4
 80027de:	4629      	mov	r1, r5
 80027e0:	f7fd ff0a 	bl	80005f8 <__aeabi_dmul>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f7fe f9fc 	bl	8000be8 <__aeabi_d2f>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	601a      	str	r2, [r3, #0]
    hx[1] =  g * sin(phi) * cos(theta);   // ay
 80027f6:	6978      	ldr	r0, [r7, #20]
 80027f8:	f7fd fea6 	bl	8000548 <__aeabi_f2d>
 80027fc:	4604      	mov	r4, r0
 80027fe:	460d      	mov	r5, r1
 8002800:	69f8      	ldr	r0, [r7, #28]
 8002802:	f7fd fea1 	bl	8000548 <__aeabi_f2d>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	ec43 2b10 	vmov	d0, r2, r3
 800280e:	f00e ff83 	bl	8011718 <sin>
 8002812:	ec53 2b10 	vmov	r2, r3, d0
 8002816:	4620      	mov	r0, r4
 8002818:	4629      	mov	r1, r5
 800281a:	f7fd feed 	bl	80005f8 <__aeabi_dmul>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4614      	mov	r4, r2
 8002824:	461d      	mov	r5, r3
 8002826:	69b8      	ldr	r0, [r7, #24]
 8002828:	f7fd fe8e 	bl	8000548 <__aeabi_f2d>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	ec43 2b10 	vmov	d0, r2, r3
 8002834:	f00e ff1c 	bl	8011670 <cos>
 8002838:	ec53 2b10 	vmov	r2, r3, d0
 800283c:	4620      	mov	r0, r4
 800283e:	4629      	mov	r1, r5
 8002840:	f7fd feda 	bl	80005f8 <__aeabi_dmul>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	1d1c      	adds	r4, r3, #4
 8002850:	f7fe f9ca 	bl	8000be8 <__aeabi_d2f>
 8002854:	4603      	mov	r3, r0
 8002856:	6023      	str	r3, [r4, #0]
    hx[2] =  g * cos(phi) * cos(theta);   // az
 8002858:	6978      	ldr	r0, [r7, #20]
 800285a:	f7fd fe75 	bl	8000548 <__aeabi_f2d>
 800285e:	4604      	mov	r4, r0
 8002860:	460d      	mov	r5, r1
 8002862:	69f8      	ldr	r0, [r7, #28]
 8002864:	f7fd fe70 	bl	8000548 <__aeabi_f2d>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	ec43 2b10 	vmov	d0, r2, r3
 8002870:	f00e fefe 	bl	8011670 <cos>
 8002874:	ec53 2b10 	vmov	r2, r3, d0
 8002878:	4620      	mov	r0, r4
 800287a:	4629      	mov	r1, r5
 800287c:	f7fd febc 	bl	80005f8 <__aeabi_dmul>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4614      	mov	r4, r2
 8002886:	461d      	mov	r5, r3
 8002888:	69b8      	ldr	r0, [r7, #24]
 800288a:	f7fd fe5d 	bl	8000548 <__aeabi_f2d>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	ec43 2b10 	vmov	d0, r2, r3
 8002896:	f00e feeb 	bl	8011670 <cos>
 800289a:	ec53 2b10 	vmov	r2, r3, d0
 800289e:	4620      	mov	r0, r4
 80028a0:	4629      	mov	r1, r5
 80028a2:	f7fd fea9 	bl	80005f8 <__aeabi_dmul>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f103 0408 	add.w	r4, r3, #8
 80028b4:	f7fe f998 	bl	8000be8 <__aeabi_d2f>
 80028b8:	4603      	mov	r3, r0
 80028ba:	6023      	str	r3, [r4, #0]

    // Compute the Jacobian H = d[hx]/d[x]
    // For ax = -g*sin(theta)
    H[0 * EKF_N + 0] = 0.0f;              // ∂ax/∂phi
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
    H[0 * EKF_N + 1] = -g * cos(theta);    // ∂ax/∂theta
 80028c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80028c8:	eef1 7a67 	vneg.f32	s15, s15
 80028cc:	ee17 3a90 	vmov	r3, s15
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe39 	bl	8000548 <__aeabi_f2d>
 80028d6:	4604      	mov	r4, r0
 80028d8:	460d      	mov	r5, r1
 80028da:	69b8      	ldr	r0, [r7, #24]
 80028dc:	f7fd fe34 	bl	8000548 <__aeabi_f2d>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	ec43 2b10 	vmov	d0, r2, r3
 80028e8:	f00e fec2 	bl	8011670 <cos>
 80028ec:	ec53 2b10 	vmov	r2, r3, d0
 80028f0:	4620      	mov	r0, r4
 80028f2:	4629      	mov	r1, r5
 80028f4:	f7fd fe80 	bl	80005f8 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1d1c      	adds	r4, r3, #4
 8002904:	f7fe f970 	bl	8000be8 <__aeabi_d2f>
 8002908:	4603      	mov	r3, r0
 800290a:	6023      	str	r3, [r4, #0]

    // For ay = g*sin(phi)*cos(theta)
    H[1 * EKF_N + 0] = g * cos(phi) * cos(theta);   // ∂ay/∂phi
 800290c:	6978      	ldr	r0, [r7, #20]
 800290e:	f7fd fe1b 	bl	8000548 <__aeabi_f2d>
 8002912:	4604      	mov	r4, r0
 8002914:	460d      	mov	r5, r1
 8002916:	69f8      	ldr	r0, [r7, #28]
 8002918:	f7fd fe16 	bl	8000548 <__aeabi_f2d>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	ec43 2b10 	vmov	d0, r2, r3
 8002924:	f00e fea4 	bl	8011670 <cos>
 8002928:	ec53 2b10 	vmov	r2, r3, d0
 800292c:	4620      	mov	r0, r4
 800292e:	4629      	mov	r1, r5
 8002930:	f7fd fe62 	bl	80005f8 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4614      	mov	r4, r2
 800293a:	461d      	mov	r5, r3
 800293c:	69b8      	ldr	r0, [r7, #24]
 800293e:	f7fd fe03 	bl	8000548 <__aeabi_f2d>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	ec43 2b10 	vmov	d0, r2, r3
 800294a:	f00e fe91 	bl	8011670 <cos>
 800294e:	ec53 2b10 	vmov	r2, r3, d0
 8002952:	4620      	mov	r0, r4
 8002954:	4629      	mov	r1, r5
 8002956:	f7fd fe4f 	bl	80005f8 <__aeabi_dmul>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f103 0408 	add.w	r4, r3, #8
 8002968:	f7fe f93e 	bl	8000be8 <__aeabi_d2f>
 800296c:	4603      	mov	r3, r0
 800296e:	6023      	str	r3, [r4, #0]
    H[1 * EKF_N + 1] = -g * sin(phi) * sin(theta);    // ∂ay/∂theta
 8002970:	edd7 7a05 	vldr	s15, [r7, #20]
 8002974:	eef1 7a67 	vneg.f32	s15, s15
 8002978:	ee17 3a90 	vmov	r3, s15
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fde3 	bl	8000548 <__aeabi_f2d>
 8002982:	4604      	mov	r4, r0
 8002984:	460d      	mov	r5, r1
 8002986:	69f8      	ldr	r0, [r7, #28]
 8002988:	f7fd fdde 	bl	8000548 <__aeabi_f2d>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	ec43 2b10 	vmov	d0, r2, r3
 8002994:	f00e fec0 	bl	8011718 <sin>
 8002998:	ec53 2b10 	vmov	r2, r3, d0
 800299c:	4620      	mov	r0, r4
 800299e:	4629      	mov	r1, r5
 80029a0:	f7fd fe2a 	bl	80005f8 <__aeabi_dmul>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4614      	mov	r4, r2
 80029aa:	461d      	mov	r5, r3
 80029ac:	69b8      	ldr	r0, [r7, #24]
 80029ae:	f7fd fdcb 	bl	8000548 <__aeabi_f2d>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	ec43 2b10 	vmov	d0, r2, r3
 80029ba:	f00e fead 	bl	8011718 <sin>
 80029be:	ec53 2b10 	vmov	r2, r3, d0
 80029c2:	4620      	mov	r0, r4
 80029c4:	4629      	mov	r1, r5
 80029c6:	f7fd fe17 	bl	80005f8 <__aeabi_dmul>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4610      	mov	r0, r2
 80029d0:	4619      	mov	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f103 040c 	add.w	r4, r3, #12
 80029d8:	f7fe f906 	bl	8000be8 <__aeabi_d2f>
 80029dc:	4603      	mov	r3, r0
 80029de:	6023      	str	r3, [r4, #0]

    // For az = g*cos(phi)*cos(theta)
    H[2 * EKF_N + 0] = -g * sin(phi) * cos(theta);    // ∂az/∂phi
 80029e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80029e4:	eef1 7a67 	vneg.f32	s15, s15
 80029e8:	ee17 3a90 	vmov	r3, s15
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fdab 	bl	8000548 <__aeabi_f2d>
 80029f2:	4604      	mov	r4, r0
 80029f4:	460d      	mov	r5, r1
 80029f6:	69f8      	ldr	r0, [r7, #28]
 80029f8:	f7fd fda6 	bl	8000548 <__aeabi_f2d>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	ec43 2b10 	vmov	d0, r2, r3
 8002a04:	f00e fe88 	bl	8011718 <sin>
 8002a08:	ec53 2b10 	vmov	r2, r3, d0
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	4629      	mov	r1, r5
 8002a10:	f7fd fdf2 	bl	80005f8 <__aeabi_dmul>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4614      	mov	r4, r2
 8002a1a:	461d      	mov	r5, r3
 8002a1c:	69b8      	ldr	r0, [r7, #24]
 8002a1e:	f7fd fd93 	bl	8000548 <__aeabi_f2d>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	ec43 2b10 	vmov	d0, r2, r3
 8002a2a:	f00e fe21 	bl	8011670 <cos>
 8002a2e:	ec53 2b10 	vmov	r2, r3, d0
 8002a32:	4620      	mov	r0, r4
 8002a34:	4629      	mov	r1, r5
 8002a36:	f7fd fddf 	bl	80005f8 <__aeabi_dmul>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f103 0410 	add.w	r4, r3, #16
 8002a48:	f7fe f8ce 	bl	8000be8 <__aeabi_d2f>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	6023      	str	r3, [r4, #0]
    H[2 * EKF_N + 1] = -g * cos(phi) * sin(theta);    // ∂az/∂theta
 8002a50:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a54:	eef1 7a67 	vneg.f32	s15, s15
 8002a58:	ee17 3a90 	vmov	r3, s15
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fd fd73 	bl	8000548 <__aeabi_f2d>
 8002a62:	4604      	mov	r4, r0
 8002a64:	460d      	mov	r5, r1
 8002a66:	69f8      	ldr	r0, [r7, #28]
 8002a68:	f7fd fd6e 	bl	8000548 <__aeabi_f2d>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	ec43 2b10 	vmov	d0, r2, r3
 8002a74:	f00e fdfc 	bl	8011670 <cos>
 8002a78:	ec53 2b10 	vmov	r2, r3, d0
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fdba 	bl	80005f8 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4614      	mov	r4, r2
 8002a8a:	461d      	mov	r5, r3
 8002a8c:	69b8      	ldr	r0, [r7, #24]
 8002a8e:	f7fd fd5b 	bl	8000548 <__aeabi_f2d>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	ec43 2b10 	vmov	d0, r2, r3
 8002a9a:	f00e fe3d 	bl	8011718 <sin>
 8002a9e:	ec53 2b10 	vmov	r2, r3, d0
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	f7fd fda7 	bl	80005f8 <__aeabi_dmul>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f103 0414 	add.w	r4, r3, #20
 8002ab8:	f7fe f896 	bl	8000be8 <__aeabi_d2f>
 8002abc:	4603      	mov	r3, r0
 8002abe:	6023      	str	r3, [r4, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac8:	411cf5c3 	.word	0x411cf5c3

08002acc <imu_fusion_init>:

// Initialize EKF fusion
void imu_fusion_init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
    ekf_initialize(&ekf, Pdiag);
 8002ad0:	4902      	ldr	r1, [pc, #8]	@ (8002adc <imu_fusion_init+0x10>)
 8002ad2:	4803      	ldr	r0, [pc, #12]	@ (8002ae0 <imu_fusion_init+0x14>)
 8002ad4:	f7ff fce4 	bl	80024a0 <ekf_initialize>
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	200003f4 	.word	0x200003f4
 8002ae4:	00000000 	.word	0x00000000

08002ae8 <imu_fusion_update>:

// Update EKF fusion state
void imu_fusion_update(float Gx, float Gy, float Gz, float Ax, float Ay, float Az, float dt,
                       float *roll_deg, float *pitch_deg)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b0a1      	sub	sp, #132	@ 0x84
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8002af2:	edc7 0a08 	vstr	s1, [r7, #32]
 8002af6:	ed87 1a07 	vstr	s2, [r7, #28]
 8002afa:	edc7 1a06 	vstr	s3, [r7, #24]
 8002afe:	ed87 2a05 	vstr	s4, [r7, #20]
 8002b02:	edc7 2a04 	vstr	s5, [r7, #16]
 8002b06:	ed87 3a03 	vstr	s6, [r7, #12]
 8002b0a:	60b8      	str	r0, [r7, #8]
 8002b0c:	6079      	str	r1, [r7, #4]
    // Gyro data converted to rad/s
    float p_rps = Gx * DEG_TO_RAD;
 8002b0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b10:	f7fd fd1a 	bl	8000548 <__aeabi_f2d>
 8002b14:	a34a      	add	r3, pc, #296	@ (adr r3, 8002c40 <imu_fusion_update+0x158>)
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1a:	f7fd fd6d 	bl	80005f8 <__aeabi_dmul>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	f7fe f85f 	bl	8000be8 <__aeabi_d2f>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	677b      	str	r3, [r7, #116]	@ 0x74
    float q_rps = Gy * DEG_TO_RAD;
 8002b2e:	6a38      	ldr	r0, [r7, #32]
 8002b30:	f7fd fd0a 	bl	8000548 <__aeabi_f2d>
 8002b34:	a342      	add	r3, pc, #264	@ (adr r3, 8002c40 <imu_fusion_update+0x158>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	f7fd fd5d 	bl	80005f8 <__aeabi_dmul>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	f7fe f84f 	bl	8000be8 <__aeabi_d2f>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	673b      	str	r3, [r7, #112]	@ 0x70

    // Prediction step
    _float_t fx[EKF_N] = {
        ekf.x[0] + p_rps * dt,
 8002b4e:	4b38      	ldr	r3, [pc, #224]	@ (8002c30 <imu_fusion_update+0x148>)
 8002b50:	ed93 7a00 	vldr	s14, [r3]
 8002b54:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8002b58:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b60:	ee77 7a27 	vadd.f32	s15, s14, s15
    _float_t fx[EKF_N] = {
 8002b64:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
        ekf.x[1] + q_rps * dt
 8002b68:	4b31      	ldr	r3, [pc, #196]	@ (8002c30 <imu_fusion_update+0x148>)
 8002b6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b6e:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8002b72:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
    _float_t fx[EKF_N] = {
 8002b7e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    };

    _float_t F[EKF_N * EKF_N] = {
 8002b82:	4b2c      	ldr	r3, [pc, #176]	@ (8002c34 <imu_fusion_update+0x14c>)
 8002b84:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        1.0f, 0.0f,
        0.0f, 1.0f
    };

    ekf_predict(&ekf, fx, F, Q);
 8002b8e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002b92:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8002b96:	4b28      	ldr	r3, [pc, #160]	@ (8002c38 <imu_fusion_update+0x150>)
 8002b98:	4825      	ldr	r0, [pc, #148]	@ (8002c30 <imu_fusion_update+0x148>)
 8002b9a:	f7ff fcbb 	bl	8002514 <ekf_predict>

    // Measurement update
    _float_t z[EKF_M] = { Ax, Ay, Az };
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	657b      	str	r3, [r7, #84]	@ 0x54
    _float_t hx[EKF_M];
    _float_t H[EKF_M * EKF_N];
    sensor_model(&ekf, hx, H);
 8002baa:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002bae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	481e      	ldr	r0, [pc, #120]	@ (8002c30 <imu_fusion_update+0x148>)
 8002bb6:	f7ff fded 	bl	8002794 <sensor_model>

    ekf_update(&ekf, z, hx, H, R);
 8002bba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bbe:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002bc2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8002bc6:	481d      	ldr	r0, [pc, #116]	@ (8002c3c <imu_fusion_update+0x154>)
 8002bc8:	9000      	str	r0, [sp, #0]
 8002bca:	4819      	ldr	r0, [pc, #100]	@ (8002c30 <imu_fusion_update+0x148>)
 8002bcc:	f7ff fd1b 	bl	8002606 <ekf_update>

    // Export roll and pitch in degrees
    *roll_deg = ekf.x[0] * RAD_TO_DEG;
 8002bd0:	4b17      	ldr	r3, [pc, #92]	@ (8002c30 <imu_fusion_update+0x148>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fd fcb7 	bl	8000548 <__aeabi_f2d>
 8002bda:	a313      	add	r3, pc, #76	@ (adr r3, 8002c28 <imu_fusion_update+0x140>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd fd0a 	bl	80005f8 <__aeabi_dmul>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f7fd fffc 	bl	8000be8 <__aeabi_d2f>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	601a      	str	r2, [r3, #0]
    *pitch_deg = ekf.x[1] * RAD_TO_DEG;
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c30 <imu_fusion_update+0x148>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fca4 	bl	8000548 <__aeabi_f2d>
 8002c00:	a309      	add	r3, pc, #36	@ (adr r3, 8002c28 <imu_fusion_update+0x140>)
 8002c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c06:	f7fd fcf7 	bl	80005f8 <__aeabi_dmul>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	f7fd ffe9 	bl	8000be8 <__aeabi_d2f>
 8002c16:	4602      	mov	r2, r0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	601a      	str	r2, [r3, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	377c      	adds	r7, #124	@ 0x7c
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}
 8002c24:	f3af 8000 	nop.w
 8002c28:	1a63c1f8 	.word	0x1a63c1f8
 8002c2c:	404ca5dc 	.word	0x404ca5dc
 8002c30:	200003f4 	.word	0x200003f4
 8002c34:	080129f0 	.word	0x080129f0
 8002c38:	20000008 	.word	0x20000008
 8002c3c:	20000018 	.word	0x20000018
 8002c40:	a2529d39 	.word	0xa2529d39
 8002c44:	3f91df46 	.word	0x3f91df46

08002c48 <debug_motor_test_sequence>:
    }
#endif
}

void debug_motor_test_sequence(void)
{
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	b094      	sub	sp, #80	@ 0x50
 8002c4c:	af02      	add	r7, sp, #8
#if DEBUG_FLIGHT_MANAGER
    const uint16_t spin_pwm = 1200;
 8002c4e:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8002c52:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    const uint16_t off_pwm = 1000;
 8002c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c5a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    const uint32_t spin_time_ms = 2000;
 8002c5e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const uint32_t wait_time_ms = 1000;
 8002c64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c68:	63bb      	str	r3, [r7, #56]	@ 0x38

    struct {
        const char* name;
        const char* pin;
        uint8_t motor;
    } motors[4] = {
 8002c6a:	4b52      	ldr	r3, [pc, #328]	@ (8002db4 <debug_motor_test_sequence+0x16c>)
 8002c6c:	463c      	mov	r4, r7
 8002c6e:	461d      	mov	r5, r3
 8002c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        { "Motor 2", "PA7 (TIM3_CH2)", 2 },
        { "Motor 3", "PB0 (TIM3_CH3)", 3 },
        { "Motor 4", "PB1 (TIM3_CH4)", 4 },
    };

    for (int i = 0; i < 4; i++) {
 8002c80:	2300      	movs	r3, #0
 8002c82:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c84:	e08d      	b.n	8002da2 <debug_motor_test_sequence+0x15a>
        snprintf(usb_tx_buffer, sizeof(usb_tx_buffer),
 8002c86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	3348      	adds	r3, #72	@ 0x48
 8002c92:	443b      	add	r3, r7
 8002c94:	3b48      	subs	r3, #72	@ 0x48
 8002c96:	6819      	ldr	r1, [r3, #0]
 8002c98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	3348      	adds	r3, #72	@ 0x48
 8002ca4:	443b      	add	r3, r7
 8002ca6:	3b44      	subs	r3, #68	@ 0x44
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002cae:	9201      	str	r2, [sp, #4]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4a40      	ldr	r2, [pc, #256]	@ (8002db8 <debug_motor_test_sequence+0x170>)
 8002cb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002cba:	4840      	ldr	r0, [pc, #256]	@ (8002dbc <debug_motor_test_sequence+0x174>)
 8002cbc:	f00b f83a 	bl	800dd34 <sniprintf>
                 "[Motor Test] Spinning %s | Pin: %s | PWM: %u\r\n",
                 motors[i].name, motors[i].pin, spin_pwm);
        CDC_Transmit_FS((uint8_t*)usb_tx_buffer, strlen(usb_tx_buffer));
 8002cc0:	483e      	ldr	r0, [pc, #248]	@ (8002dbc <debug_motor_test_sequence+0x174>)
 8002cc2:	f7fd fad5 	bl	8000270 <strlen>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4619      	mov	r1, r3
 8002ccc:	483b      	ldr	r0, [pc, #236]	@ (8002dbc <debug_motor_test_sequence+0x174>)
 8002cce:	f009 fca7 	bl	800c620 <CDC_Transmit_FS>

        switch (motors[i].motor) {
 8002cd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	3348      	adds	r3, #72	@ 0x48
 8002cde:	443b      	add	r3, r7
 8002ce0:	3b40      	subs	r3, #64	@ 0x40
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d836      	bhi.n	8002d58 <debug_motor_test_sequence+0x110>
 8002cea:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf0 <debug_motor_test_sequence+0xa8>)
 8002cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf0:	08002d01 	.word	0x08002d01
 8002cf4:	08002d17 	.word	0x08002d17
 8002cf8:	08002d2d 	.word	0x08002d2d
 8002cfc:	08002d43 	.word	0x08002d43
            case 1: motor_control_write(spin_pwm, off_pwm, off_pwm, off_pwm); break;
 8002d00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d04:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002d08:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8002d0c:	f8b7 0042 	ldrh.w	r0, [r7, #66]	@ 0x42
 8002d10:	f7fe ff5e 	bl	8001bd0 <motor_control_write>
 8002d14:	e020      	b.n	8002d58 <debug_motor_test_sequence+0x110>
            case 2: motor_control_write(off_pwm, spin_pwm, off_pwm, off_pwm); break;
 8002d16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d1a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002d1e:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 8002d22:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8002d26:	f7fe ff53 	bl	8001bd0 <motor_control_write>
 8002d2a:	e015      	b.n	8002d58 <debug_motor_test_sequence+0x110>
            case 3: motor_control_write(off_pwm, off_pwm, spin_pwm, off_pwm); break;
 8002d2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8002d34:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8002d38:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8002d3c:	f7fe ff48 	bl	8001bd0 <motor_control_write>
 8002d40:	e00a      	b.n	8002d58 <debug_motor_test_sequence+0x110>
            case 4: motor_control_write(off_pwm, off_pwm, off_pwm, spin_pwm); break;
 8002d42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002d46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002d4a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8002d4e:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8002d52:	f7fe ff3d 	bl	8001bd0 <motor_control_write>
 8002d56:	bf00      	nop
        }

        uint32_t start = HAL_GetTick();
 8002d58:	f000 fda4 	bl	80038a4 <HAL_GetTick>
 8002d5c:	6378      	str	r0, [r7, #52]	@ 0x34
        while (HAL_GetTick() - start < spin_time_ms);
 8002d5e:	bf00      	nop
 8002d60:	f000 fda0 	bl	80038a4 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d8f7      	bhi.n	8002d60 <debug_motor_test_sequence+0x118>

        motor_control_write(off_pwm, off_pwm, off_pwm, off_pwm);
 8002d70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d74:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002d78:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8002d7c:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8002d80:	f7fe ff26 	bl	8001bd0 <motor_control_write>

        uint32_t wait = HAL_GetTick();
 8002d84:	f000 fd8e 	bl	80038a4 <HAL_GetTick>
 8002d88:	6338      	str	r0, [r7, #48]	@ 0x30
        while (HAL_GetTick() - wait < wait_time_ms);
 8002d8a:	bf00      	nop
 8002d8c:	f000 fd8a 	bl	80038a4 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d8f7      	bhi.n	8002d8c <debug_motor_test_sequence+0x144>
    for (int i = 0; i < 4; i++) {
 8002d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d9e:	3301      	adds	r3, #1
 8002da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002da2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	f77f af6e 	ble.w	8002c86 <debug_motor_test_sequence+0x3e>
    }
#endif
}
 8002daa:	bf00      	nop
 8002dac:	bf00      	nop
 8002dae:	3748      	adds	r7, #72	@ 0x48
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bdb0      	pop	{r4, r5, r7, pc}
 8002db4:	08012b38 	.word	0x08012b38
 8002db8:	08012aa8 	.word	0x08012aa8
 8002dbc:	2000040c 	.word	0x2000040c

08002dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dc6:	f000 fd07 	bl	80037d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dca:	f000 f82f 	bl	8002e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dce:	f000 f9b3 	bl	8003138 <MX_GPIO_Init>
  MX_DMA_Init();
 8002dd2:	f000 f97b 	bl	80030cc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8002dd6:	f009 fb65 	bl	800c4a4 <MX_USB_DEVICE_Init>
  HAL_Delay(1000);
 8002dda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002dde:	f000 fd6d 	bl	80038bc <HAL_Delay>
  MX_USART1_UART_Init();
 8002de2:	f000 f949 	bl	8003078 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002de6:	f000 f88b 	bl	8002f00 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002dea:	f000 f8b7 	bl	8002f5c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  ibus_init();
 8002dee:	f7fe f973 	bl	80010d8 <ibus_init>
  mpu6050Config();
 8002df2:	f7fe fbc1 	bl	8001578 <mpu6050Config>
  mpu6050Read_DMA();
 8002df6:	f7fe fbd9 	bl	80015ac <mpu6050Read_DMA>
  imu_fusion_init();
 8002dfa:	f7ff fe67 	bl	8002acc <imu_fusion_init>

  flight_manager_init();
 8002dfe:	f7fe fcc1 	bl	8001784 <flight_manager_init>
  uint32_t last_loop_time = HAL_GetTick();
 8002e02:	f000 fd4f 	bl	80038a4 <HAL_GetTick>
 8002e06:	6078      	str	r0, [r7, #4]


  while (1)
  {

	  uint32_t now = HAL_GetTick();
 8002e08:	f000 fd4c 	bl	80038a4 <HAL_GetTick>
 8002e0c:	6038      	str	r0, [r7, #0]
	  if ((now - last_loop_time) >= CONTROL_LOOP_INTERVAL_MS)
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d9f7      	bls.n	8002e08 <main+0x48>
	  {
		  flysky_process(ibus_data);
 8002e18:	4803      	ldr	r0, [pc, #12]	@ (8002e28 <main+0x68>)
 8002e1a:	f7fe f90f 	bl	800103c <flysky_process>
		  flight_manager_update();
 8002e1e:	f7fe fcf5 	bl	800180c <flight_manager_update>
		  last_loop_time = now;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	607b      	str	r3, [r7, #4]
  {
 8002e26:	e7ef      	b.n	8002e08 <main+0x48>
 8002e28:	200006b0 	.word	0x200006b0

08002e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b094      	sub	sp, #80	@ 0x50
 8002e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e32:	f107 0320 	add.w	r3, r7, #32
 8002e36:	2230      	movs	r2, #48	@ 0x30
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f00b f811 	bl	800de62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e40:	f107 030c 	add.w	r3, r7, #12
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	4b28      	ldr	r3, [pc, #160]	@ (8002ef8 <SystemClock_Config+0xcc>)
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	4a27      	ldr	r2, [pc, #156]	@ (8002ef8 <SystemClock_Config+0xcc>)
 8002e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e60:	4b25      	ldr	r3, [pc, #148]	@ (8002ef8 <SystemClock_Config+0xcc>)
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	4b22      	ldr	r3, [pc, #136]	@ (8002efc <SystemClock_Config+0xd0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a21      	ldr	r2, [pc, #132]	@ (8002efc <SystemClock_Config+0xd0>)
 8002e76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002efc <SystemClock_Config+0xd0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e92:	2302      	movs	r3, #2
 8002e94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e96:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002ea0:	23a8      	movs	r3, #168	@ 0xa8
 8002ea2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002ea8:	2307      	movs	r3, #7
 8002eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eac:	f107 0320 	add.w	r3, r7, #32
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f004 f8d7 	bl	8007064 <HAL_RCC_OscConfig>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ebc:	f000 f99c 	bl	80031f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ec0:	230f      	movs	r3, #15
 8002ec2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ecc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ed0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002ed2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ed6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ed8:	f107 030c 	add.w	r3, r7, #12
 8002edc:	2105      	movs	r1, #5
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f004 fb38 	bl	8007554 <HAL_RCC_ClockConfig>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002eea:	f000 f985 	bl	80031f8 <Error_Handler>
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3750      	adds	r7, #80	@ 0x50
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40007000 	.word	0x40007000

08002f00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f04:	4b12      	ldr	r3, [pc, #72]	@ (8002f50 <MX_I2C1_Init+0x50>)
 8002f06:	4a13      	ldr	r2, [pc, #76]	@ (8002f54 <MX_I2C1_Init+0x54>)
 8002f08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f0a:	4b11      	ldr	r3, [pc, #68]	@ (8002f50 <MX_I2C1_Init+0x50>)
 8002f0c:	4a12      	ldr	r2, [pc, #72]	@ (8002f58 <MX_I2C1_Init+0x58>)
 8002f0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f10:	4b0f      	ldr	r3, [pc, #60]	@ (8002f50 <MX_I2C1_Init+0x50>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	@ (8002f50 <MX_I2C1_Init+0x50>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <MX_I2C1_Init+0x50>)
 8002f1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f24:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <MX_I2C1_Init+0x50>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <MX_I2C1_Init+0x50>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f30:	4b07      	ldr	r3, [pc, #28]	@ (8002f50 <MX_I2C1_Init+0x50>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <MX_I2C1_Init+0x50>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f3c:	4804      	ldr	r0, [pc, #16]	@ (8002f50 <MX_I2C1_Init+0x50>)
 8002f3e:	f001 fb47 	bl	80045d0 <HAL_I2C_Init>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f48:	f000 f956 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f4c:	bf00      	nop
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	2000050c 	.word	0x2000050c
 8002f54:	40005400 	.word	0x40005400
 8002f58:	000186a0 	.word	0x000186a0

08002f5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	@ 0x28
 8002f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f62:	f107 0320 	add.w	r3, r7, #32
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	611a      	str	r2, [r3, #16]
 8002f7a:	615a      	str	r2, [r3, #20]
 8002f7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f7e:	4b3c      	ldr	r3, [pc, #240]	@ (8003070 <MX_TIM3_Init+0x114>)
 8002f80:	4a3c      	ldr	r2, [pc, #240]	@ (8003074 <MX_TIM3_Init+0x118>)
 8002f82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002f84:	4b3a      	ldr	r3, [pc, #232]	@ (8003070 <MX_TIM3_Init+0x114>)
 8002f86:	2253      	movs	r2, #83	@ 0x53
 8002f88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8a:	4b39      	ldr	r3, [pc, #228]	@ (8003070 <MX_TIM3_Init+0x114>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8002f90:	4b37      	ldr	r3, [pc, #220]	@ (8003070 <MX_TIM3_Init+0x114>)
 8002f92:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002f96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f98:	4b35      	ldr	r3, [pc, #212]	@ (8003070 <MX_TIM3_Init+0x114>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f9e:	4b34      	ldr	r3, [pc, #208]	@ (8003070 <MX_TIM3_Init+0x114>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fa4:	4832      	ldr	r0, [pc, #200]	@ (8003070 <MX_TIM3_Init+0x114>)
 8002fa6:	f004 fd5d 	bl	8007a64 <HAL_TIM_PWM_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002fb0:	f000 f922 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fbc:	f107 0320 	add.w	r3, r7, #32
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	482b      	ldr	r0, [pc, #172]	@ (8003070 <MX_TIM3_Init+0x114>)
 8002fc4:	f005 f9aa 	bl	800831c <HAL_TIMEx_MasterConfigSynchronization>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002fce:	f000 f913 	bl	80031f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fd2:	2360      	movs	r3, #96	@ 0x60
 8002fd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4821      	ldr	r0, [pc, #132]	@ (8003070 <MX_TIM3_Init+0x114>)
 8002fea:	f004 fe53 	bl	8007c94 <HAL_TIM_PWM_ConfigChannel>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002ff4:	f000 f900 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ff8:	1d3b      	adds	r3, r7, #4
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	481c      	ldr	r0, [pc, #112]	@ (8003070 <MX_TIM3_Init+0x114>)
 8003000:	f004 fe48 	bl	8007c94 <HAL_TIM_PWM_ConfigChannel>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800300a:	f000 f8f5 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800300e:	1d3b      	adds	r3, r7, #4
 8003010:	2208      	movs	r2, #8
 8003012:	4619      	mov	r1, r3
 8003014:	4816      	ldr	r0, [pc, #88]	@ (8003070 <MX_TIM3_Init+0x114>)
 8003016:	f004 fe3d 	bl	8007c94 <HAL_TIM_PWM_ConfigChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8003020:	f000 f8ea 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	220c      	movs	r2, #12
 8003028:	4619      	mov	r1, r3
 800302a:	4811      	ldr	r0, [pc, #68]	@ (8003070 <MX_TIM3_Init+0x114>)
 800302c:	f004 fe32 	bl	8007c94 <HAL_TIM_PWM_ConfigChannel>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8003036:	f000 f8df 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 800303a:	480d      	ldr	r0, [pc, #52]	@ (8003070 <MX_TIM3_Init+0x114>)
 800303c:	f004 fcaa 	bl	8007994 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // PA6
 8003040:	2100      	movs	r1, #0
 8003042:	480b      	ldr	r0, [pc, #44]	@ (8003070 <MX_TIM3_Init+0x114>)
 8003044:	f004 fd5e 	bl	8007b04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // PA7
 8003048:	2104      	movs	r1, #4
 800304a:	4809      	ldr	r0, [pc, #36]	@ (8003070 <MX_TIM3_Init+0x114>)
 800304c:	f004 fd5a 	bl	8007b04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);  // PB0
 8003050:	2108      	movs	r1, #8
 8003052:	4807      	ldr	r0, [pc, #28]	@ (8003070 <MX_TIM3_Init+0x114>)
 8003054:	f004 fd56 	bl	8007b04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);  // PB1
 8003058:	210c      	movs	r1, #12
 800305a:	4805      	ldr	r0, [pc, #20]	@ (8003070 <MX_TIM3_Init+0x114>)
 800305c:	f004 fd52 	bl	8007b04 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003060:	4803      	ldr	r0, [pc, #12]	@ (8003070 <MX_TIM3_Init+0x114>)
 8003062:	f000 f993 	bl	800338c <HAL_TIM_MspPostInit>

}
 8003066:	bf00      	nop
 8003068:	3728      	adds	r7, #40	@ 0x28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200005c0 	.word	0x200005c0
 8003074:	40000400 	.word	0x40000400

08003078 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800307c:	4b11      	ldr	r3, [pc, #68]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 800307e:	4a12      	ldr	r2, [pc, #72]	@ (80030c8 <MX_USART1_UART_Init+0x50>)
 8003080:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003082:	4b10      	ldr	r3, [pc, #64]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 8003084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003088:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800308a:	4b0e      	ldr	r3, [pc, #56]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003090:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 8003092:	2200      	movs	r2, #0
 8003094:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003096:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 8003098:	2200      	movs	r2, #0
 800309a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800309c:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 800309e:	220c      	movs	r2, #12
 80030a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030a2:	4b08      	ldr	r3, [pc, #32]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a8:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030ae:	4805      	ldr	r0, [pc, #20]	@ (80030c4 <MX_USART1_UART_Init+0x4c>)
 80030b0:	f005 f9b0 	bl	8008414 <HAL_UART_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030ba:	f000 f89d 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000608 	.word	0x20000608
 80030c8:	40011000 	.word	0x40011000

080030cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
 80030d6:	4b17      	ldr	r3, [pc, #92]	@ (8003134 <MX_DMA_Init+0x68>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	4a16      	ldr	r2, [pc, #88]	@ (8003134 <MX_DMA_Init+0x68>)
 80030dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e2:	4b14      	ldr	r3, [pc, #80]	@ (8003134 <MX_DMA_Init+0x68>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <MX_DMA_Init+0x68>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003134 <MX_DMA_Init+0x68>)
 80030f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <MX_DMA_Init+0x68>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2100      	movs	r1, #0
 800310e:	2010      	movs	r0, #16
 8003110:	f000 fcd3 	bl	8003aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003114:	2010      	movs	r0, #16
 8003116:	f000 fcec 	bl	8003af2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	2100      	movs	r1, #0
 800311e:	203a      	movs	r0, #58	@ 0x3a
 8003120:	f000 fccb 	bl	8003aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003124:	203a      	movs	r0, #58	@ 0x3a
 8003126:	f000 fce4 	bl	8003af2 <HAL_NVIC_EnableIRQ>

}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800

08003138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313e:	f107 030c 	add.w	r3, r7, #12
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	609a      	str	r2, [r3, #8]
 800314a:	60da      	str	r2, [r3, #12]
 800314c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	4b1f      	ldr	r3, [pc, #124]	@ (80031d0 <MX_GPIO_Init+0x98>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	4a1e      	ldr	r2, [pc, #120]	@ (80031d0 <MX_GPIO_Init+0x98>)
 8003158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800315c:	6313      	str	r3, [r2, #48]	@ 0x30
 800315e:	4b1c      	ldr	r3, [pc, #112]	@ (80031d0 <MX_GPIO_Init+0x98>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	4b18      	ldr	r3, [pc, #96]	@ (80031d0 <MX_GPIO_Init+0x98>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	4a17      	ldr	r2, [pc, #92]	@ (80031d0 <MX_GPIO_Init+0x98>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6313      	str	r3, [r2, #48]	@ 0x30
 800317a:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <MX_GPIO_Init+0x98>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <MX_GPIO_Init+0x98>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	4a10      	ldr	r2, [pc, #64]	@ (80031d0 <MX_GPIO_Init+0x98>)
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	6313      	str	r3, [r2, #48]	@ 0x30
 8003196:	4b0e      	ldr	r3, [pc, #56]	@ (80031d0 <MX_GPIO_Init+0x98>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2104      	movs	r1, #4
 80031a6:	480b      	ldr	r0, [pc, #44]	@ (80031d4 <MX_GPIO_Init+0x9c>)
 80031a8:	f001 f9f8 	bl	800459c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031ac:	2304      	movs	r3, #4
 80031ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b0:	2301      	movs	r3, #1
 80031b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031bc:	f107 030c 	add.w	r3, r7, #12
 80031c0:	4619      	mov	r1, r3
 80031c2:	4804      	ldr	r0, [pc, #16]	@ (80031d4 <MX_GPIO_Init+0x9c>)
 80031c4:	f001 f84e 	bl	8004264 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031c8:	bf00      	nop
 80031ca:	3720      	adds	r7, #32
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40020400 	.word	0x40020400

080031d8 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	if(huart == IBUS_UART)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a04      	ldr	r2, [pc, #16]	@ (80031f4 <HAL_UART_RxCpltCallback+0x1c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d101      	bne.n	80031ec <HAL_UART_RxCpltCallback+0x14>
		ibus_reset_failsafe();
 80031e8:	f7fe f856 	bl	8001298 <ibus_reset_failsafe>
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20000608 	.word	0x20000608

080031f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031fc:	b672      	cpsid	i
}
 80031fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003200:	bf00      	nop
 8003202:	e7fd      	b.n	8003200 <Error_Handler+0x8>

08003204 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]
 800320e:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <HAL_MspInit+0x4c>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	4a0f      	ldr	r2, [pc, #60]	@ (8003250 <HAL_MspInit+0x4c>)
 8003214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003218:	6453      	str	r3, [r2, #68]	@ 0x44
 800321a:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <HAL_MspInit+0x4c>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <HAL_MspInit+0x4c>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	4a08      	ldr	r2, [pc, #32]	@ (8003250 <HAL_MspInit+0x4c>)
 8003230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003234:	6413      	str	r3, [r2, #64]	@ 0x40
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_MspInit+0x4c>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800

08003254 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	@ 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a30      	ldr	r2, [pc, #192]	@ (8003334 <HAL_I2C_MspInit+0xe0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d15a      	bne.n	800332c <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	4b2f      	ldr	r3, [pc, #188]	@ (8003338 <HAL_I2C_MspInit+0xe4>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	4a2e      	ldr	r2, [pc, #184]	@ (8003338 <HAL_I2C_MspInit+0xe4>)
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	6313      	str	r3, [r2, #48]	@ 0x30
 8003286:	4b2c      	ldr	r3, [pc, #176]	@ (8003338 <HAL_I2C_MspInit+0xe4>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003292:	23c0      	movs	r3, #192	@ 0xc0
 8003294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003296:	2312      	movs	r3, #18
 8003298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329e:	2303      	movs	r3, #3
 80032a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032a2:	2304      	movs	r3, #4
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	4619      	mov	r1, r3
 80032ac:	4823      	ldr	r0, [pc, #140]	@ (800333c <HAL_I2C_MspInit+0xe8>)
 80032ae:	f000 ffd9 	bl	8004264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b20      	ldr	r3, [pc, #128]	@ (8003338 <HAL_I2C_MspInit+0xe4>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003338 <HAL_I2C_MspInit+0xe4>)
 80032bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80032c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003338 <HAL_I2C_MspInit+0xe4>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80032ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003340 <HAL_I2C_MspInit+0xec>)
 80032d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003344 <HAL_I2C_MspInit+0xf0>)
 80032d2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80032d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003340 <HAL_I2C_MspInit+0xec>)
 80032d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032da:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032dc:	4b18      	ldr	r3, [pc, #96]	@ (8003340 <HAL_I2C_MspInit+0xec>)
 80032de:	2200      	movs	r2, #0
 80032e0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e2:	4b17      	ldr	r3, [pc, #92]	@ (8003340 <HAL_I2C_MspInit+0xec>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032e8:	4b15      	ldr	r3, [pc, #84]	@ (8003340 <HAL_I2C_MspInit+0xec>)
 80032ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032ee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f0:	4b13      	ldr	r3, [pc, #76]	@ (8003340 <HAL_I2C_MspInit+0xec>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032f6:	4b12      	ldr	r3, [pc, #72]	@ (8003340 <HAL_I2C_MspInit+0xec>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80032fc:	4b10      	ldr	r3, [pc, #64]	@ (8003340 <HAL_I2C_MspInit+0xec>)
 80032fe:	2200      	movs	r2, #0
 8003300:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003302:	4b0f      	ldr	r3, [pc, #60]	@ (8003340 <HAL_I2C_MspInit+0xec>)
 8003304:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003308:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <HAL_I2C_MspInit+0xec>)
 800330c:	2200      	movs	r2, #0
 800330e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003310:	480b      	ldr	r0, [pc, #44]	@ (8003340 <HAL_I2C_MspInit+0xec>)
 8003312:	f000 fc09 	bl	8003b28 <HAL_DMA_Init>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800331c:	f7ff ff6c 	bl	80031f8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a07      	ldr	r2, [pc, #28]	@ (8003340 <HAL_I2C_MspInit+0xec>)
 8003324:	639a      	str	r2, [r3, #56]	@ 0x38
 8003326:	4a06      	ldr	r2, [pc, #24]	@ (8003340 <HAL_I2C_MspInit+0xec>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800332c:	bf00      	nop
 800332e:	3728      	adds	r7, #40	@ 0x28
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40005400 	.word	0x40005400
 8003338:	40023800 	.word	0x40023800
 800333c:	40020400 	.word	0x40020400
 8003340:	20000560 	.word	0x20000560
 8003344:	40026088 	.word	0x40026088

08003348 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0b      	ldr	r2, [pc, #44]	@ (8003384 <HAL_TIM_PWM_MspInit+0x3c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10d      	bne.n	8003376 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <HAL_TIM_PWM_MspInit+0x40>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	4a09      	ldr	r2, [pc, #36]	@ (8003388 <HAL_TIM_PWM_MspInit+0x40>)
 8003364:	f043 0302 	orr.w	r3, r3, #2
 8003368:	6413      	str	r3, [r2, #64]	@ 0x40
 800336a:	4b07      	ldr	r3, [pc, #28]	@ (8003388 <HAL_TIM_PWM_MspInit+0x40>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40000400 	.word	0x40000400
 8003388:	40023800 	.word	0x40023800

0800338c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	@ 0x28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a21      	ldr	r2, [pc, #132]	@ (8003430 <HAL_TIM_MspPostInit+0xa4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d13b      	bne.n	8003426 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	4b20      	ldr	r3, [pc, #128]	@ (8003434 <HAL_TIM_MspPostInit+0xa8>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003434 <HAL_TIM_MspPostInit+0xa8>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033be:	4b1d      	ldr	r3, [pc, #116]	@ (8003434 <HAL_TIM_MspPostInit+0xa8>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	4b19      	ldr	r3, [pc, #100]	@ (8003434 <HAL_TIM_MspPostInit+0xa8>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	4a18      	ldr	r2, [pc, #96]	@ (8003434 <HAL_TIM_MspPostInit+0xa8>)
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033da:	4b16      	ldr	r3, [pc, #88]	@ (8003434 <HAL_TIM_MspPostInit+0xa8>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033e6:	23c0      	movs	r3, #192	@ 0xc0
 80033e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f2:	2300      	movs	r3, #0
 80033f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033f6:	2302      	movs	r3, #2
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	4619      	mov	r1, r3
 8003400:	480d      	ldr	r0, [pc, #52]	@ (8003438 <HAL_TIM_MspPostInit+0xac>)
 8003402:	f000 ff2f 	bl	8004264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003406:	2303      	movs	r3, #3
 8003408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003416:	2302      	movs	r3, #2
 8003418:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	4619      	mov	r1, r3
 8003420:	4806      	ldr	r0, [pc, #24]	@ (800343c <HAL_TIM_MspPostInit+0xb0>)
 8003422:	f000 ff1f 	bl	8004264 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003426:	bf00      	nop
 8003428:	3728      	adds	r7, #40	@ 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40000400 	.word	0x40000400
 8003434:	40023800 	.word	0x40023800
 8003438:	40020000 	.word	0x40020000
 800343c:	40020400 	.word	0x40020400

08003440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	@ 0x28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 0314 	add.w	r3, r7, #20
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a31      	ldr	r2, [pc, #196]	@ (8003524 <HAL_UART_MspInit+0xe4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d15c      	bne.n	800351c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	4b30      	ldr	r3, [pc, #192]	@ (8003528 <HAL_UART_MspInit+0xe8>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346a:	4a2f      	ldr	r2, [pc, #188]	@ (8003528 <HAL_UART_MspInit+0xe8>)
 800346c:	f043 0310 	orr.w	r3, r3, #16
 8003470:	6453      	str	r3, [r2, #68]	@ 0x44
 8003472:	4b2d      	ldr	r3, [pc, #180]	@ (8003528 <HAL_UART_MspInit+0xe8>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	4b29      	ldr	r3, [pc, #164]	@ (8003528 <HAL_UART_MspInit+0xe8>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	4a28      	ldr	r2, [pc, #160]	@ (8003528 <HAL_UART_MspInit+0xe8>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6313      	str	r3, [r2, #48]	@ 0x30
 800348e:	4b26      	ldr	r3, [pc, #152]	@ (8003528 <HAL_UART_MspInit+0xe8>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800349a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800349e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a8:	2303      	movs	r3, #3
 80034aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034ac:	2307      	movs	r3, #7
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	4619      	mov	r1, r3
 80034b6:	481d      	ldr	r0, [pc, #116]	@ (800352c <HAL_UART_MspInit+0xec>)
 80034b8:	f000 fed4 	bl	8004264 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80034bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003530 <HAL_UART_MspInit+0xf0>)
 80034be:	4a1d      	ldr	r2, [pc, #116]	@ (8003534 <HAL_UART_MspInit+0xf4>)
 80034c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80034c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003530 <HAL_UART_MspInit+0xf0>)
 80034c4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80034c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ca:	4b19      	ldr	r3, [pc, #100]	@ (8003530 <HAL_UART_MspInit+0xf0>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034d0:	4b17      	ldr	r3, [pc, #92]	@ (8003530 <HAL_UART_MspInit+0xf0>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034d6:	4b16      	ldr	r3, [pc, #88]	@ (8003530 <HAL_UART_MspInit+0xf0>)
 80034d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034de:	4b14      	ldr	r3, [pc, #80]	@ (8003530 <HAL_UART_MspInit+0xf0>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034e4:	4b12      	ldr	r3, [pc, #72]	@ (8003530 <HAL_UART_MspInit+0xf0>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80034ea:	4b11      	ldr	r3, [pc, #68]	@ (8003530 <HAL_UART_MspInit+0xf0>)
 80034ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80034f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003530 <HAL_UART_MspInit+0xf0>)
 80034f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034f8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003530 <HAL_UART_MspInit+0xf0>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003500:	480b      	ldr	r0, [pc, #44]	@ (8003530 <HAL_UART_MspInit+0xf0>)
 8003502:	f000 fb11 	bl	8003b28 <HAL_DMA_Init>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800350c:	f7ff fe74 	bl	80031f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a07      	ldr	r2, [pc, #28]	@ (8003530 <HAL_UART_MspInit+0xf0>)
 8003514:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003516:	4a06      	ldr	r2, [pc, #24]	@ (8003530 <HAL_UART_MspInit+0xf0>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800351c:	bf00      	nop
 800351e:	3728      	adds	r7, #40	@ 0x28
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40011000 	.word	0x40011000
 8003528:	40023800 	.word	0x40023800
 800352c:	40020000 	.word	0x40020000
 8003530:	20000650 	.word	0x20000650
 8003534:	40026440 	.word	0x40026440

08003538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800353c:	bf00      	nop
 800353e:	e7fd      	b.n	800353c <NMI_Handler+0x4>

08003540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <HardFault_Handler+0x4>

08003548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800354c:	bf00      	nop
 800354e:	e7fd      	b.n	800354c <MemManage_Handler+0x4>

08003550 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <BusFault_Handler+0x4>

08003558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <UsageFault_Handler+0x4>

08003560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800358e:	f000 f975 	bl	800387c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800359c:	4802      	ldr	r0, [pc, #8]	@ (80035a8 <DMA1_Stream5_IRQHandler+0x10>)
 800359e:	f000 fbeb 	bl	8003d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000560 	.word	0x20000560

080035ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80035b0:	4802      	ldr	r0, [pc, #8]	@ (80035bc <DMA2_Stream2_IRQHandler+0x10>)
 80035b2:	f000 fbe1 	bl	8003d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000650 	.word	0x20000650

080035c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80035c4:	4802      	ldr	r0, [pc, #8]	@ (80035d0 <OTG_FS_IRQHandler+0x10>)
 80035c6:	f002 fc3f 	bl	8005e48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20001ba4 	.word	0x20001ba4

080035d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return 1;
 80035d8:	2301      	movs	r3, #1
}
 80035da:	4618      	mov	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <_kill>:

int _kill(int pid, int sig)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035ee:	f00a fc8b 	bl	800df08 <__errno>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2216      	movs	r2, #22
 80035f6:	601a      	str	r2, [r3, #0]
  return -1;
 80035f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <_exit>:

void _exit (int status)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800360c:	f04f 31ff 	mov.w	r1, #4294967295
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff ffe7 	bl	80035e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003616:	bf00      	nop
 8003618:	e7fd      	b.n	8003616 <_exit+0x12>

0800361a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	e00a      	b.n	8003642 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800362c:	f3af 8000 	nop.w
 8003630:	4601      	mov	r1, r0
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	60ba      	str	r2, [r7, #8]
 8003638:	b2ca      	uxtb	r2, r1
 800363a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	3301      	adds	r3, #1
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	dbf0      	blt.n	800362c <_read+0x12>
  }

  return len;
 800364a:	687b      	ldr	r3, [r7, #4]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	e009      	b.n	800367a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	60ba      	str	r2, [r7, #8]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	3301      	adds	r3, #1
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	429a      	cmp	r2, r3
 8003680:	dbf1      	blt.n	8003666 <_write+0x12>
  }
  return len;
 8003682:	687b      	ldr	r3, [r7, #4]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <_close>:

int _close(int file)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036b4:	605a      	str	r2, [r3, #4]
  return 0;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <_isatty>:

int _isatty(int file)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036cc:	2301      	movs	r3, #1
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036fc:	4a14      	ldr	r2, [pc, #80]	@ (8003750 <_sbrk+0x5c>)
 80036fe:	4b15      	ldr	r3, [pc, #84]	@ (8003754 <_sbrk+0x60>)
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003708:	4b13      	ldr	r3, [pc, #76]	@ (8003758 <_sbrk+0x64>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <_sbrk+0x64>)
 8003712:	4a12      	ldr	r2, [pc, #72]	@ (800375c <_sbrk+0x68>)
 8003714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003716:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <_sbrk+0x64>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	429a      	cmp	r2, r3
 8003722:	d207      	bcs.n	8003734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003724:	f00a fbf0 	bl	800df08 <__errno>
 8003728:	4603      	mov	r3, r0
 800372a:	220c      	movs	r2, #12
 800372c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800372e:	f04f 33ff 	mov.w	r3, #4294967295
 8003732:	e009      	b.n	8003748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003734:	4b08      	ldr	r3, [pc, #32]	@ (8003758 <_sbrk+0x64>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800373a:	4b07      	ldr	r3, [pc, #28]	@ (8003758 <_sbrk+0x64>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	4a05      	ldr	r2, [pc, #20]	@ (8003758 <_sbrk+0x64>)
 8003744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003746:	68fb      	ldr	r3, [r7, #12]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20020000 	.word	0x20020000
 8003754:	00000400 	.word	0x00000400
 8003758:	200006bc 	.word	0x200006bc
 800375c:	200023f8 	.word	0x200023f8

08003760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003764:	4b06      	ldr	r3, [pc, #24]	@ (8003780 <SystemInit+0x20>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376a:	4a05      	ldr	r2, [pc, #20]	@ (8003780 <SystemInit+0x20>)
 800376c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003784:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003788:	f7ff ffea 	bl	8003760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800378c:	480c      	ldr	r0, [pc, #48]	@ (80037c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800378e:	490d      	ldr	r1, [pc, #52]	@ (80037c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003790:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003794:	e002      	b.n	800379c <LoopCopyDataInit>

08003796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800379a:	3304      	adds	r3, #4

0800379c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800379c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800379e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a0:	d3f9      	bcc.n	8003796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037a2:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037a4:	4c0a      	ldr	r4, [pc, #40]	@ (80037d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a8:	e001      	b.n	80037ae <LoopFillZerobss>

080037aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037ac:	3204      	adds	r2, #4

080037ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b0:	d3fb      	bcc.n	80037aa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80037b2:	f00a fbaf 	bl	800df14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037b6:	f7ff fb03 	bl	8002dc0 <main>
  bx  lr    
 80037ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037c4:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 80037c8:	080131e8 	.word	0x080131e8
  ldr r2, =_sbss
 80037cc:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 80037d0:	200023f4 	.word	0x200023f4

080037d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037d4:	e7fe      	b.n	80037d4 <ADC_IRQHandler>
	...

080037d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003818 <HAL_Init+0x40>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003818 <HAL_Init+0x40>)
 80037e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HAL_Init+0x40>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003818 <HAL_Init+0x40>)
 80037ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037f4:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <HAL_Init+0x40>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a07      	ldr	r2, [pc, #28]	@ (8003818 <HAL_Init+0x40>)
 80037fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003800:	2003      	movs	r0, #3
 8003802:	f000 f94f 	bl	8003aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003806:	200f      	movs	r0, #15
 8003808:	f000 f808 	bl	800381c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800380c:	f7ff fcfa 	bl	8003204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023c00 	.word	0x40023c00

0800381c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003824:	4b12      	ldr	r3, [pc, #72]	@ (8003870 <HAL_InitTick+0x54>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b12      	ldr	r3, [pc, #72]	@ (8003874 <HAL_InitTick+0x58>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003832:	fbb3 f3f1 	udiv	r3, r3, r1
 8003836:	fbb2 f3f3 	udiv	r3, r2, r3
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f967 	bl	8003b0e <HAL_SYSTICK_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e00e      	b.n	8003868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b0f      	cmp	r3, #15
 800384e:	d80a      	bhi.n	8003866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003850:	2200      	movs	r2, #0
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	f000 f92f 	bl	8003aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800385c:	4a06      	ldr	r2, [pc, #24]	@ (8003878 <HAL_InitTick+0x5c>)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	e000      	b.n	8003868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	2000003c 	.word	0x2000003c
 8003874:	20000044 	.word	0x20000044
 8003878:	20000040 	.word	0x20000040

0800387c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <HAL_IncTick+0x20>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_IncTick+0x24>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4413      	add	r3, r2
 800388c:	4a04      	ldr	r2, [pc, #16]	@ (80038a0 <HAL_IncTick+0x24>)
 800388e:	6013      	str	r3, [r2, #0]
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000044 	.word	0x20000044
 80038a0:	200006c0 	.word	0x200006c0

080038a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return uwTick;
 80038a8:	4b03      	ldr	r3, [pc, #12]	@ (80038b8 <HAL_GetTick+0x14>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	200006c0 	.word	0x200006c0

080038bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c4:	f7ff ffee 	bl	80038a4 <HAL_GetTick>
 80038c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d005      	beq.n	80038e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003900 <HAL_Delay+0x44>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038e2:	bf00      	nop
 80038e4:	f7ff ffde 	bl	80038a4 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d8f7      	bhi.n	80038e4 <HAL_Delay+0x28>
  {
  }
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000044 	.word	0x20000044

08003904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003914:	4b0c      	ldr	r3, [pc, #48]	@ (8003948 <__NVIC_SetPriorityGrouping+0x44>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003920:	4013      	ands	r3, r2
 8003922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800392c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003936:	4a04      	ldr	r2, [pc, #16]	@ (8003948 <__NVIC_SetPriorityGrouping+0x44>)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	60d3      	str	r3, [r2, #12]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003950:	4b04      	ldr	r3, [pc, #16]	@ (8003964 <__NVIC_GetPriorityGrouping+0x18>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	f003 0307 	and.w	r3, r3, #7
}
 800395a:	4618      	mov	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	2b00      	cmp	r3, #0
 8003978:	db0b      	blt.n	8003992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	f003 021f 	and.w	r2, r3, #31
 8003980:	4907      	ldr	r1, [pc, #28]	@ (80039a0 <__NVIC_EnableIRQ+0x38>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2001      	movs	r0, #1
 800398a:	fa00 f202 	lsl.w	r2, r0, r2
 800398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	e000e100 	.word	0xe000e100

080039a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	db0a      	blt.n	80039ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	490c      	ldr	r1, [pc, #48]	@ (80039f0 <__NVIC_SetPriority+0x4c>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	440b      	add	r3, r1
 80039c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039cc:	e00a      	b.n	80039e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4908      	ldr	r1, [pc, #32]	@ (80039f4 <__NVIC_SetPriority+0x50>)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3b04      	subs	r3, #4
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	440b      	add	r3, r1
 80039e2:	761a      	strb	r2, [r3, #24]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000e100 	.word	0xe000e100
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	@ 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f1c3 0307 	rsb	r3, r3, #7
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	bf28      	it	cs
 8003a16:	2304      	movcs	r3, #4
 8003a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d902      	bls.n	8003a28 <NVIC_EncodePriority+0x30>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3b03      	subs	r3, #3
 8003a26:	e000      	b.n	8003a2a <NVIC_EncodePriority+0x32>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a40:	f04f 31ff 	mov.w	r1, #4294967295
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	43d9      	mvns	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a50:	4313      	orrs	r3, r2
         );
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3724      	adds	r7, #36	@ 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a70:	d301      	bcc.n	8003a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00f      	b.n	8003a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a76:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa0 <SysTick_Config+0x40>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a7e:	210f      	movs	r1, #15
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
 8003a84:	f7ff ff8e 	bl	80039a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a88:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <SysTick_Config+0x40>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a8e:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <SysTick_Config+0x40>)
 8003a90:	2207      	movs	r2, #7
 8003a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	e000e010 	.word	0xe000e010

08003aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ff29 	bl	8003904 <__NVIC_SetPriorityGrouping>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003acc:	f7ff ff3e 	bl	800394c <__NVIC_GetPriorityGrouping>
 8003ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f7ff ff8e 	bl	80039f8 <NVIC_EncodePriority>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff5d 	bl	80039a4 <__NVIC_SetPriority>
}
 8003aea:	bf00      	nop
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ff31 	bl	8003968 <__NVIC_EnableIRQ>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff ffa2 	bl	8003a60 <SysTick_Config>
 8003b1c:	4603      	mov	r3, r0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b34:	f7ff feb6 	bl	80038a4 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e099      	b.n	8003c78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b64:	e00f      	b.n	8003b86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b66:	f7ff fe9d 	bl	80038a4 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b05      	cmp	r3, #5
 8003b72:	d908      	bls.n	8003b86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e078      	b.n	8003c78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e8      	bne.n	8003b66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4b38      	ldr	r3, [pc, #224]	@ (8003c80 <HAL_DMA_Init+0x158>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d107      	bne.n	8003bf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	4313      	orrs	r3, r2
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0307 	bic.w	r3, r3, #7
 8003c06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d117      	bne.n	8003c4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00e      	beq.n	8003c4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fa9d 	bl	800416c <DMA_CheckFifoParam>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2240      	movs	r2, #64	@ 0x40
 8003c3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c46:	2301      	movs	r3, #1
 8003c48:	e016      	b.n	8003c78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fa54 	bl	8004100 <DMA_CalcBaseAndBitshift>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c60:	223f      	movs	r2, #63	@ 0x3f
 8003c62:	409a      	lsls	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	f010803f 	.word	0xf010803f

08003c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_DMA_Start_IT+0x26>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e040      	b.n	8003d2c <HAL_DMA_Start_IT+0xa8>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d12f      	bne.n	8003d1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f9e6 	bl	80040a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cdc:	223f      	movs	r2, #63	@ 0x3f
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0216 	orr.w	r2, r2, #22
 8003cf2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0208 	orr.w	r2, r2, #8
 8003d0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e005      	b.n	8003d2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d004      	beq.n	8003d52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2280      	movs	r2, #128	@ 0x80
 8003d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e00c      	b.n	8003d6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2205      	movs	r2, #5
 8003d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d84:	4b8e      	ldr	r3, [pc, #568]	@ (8003fc0 <HAL_DMA_IRQHandler+0x248>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a8e      	ldr	r2, [pc, #568]	@ (8003fc4 <HAL_DMA_IRQHandler+0x24c>)
 8003d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8e:	0a9b      	lsrs	r3, r3, #10
 8003d90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da2:	2208      	movs	r2, #8
 8003da4:	409a      	lsls	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01a      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d013      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0204 	bic.w	r2, r2, #4
 8003dca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ddc:	f043 0201 	orr.w	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de8:	2201      	movs	r2, #1
 8003dea:	409a      	lsls	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4013      	ands	r3, r2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d012      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e06:	2201      	movs	r2, #1
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e12:	f043 0202 	orr.w	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1e:	2204      	movs	r2, #4
 8003e20:	409a      	lsls	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d012      	beq.n	8003e50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00b      	beq.n	8003e50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e48:	f043 0204 	orr.w	r2, r3, #4
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e54:	2210      	movs	r2, #16
 8003e56:	409a      	lsls	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d043      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d03c      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e72:	2210      	movs	r2, #16
 8003e74:	409a      	lsls	r2, r3
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d018      	beq.n	8003eba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d108      	bne.n	8003ea8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d024      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
 8003ea6:	e01f      	b.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01b      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	4798      	blx	r3
 8003eb8:	e016      	b.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d107      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0208 	bic.w	r2, r2, #8
 8003ed6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eec:	2220      	movs	r2, #32
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 808f 	beq.w	8004018 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8087 	beq.w	8004018 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0e:	2220      	movs	r2, #32
 8003f10:	409a      	lsls	r2, r3
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d136      	bne.n	8003f90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0216 	bic.w	r2, r2, #22
 8003f30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <HAL_DMA_IRQHandler+0x1da>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0208 	bic.w	r2, r2, #8
 8003f60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f66:	223f      	movs	r2, #63	@ 0x3f
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d07e      	beq.n	8004084 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	4798      	blx	r3
        }
        return;
 8003f8e:	e079      	b.n	8004084 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d01d      	beq.n	8003fda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10d      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d031      	beq.n	8004018 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
 8003fbc:	e02c      	b.n	8004018 <HAL_DMA_IRQHandler+0x2a0>
 8003fbe:	bf00      	nop
 8003fc0:	2000003c 	.word	0x2000003c
 8003fc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d023      	beq.n	8004018 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
 8003fd8:	e01e      	b.n	8004018 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10f      	bne.n	8004008 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0210 	bic.w	r2, r2, #16
 8003ff6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401c:	2b00      	cmp	r3, #0
 800401e:	d032      	beq.n	8004086 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d022      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2205      	movs	r2, #5
 8004030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	3301      	adds	r3, #1
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	429a      	cmp	r2, r3
 800404e:	d307      	bcc.n	8004060 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f2      	bne.n	8004044 <HAL_DMA_IRQHandler+0x2cc>
 800405e:	e000      	b.n	8004062 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004060:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	4798      	blx	r3
 8004082:	e000      	b.n	8004086 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004084:	bf00      	nop
    }
  }
}
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004098:	4618      	mov	r0, r3
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b40      	cmp	r3, #64	@ 0x40
 80040d0:	d108      	bne.n	80040e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040e2:	e007      	b.n	80040f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	60da      	str	r2, [r3, #12]
}
 80040f4:	bf00      	nop
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	3b10      	subs	r3, #16
 8004110:	4a14      	ldr	r2, [pc, #80]	@ (8004164 <DMA_CalcBaseAndBitshift+0x64>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800411a:	4a13      	ldr	r2, [pc, #76]	@ (8004168 <DMA_CalcBaseAndBitshift+0x68>)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d909      	bls.n	8004142 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004136:	f023 0303 	bic.w	r3, r3, #3
 800413a:	1d1a      	adds	r2, r3, #4
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004140:	e007      	b.n	8004152 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800414a:	f023 0303 	bic.w	r3, r3, #3
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	aaaaaaab 	.word	0xaaaaaaab
 8004168:	08012bc8 	.word	0x08012bc8

0800416c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d11f      	bne.n	80041c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d856      	bhi.n	800423a <DMA_CheckFifoParam+0xce>
 800418c:	a201      	add	r2, pc, #4	@ (adr r2, 8004194 <DMA_CheckFifoParam+0x28>)
 800418e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004192:	bf00      	nop
 8004194:	080041a5 	.word	0x080041a5
 8004198:	080041b7 	.word	0x080041b7
 800419c:	080041a5 	.word	0x080041a5
 80041a0:	0800423b 	.word	0x0800423b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d046      	beq.n	800423e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b4:	e043      	b.n	800423e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041be:	d140      	bne.n	8004242 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c4:	e03d      	b.n	8004242 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ce:	d121      	bne.n	8004214 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d837      	bhi.n	8004246 <DMA_CheckFifoParam+0xda>
 80041d6:	a201      	add	r2, pc, #4	@ (adr r2, 80041dc <DMA_CheckFifoParam+0x70>)
 80041d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041dc:	080041ed 	.word	0x080041ed
 80041e0:	080041f3 	.word	0x080041f3
 80041e4:	080041ed 	.word	0x080041ed
 80041e8:	08004205 	.word	0x08004205
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
      break;
 80041f0:	e030      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d025      	beq.n	800424a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004202:	e022      	b.n	800424a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800420c:	d11f      	bne.n	800424e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004212:	e01c      	b.n	800424e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d903      	bls.n	8004222 <DMA_CheckFifoParam+0xb6>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b03      	cmp	r3, #3
 800421e:	d003      	beq.n	8004228 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004220:	e018      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	73fb      	strb	r3, [r7, #15]
      break;
 8004226:	e015      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00e      	beq.n	8004252 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
      break;
 8004238:	e00b      	b.n	8004252 <DMA_CheckFifoParam+0xe6>
      break;
 800423a:	bf00      	nop
 800423c:	e00a      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
      break;
 800423e:	bf00      	nop
 8004240:	e008      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
      break;
 8004242:	bf00      	nop
 8004244:	e006      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
      break;
 8004246:	bf00      	nop
 8004248:	e004      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
      break;
 800424a:	bf00      	nop
 800424c:	e002      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
      break;   
 800424e:	bf00      	nop
 8004250:	e000      	b.n	8004254 <DMA_CheckFifoParam+0xe8>
      break;
 8004252:	bf00      	nop
    }
  } 
  
  return status; 
 8004254:	7bfb      	ldrb	r3, [r7, #15]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop

08004264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004264:	b480      	push	{r7}
 8004266:	b089      	sub	sp, #36	@ 0x24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	e16b      	b.n	8004558 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004280:	2201      	movs	r2, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4013      	ands	r3, r2
 8004292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	429a      	cmp	r2, r3
 800429a:	f040 815a 	bne.w	8004552 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d005      	beq.n	80042b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d130      	bne.n	8004318 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	2203      	movs	r2, #3
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4313      	orrs	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042ec:	2201      	movs	r2, #1
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	f003 0201 	and.w	r2, r3, #1
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4313      	orrs	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	2b03      	cmp	r3, #3
 8004322:	d017      	beq.n	8004354 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	2203      	movs	r2, #3
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d123      	bne.n	80043a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	08da      	lsrs	r2, r3, #3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3208      	adds	r2, #8
 8004368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800436c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	220f      	movs	r2, #15
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	08da      	lsrs	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3208      	adds	r2, #8
 80043a2:	69b9      	ldr	r1, [r7, #24]
 80043a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	2203      	movs	r2, #3
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 0203 	and.w	r2, r3, #3
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80b4 	beq.w	8004552 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	4b60      	ldr	r3, [pc, #384]	@ (8004570 <HAL_GPIO_Init+0x30c>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f2:	4a5f      	ldr	r2, [pc, #380]	@ (8004570 <HAL_GPIO_Init+0x30c>)
 80043f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80043fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004570 <HAL_GPIO_Init+0x30c>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004406:	4a5b      	ldr	r2, [pc, #364]	@ (8004574 <HAL_GPIO_Init+0x310>)
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	089b      	lsrs	r3, r3, #2
 800440c:	3302      	adds	r3, #2
 800440e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	220f      	movs	r2, #15
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	43db      	mvns	r3, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4013      	ands	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a52      	ldr	r2, [pc, #328]	@ (8004578 <HAL_GPIO_Init+0x314>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d02b      	beq.n	800448a <HAL_GPIO_Init+0x226>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a51      	ldr	r2, [pc, #324]	@ (800457c <HAL_GPIO_Init+0x318>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d025      	beq.n	8004486 <HAL_GPIO_Init+0x222>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a50      	ldr	r2, [pc, #320]	@ (8004580 <HAL_GPIO_Init+0x31c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01f      	beq.n	8004482 <HAL_GPIO_Init+0x21e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a4f      	ldr	r2, [pc, #316]	@ (8004584 <HAL_GPIO_Init+0x320>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d019      	beq.n	800447e <HAL_GPIO_Init+0x21a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a4e      	ldr	r2, [pc, #312]	@ (8004588 <HAL_GPIO_Init+0x324>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <HAL_GPIO_Init+0x216>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a4d      	ldr	r2, [pc, #308]	@ (800458c <HAL_GPIO_Init+0x328>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00d      	beq.n	8004476 <HAL_GPIO_Init+0x212>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a4c      	ldr	r2, [pc, #304]	@ (8004590 <HAL_GPIO_Init+0x32c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d007      	beq.n	8004472 <HAL_GPIO_Init+0x20e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a4b      	ldr	r2, [pc, #300]	@ (8004594 <HAL_GPIO_Init+0x330>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d101      	bne.n	800446e <HAL_GPIO_Init+0x20a>
 800446a:	2307      	movs	r3, #7
 800446c:	e00e      	b.n	800448c <HAL_GPIO_Init+0x228>
 800446e:	2308      	movs	r3, #8
 8004470:	e00c      	b.n	800448c <HAL_GPIO_Init+0x228>
 8004472:	2306      	movs	r3, #6
 8004474:	e00a      	b.n	800448c <HAL_GPIO_Init+0x228>
 8004476:	2305      	movs	r3, #5
 8004478:	e008      	b.n	800448c <HAL_GPIO_Init+0x228>
 800447a:	2304      	movs	r3, #4
 800447c:	e006      	b.n	800448c <HAL_GPIO_Init+0x228>
 800447e:	2303      	movs	r3, #3
 8004480:	e004      	b.n	800448c <HAL_GPIO_Init+0x228>
 8004482:	2302      	movs	r3, #2
 8004484:	e002      	b.n	800448c <HAL_GPIO_Init+0x228>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <HAL_GPIO_Init+0x228>
 800448a:	2300      	movs	r3, #0
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	f002 0203 	and.w	r2, r2, #3
 8004492:	0092      	lsls	r2, r2, #2
 8004494:	4093      	lsls	r3, r2
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4313      	orrs	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800449c:	4935      	ldr	r1, [pc, #212]	@ (8004574 <HAL_GPIO_Init+0x310>)
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	089b      	lsrs	r3, r3, #2
 80044a2:	3302      	adds	r3, #2
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004598 <HAL_GPIO_Init+0x334>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	43db      	mvns	r3, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4013      	ands	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ce:	4a32      	ldr	r2, [pc, #200]	@ (8004598 <HAL_GPIO_Init+0x334>)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044d4:	4b30      	ldr	r3, [pc, #192]	@ (8004598 <HAL_GPIO_Init+0x334>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	43db      	mvns	r3, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4013      	ands	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044f8:	4a27      	ldr	r2, [pc, #156]	@ (8004598 <HAL_GPIO_Init+0x334>)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044fe:	4b26      	ldr	r3, [pc, #152]	@ (8004598 <HAL_GPIO_Init+0x334>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	43db      	mvns	r3, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4013      	ands	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004522:	4a1d      	ldr	r2, [pc, #116]	@ (8004598 <HAL_GPIO_Init+0x334>)
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004528:	4b1b      	ldr	r3, [pc, #108]	@ (8004598 <HAL_GPIO_Init+0x334>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	43db      	mvns	r3, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4013      	ands	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800454c:	4a12      	ldr	r2, [pc, #72]	@ (8004598 <HAL_GPIO_Init+0x334>)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	3301      	adds	r3, #1
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	2b0f      	cmp	r3, #15
 800455c:	f67f ae90 	bls.w	8004280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	3724      	adds	r7, #36	@ 0x24
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800
 8004574:	40013800 	.word	0x40013800
 8004578:	40020000 	.word	0x40020000
 800457c:	40020400 	.word	0x40020400
 8004580:	40020800 	.word	0x40020800
 8004584:	40020c00 	.word	0x40020c00
 8004588:	40021000 	.word	0x40021000
 800458c:	40021400 	.word	0x40021400
 8004590:	40021800 	.word	0x40021800
 8004594:	40021c00 	.word	0x40021c00
 8004598:	40013c00 	.word	0x40013c00

0800459c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	807b      	strh	r3, [r7, #2]
 80045a8:	4613      	mov	r3, r2
 80045aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045ac:	787b      	ldrb	r3, [r7, #1]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045b2:	887a      	ldrh	r2, [r7, #2]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045b8:	e003      	b.n	80045c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045ba:	887b      	ldrh	r3, [r7, #2]
 80045bc:	041a      	lsls	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	619a      	str	r2, [r3, #24]
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e12b      	b.n	800483a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fe fe2c 	bl	8003254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2224      	movs	r2, #36	@ 0x24
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004622:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004632:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004634:	f003 f986 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 8004638:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4a81      	ldr	r2, [pc, #516]	@ (8004844 <HAL_I2C_Init+0x274>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d807      	bhi.n	8004654 <HAL_I2C_Init+0x84>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4a80      	ldr	r2, [pc, #512]	@ (8004848 <HAL_I2C_Init+0x278>)
 8004648:	4293      	cmp	r3, r2
 800464a:	bf94      	ite	ls
 800464c:	2301      	movls	r3, #1
 800464e:	2300      	movhi	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	e006      	b.n	8004662 <HAL_I2C_Init+0x92>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4a7d      	ldr	r2, [pc, #500]	@ (800484c <HAL_I2C_Init+0x27c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	bf94      	ite	ls
 800465c:	2301      	movls	r3, #1
 800465e:	2300      	movhi	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e0e7      	b.n	800483a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a78      	ldr	r2, [pc, #480]	@ (8004850 <HAL_I2C_Init+0x280>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	0c9b      	lsrs	r3, r3, #18
 8004674:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4a6a      	ldr	r2, [pc, #424]	@ (8004844 <HAL_I2C_Init+0x274>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d802      	bhi.n	80046a4 <HAL_I2C_Init+0xd4>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3301      	adds	r3, #1
 80046a2:	e009      	b.n	80046b8 <HAL_I2C_Init+0xe8>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046aa:	fb02 f303 	mul.w	r3, r2, r3
 80046ae:	4a69      	ldr	r2, [pc, #420]	@ (8004854 <HAL_I2C_Init+0x284>)
 80046b0:	fba2 2303 	umull	r2, r3, r2, r3
 80046b4:	099b      	lsrs	r3, r3, #6
 80046b6:	3301      	adds	r3, #1
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6812      	ldr	r2, [r2, #0]
 80046bc:	430b      	orrs	r3, r1
 80046be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	495c      	ldr	r1, [pc, #368]	@ (8004844 <HAL_I2C_Init+0x274>)
 80046d4:	428b      	cmp	r3, r1
 80046d6:	d819      	bhi.n	800470c <HAL_I2C_Init+0x13c>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1e59      	subs	r1, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046e6:	1c59      	adds	r1, r3, #1
 80046e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046ec:	400b      	ands	r3, r1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_I2C_Init+0x138>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1e59      	subs	r1, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004700:	3301      	adds	r3, #1
 8004702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004706:	e051      	b.n	80047ac <HAL_I2C_Init+0x1dc>
 8004708:	2304      	movs	r3, #4
 800470a:	e04f      	b.n	80047ac <HAL_I2C_Init+0x1dc>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d111      	bne.n	8004738 <HAL_I2C_Init+0x168>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	1e58      	subs	r0, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6859      	ldr	r1, [r3, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	440b      	add	r3, r1
 8004722:	fbb0 f3f3 	udiv	r3, r0, r3
 8004726:	3301      	adds	r3, #1
 8004728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800472c:	2b00      	cmp	r3, #0
 800472e:	bf0c      	ite	eq
 8004730:	2301      	moveq	r3, #1
 8004732:	2300      	movne	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	e012      	b.n	800475e <HAL_I2C_Init+0x18e>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	1e58      	subs	r0, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6859      	ldr	r1, [r3, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	0099      	lsls	r1, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	fbb0 f3f3 	udiv	r3, r0, r3
 800474e:	3301      	adds	r3, #1
 8004750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf0c      	ite	eq
 8004758:	2301      	moveq	r3, #1
 800475a:	2300      	movne	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_I2C_Init+0x196>
 8004762:	2301      	movs	r3, #1
 8004764:	e022      	b.n	80047ac <HAL_I2C_Init+0x1dc>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10e      	bne.n	800478c <HAL_I2C_Init+0x1bc>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1e58      	subs	r0, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6859      	ldr	r1, [r3, #4]
 8004776:	460b      	mov	r3, r1
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	440b      	add	r3, r1
 800477c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004780:	3301      	adds	r3, #1
 8004782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800478a:	e00f      	b.n	80047ac <HAL_I2C_Init+0x1dc>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	1e58      	subs	r0, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6859      	ldr	r1, [r3, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	0099      	lsls	r1, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	6809      	ldr	r1, [r1, #0]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6911      	ldr	r1, [r2, #16]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	68d2      	ldr	r2, [r2, #12]
 80047e6:	4311      	orrs	r1, r2
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	000186a0 	.word	0x000186a0
 8004848:	001e847f 	.word	0x001e847f
 800484c:	003d08ff 	.word	0x003d08ff
 8004850:	431bde83 	.word	0x431bde83
 8004854:	10624dd3 	.word	0x10624dd3

08004858 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	461a      	mov	r2, r3
 8004866:	4603      	mov	r3, r0
 8004868:	817b      	strh	r3, [r7, #10]
 800486a:	460b      	mov	r3, r1
 800486c:	813b      	strh	r3, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004872:	f7ff f817 	bl	80038a4 <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b20      	cmp	r3, #32
 8004882:	f040 80d9 	bne.w	8004a38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	2319      	movs	r3, #25
 800488c:	2201      	movs	r2, #1
 800488e:	496d      	ldr	r1, [pc, #436]	@ (8004a44 <HAL_I2C_Mem_Write+0x1ec>)
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 ff5f 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
 800489e:	e0cc      	b.n	8004a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_I2C_Mem_Write+0x56>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e0c5      	b.n	8004a3a <HAL_I2C_Mem_Write+0x1e2>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d007      	beq.n	80048d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2221      	movs	r2, #33	@ 0x21
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2240      	movs	r2, #64	@ 0x40
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a3a      	ldr	r2, [r7, #32]
 80048fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004904:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a4d      	ldr	r2, [pc, #308]	@ (8004a48 <HAL_I2C_Mem_Write+0x1f0>)
 8004914:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004916:	88f8      	ldrh	r0, [r7, #6]
 8004918:	893a      	ldrh	r2, [r7, #8]
 800491a:	8979      	ldrh	r1, [r7, #10]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	4603      	mov	r3, r0
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fc7a 	bl	8005220 <I2C_RequestMemoryWrite>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d052      	beq.n	80049d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e081      	b.n	8004a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f001 f824 	bl	8005988 <I2C_WaitOnTXEFlagUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00d      	beq.n	8004962 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	2b04      	cmp	r3, #4
 800494c:	d107      	bne.n	800495e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800495c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e06b      	b.n	8004a3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b04      	cmp	r3, #4
 800499e:	d11b      	bne.n	80049d8 <HAL_I2C_Mem_Write+0x180>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d017      	beq.n	80049d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1aa      	bne.n	8004936 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f001 f817 	bl	8005a18 <I2C_WaitOnBTFFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00d      	beq.n	8004a0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d107      	bne.n	8004a08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e016      	b.n	8004a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	e000      	b.n	8004a3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a38:	2302      	movs	r3, #2
  }
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	00100002 	.word	0x00100002
 8004a48:	ffff0000 	.word	0xffff0000

08004a4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08c      	sub	sp, #48	@ 0x30
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	4608      	mov	r0, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	817b      	strh	r3, [r7, #10]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	813b      	strh	r3, [r7, #8]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a66:	f7fe ff1d 	bl	80038a4 <HAL_GetTick>
 8004a6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	f040 8214 	bne.w	8004ea2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	2319      	movs	r3, #25
 8004a80:	2201      	movs	r2, #1
 8004a82:	497b      	ldr	r1, [pc, #492]	@ (8004c70 <HAL_I2C_Mem_Read+0x224>)
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fe65 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a90:	2302      	movs	r3, #2
 8004a92:	e207      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_I2C_Mem_Read+0x56>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e200      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d007      	beq.n	8004ac8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ad6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2222      	movs	r2, #34	@ 0x22
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2240      	movs	r2, #64	@ 0x40
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004af2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4a5b      	ldr	r2, [pc, #364]	@ (8004c74 <HAL_I2C_Mem_Read+0x228>)
 8004b08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b0a:	88f8      	ldrh	r0, [r7, #6]
 8004b0c:	893a      	ldrh	r2, [r7, #8]
 8004b0e:	8979      	ldrh	r1, [r7, #10]
 8004b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	4603      	mov	r3, r0
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fc16 	bl	800534c <I2C_RequestMemoryRead>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e1bc      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d113      	bne.n	8004b5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b32:	2300      	movs	r3, #0
 8004b34:	623b      	str	r3, [r7, #32]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	623b      	str	r3, [r7, #32]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e190      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d11b      	bne.n	8004b9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e170      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d11b      	bne.n	8004bda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	e150      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bf0:	e144      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	f200 80f1 	bhi.w	8004dde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d123      	bne.n	8004c4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 ff4d 	bl	8005aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e145      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c4a:	e117      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d14e      	bne.n	8004cf2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	4906      	ldr	r1, [pc, #24]	@ (8004c78 <HAL_I2C_Mem_Read+0x22c>)
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fd78 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e11a      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
 8004c6e:	bf00      	nop
 8004c70:	00100002 	.word	0x00100002
 8004c74:	ffff0000 	.word	0xffff0000
 8004c78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cf0:	e0c4      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	496c      	ldr	r1, [pc, #432]	@ (8004eac <HAL_I2C_Mem_Read+0x460>)
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fd29 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0cb      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d54:	2200      	movs	r2, #0
 8004d56:	4955      	ldr	r1, [pc, #340]	@ (8004eac <HAL_I2C_Mem_Read+0x460>)
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fcfb 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e09d      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ddc:	e04e      	b.n	8004e7c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fe60 	bl	8005aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e058      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d124      	bne.n	8004e7c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d107      	bne.n	8004e4a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e48:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f47f aeb6 	bne.w	8004bf2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3728      	adds	r7, #40	@ 0x28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	00010004 	.word	0x00010004

08004eb0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08c      	sub	sp, #48	@ 0x30
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	4608      	mov	r0, r1
 8004eba:	4611      	mov	r1, r2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	817b      	strh	r3, [r7, #10]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	813b      	strh	r3, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eca:	f7fe fceb 	bl	80038a4 <HAL_GetTick>
 8004ece:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	f040 8172 	bne.w	80051c6 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ee2:	4b93      	ldr	r3, [pc, #588]	@ (8005130 <HAL_I2C_Mem_Read_DMA+0x280>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	08db      	lsrs	r3, r3, #3
 8004ee8:	4a92      	ldr	r2, [pc, #584]	@ (8005134 <HAL_I2C_Mem_Read_DMA+0x284>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	0a1a      	lsrs	r2, r3, #8
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009a      	lsls	r2, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d112      	bne.n	8004f2e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	f043 0220 	orr.w	r2, r3, #32
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e14c      	b.n	80051c8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d0df      	beq.n	8004efc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d101      	bne.n	8004f4a <HAL_I2C_Mem_Read_DMA+0x9a>
 8004f46:	2302      	movs	r3, #2
 8004f48:	e13e      	b.n	80051c8 <HAL_I2C_Mem_Read_DMA+0x318>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d007      	beq.n	8004f70 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2222      	movs	r2, #34	@ 0x22
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2240      	movs	r2, #64	@ 0x40
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4a62      	ldr	r2, [pc, #392]	@ (8005138 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004fb2:	897a      	ldrh	r2, [r7, #10]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004fb8:	893a      	ldrh	r2, [r7, #8]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004fbe:	88fa      	ldrh	r2, [r7, #6]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80cc 	beq.w	800516c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d02d      	beq.n	8005038 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe0:	4a56      	ldr	r2, [pc, #344]	@ (800513c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004fe2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe8:	4a55      	ldr	r2, [pc, #340]	@ (8005140 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004fea:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005000:	2200      	movs	r2, #0
 8005002:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005008:	2200      	movs	r2, #0
 800500a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3310      	adds	r3, #16
 8005016:	4619      	mov	r1, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	461a      	mov	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005022:	f7fe fe2f 	bl	8003c84 <HAL_DMA_Start_IT>
 8005026:	4603      	mov	r3, r0
 8005028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800502c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005030:	2b00      	cmp	r3, #0
 8005032:	f040 8087 	bne.w	8005144 <HAL_I2C_Mem_Read_DMA+0x294>
 8005036:	e013      	b.n	8005060 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0b3      	b.n	80051c8 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005060:	88f8      	ldrh	r0, [r7, #6]
 8005062:	893a      	ldrh	r2, [r7, #8]
 8005064:	8979      	ldrh	r1, [r7, #10]
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	2323      	movs	r3, #35	@ 0x23
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	4603      	mov	r3, r0
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f96b 	bl	800534c <I2C_RequestMemoryRead>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d023      	beq.n	80050c4 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005080:	4618      	mov	r0, r3
 8005082:	f7fe fe57 	bl	8003d34 <HAL_DMA_Abort_IT>
 8005086:	4603      	mov	r3, r0
 8005088:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005090:	2200      	movs	r2, #0
 8005092:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050a2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0201 	bic.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e081      	b.n	80051c8 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d108      	bne.n	80050de <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	e007      	b.n	80050ee <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ee:	2300      	movs	r3, #0
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	61bb      	str	r3, [r7, #24]
 8005102:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800511a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800512a:	605a      	str	r2, [r3, #4]
 800512c:	e049      	b.n	80051c2 <HAL_I2C_Mem_Read_DMA+0x312>
 800512e:	bf00      	nop
 8005130:	2000003c 	.word	0x2000003c
 8005134:	14f8b589 	.word	0x14f8b589
 8005138:	ffff0000 	.word	0xffff0000
 800513c:	0800551d 	.word	0x0800551d
 8005140:	080056db 	.word	0x080056db
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005158:	f043 0210 	orr.w	r2, r3, #16
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e02d      	b.n	80051c8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800516c:	88f8      	ldrh	r0, [r7, #6]
 800516e:	893a      	ldrh	r2, [r7, #8]
 8005170:	8979      	ldrh	r1, [r7, #10]
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	2323      	movs	r3, #35	@ 0x23
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	4603      	mov	r3, r0
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f8e5 	bl	800534c <I2C_RequestMemoryRead>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e01d      	b.n	80051c8 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051b0:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	e000      	b.n	80051c8 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80051c6:	2302      	movs	r3, #2
  }
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3728      	adds	r7, #40	@ 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	4608      	mov	r0, r1
 800522a:	4611      	mov	r1, r2
 800522c:	461a      	mov	r2, r3
 800522e:	4603      	mov	r3, r0
 8005230:	817b      	strh	r3, [r7, #10]
 8005232:	460b      	mov	r3, r1
 8005234:	813b      	strh	r3, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005248:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	2200      	movs	r2, #0
 8005252:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fa7c 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00d      	beq.n	800527e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005270:	d103      	bne.n	800527a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005278:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e05f      	b.n	800533e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800527e:	897b      	ldrh	r3, [r7, #10]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800528c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	6a3a      	ldr	r2, [r7, #32]
 8005292:	492d      	ldr	r1, [pc, #180]	@ (8005348 <I2C_RequestMemoryWrite+0x128>)
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fad7 	bl	8005848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e04c      	b.n	800533e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052bc:	6a39      	ldr	r1, [r7, #32]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fb62 	bl	8005988 <I2C_WaitOnTXEFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00d      	beq.n	80052e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d107      	bne.n	80052e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e02b      	b.n	800533e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d105      	bne.n	80052f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052ec:	893b      	ldrh	r3, [r7, #8]
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	611a      	str	r2, [r3, #16]
 80052f6:	e021      	b.n	800533c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052f8:	893b      	ldrh	r3, [r7, #8]
 80052fa:	0a1b      	lsrs	r3, r3, #8
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005308:	6a39      	ldr	r1, [r7, #32]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fb3c 	bl	8005988 <I2C_WaitOnTXEFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	2b04      	cmp	r3, #4
 800531c:	d107      	bne.n	800532e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800532c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e005      	b.n	800533e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005332:	893b      	ldrh	r3, [r7, #8]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	00010002 	.word	0x00010002

0800534c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	4608      	mov	r0, r1
 8005356:	4611      	mov	r1, r2
 8005358:	461a      	mov	r2, r3
 800535a:	4603      	mov	r3, r0
 800535c:	817b      	strh	r3, [r7, #10]
 800535e:	460b      	mov	r3, r1
 8005360:	813b      	strh	r3, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005374:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005384:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	2200      	movs	r2, #0
 800538e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f9de 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00d      	beq.n	80053ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ac:	d103      	bne.n	80053b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e0aa      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ba:	897b      	ldrh	r3, [r7, #10]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	6a3a      	ldr	r2, [r7, #32]
 80053ce:	4952      	ldr	r1, [pc, #328]	@ (8005518 <I2C_RequestMemoryRead+0x1cc>)
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fa39 	bl	8005848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e097      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f8:	6a39      	ldr	r1, [r7, #32]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 fac4 	bl	8005988 <I2C_WaitOnTXEFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00d      	beq.n	8005422 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540a:	2b04      	cmp	r3, #4
 800540c:	d107      	bne.n	800541e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800541c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e076      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d105      	bne.n	8005434 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005428:	893b      	ldrh	r3, [r7, #8]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	611a      	str	r2, [r3, #16]
 8005432:	e021      	b.n	8005478 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005434:	893b      	ldrh	r3, [r7, #8]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	b29b      	uxth	r3, r3
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005444:	6a39      	ldr	r1, [r7, #32]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 fa9e 	bl	8005988 <I2C_WaitOnTXEFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005456:	2b04      	cmp	r3, #4
 8005458:	d107      	bne.n	800546a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005468:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e050      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800546e:	893b      	ldrh	r3, [r7, #8]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800547a:	6a39      	ldr	r1, [r7, #32]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fa83 	bl	8005988 <I2C_WaitOnTXEFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00d      	beq.n	80054a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548c:	2b04      	cmp	r3, #4
 800548e:	d107      	bne.n	80054a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800549e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e035      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f947 	bl	8005754 <I2C_WaitOnFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00d      	beq.n	80054e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054da:	d103      	bne.n	80054e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e013      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054e8:	897b      	ldrh	r3, [r7, #10]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fa:	6a3a      	ldr	r2, [r7, #32]
 80054fc:	4906      	ldr	r1, [pc, #24]	@ (8005518 <I2C_RequestMemoryRead+0x1cc>)
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f9a2 	bl	8005848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	00010002 	.word	0x00010002

0800551c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005528:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005530:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005538:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800554e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800555c:	2200      	movs	r2, #0
 800555e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556c:	2200      	movs	r2, #0
 800556e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005570:	7cfb      	ldrb	r3, [r7, #19]
 8005572:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005576:	2b21      	cmp	r3, #33	@ 0x21
 8005578:	d007      	beq.n	800558a <I2C_DMAXferCplt+0x6e>
 800557a:	7cfb      	ldrb	r3, [r7, #19]
 800557c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005580:	2b22      	cmp	r3, #34	@ 0x22
 8005582:	d131      	bne.n	80055e8 <I2C_DMAXferCplt+0xcc>
 8005584:	7cbb      	ldrb	r3, [r7, #18]
 8005586:	2b20      	cmp	r3, #32
 8005588:	d12e      	bne.n	80055e8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005598:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2200      	movs	r2, #0
 800559e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80055a0:	7cfb      	ldrb	r3, [r7, #19]
 80055a2:	2b29      	cmp	r3, #41	@ 0x29
 80055a4:	d10a      	bne.n	80055bc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2221      	movs	r2, #33	@ 0x21
 80055aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2228      	movs	r2, #40	@ 0x28
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055b4:	6978      	ldr	r0, [r7, #20]
 80055b6:	f7ff fe15 	bl	80051e4 <HAL_I2C_SlaveTxCpltCallback>
 80055ba:	e00c      	b.n	80055d6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80055bc:	7cfb      	ldrb	r3, [r7, #19]
 80055be:	2b2a      	cmp	r3, #42	@ 0x2a
 80055c0:	d109      	bne.n	80055d6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2222      	movs	r2, #34	@ 0x22
 80055c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2228      	movs	r2, #40	@ 0x28
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055d0:	6978      	ldr	r0, [r7, #20]
 80055d2:	f7ff fe11 	bl	80051f8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80055e4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80055e6:	e074      	b.n	80056d2 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d06e      	beq.n	80056d2 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d107      	bne.n	800560e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800560c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800561c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005624:	d009      	beq.n	800563a <I2C_DMAXferCplt+0x11e>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b08      	cmp	r3, #8
 800562a:	d006      	beq.n	800563a <I2C_DMAXferCplt+0x11e>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005632:	d002      	beq.n	800563a <I2C_DMAXferCplt+0x11e>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b20      	cmp	r3, #32
 8005638:	d107      	bne.n	800564a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005648:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005658:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005668:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2200      	movs	r2, #0
 800566e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005678:	6978      	ldr	r0, [r7, #20]
 800567a:	f7ff fdc7 	bl	800520c <HAL_I2C_ErrorCallback>
}
 800567e:	e028      	b.n	80056d2 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b40      	cmp	r3, #64	@ 0x40
 8005692:	d10a      	bne.n	80056aa <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2200      	movs	r2, #0
 80056a0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80056a2:	6978      	ldr	r0, [r7, #20]
 80056a4:	f7fb ff9c 	bl	80015e0 <HAL_I2C_MemRxCpltCallback>
}
 80056a8:	e013      	b.n	80056d2 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d002      	beq.n	80056be <I2C_DMAXferCplt+0x1a2>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d103      	bne.n	80056c6 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80056c4:	e002      	b.n	80056cc <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2212      	movs	r2, #18
 80056ca:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80056cc:	6978      	ldr	r0, [r7, #20]
 80056ce:	f7ff fd7f 	bl	80051d0 <HAL_I2C_MasterRxCpltCallback>
}
 80056d2:	bf00      	nop
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f4:	2200      	movs	r2, #0
 80056f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005704:	2200      	movs	r2, #0
 8005706:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7fe fcbf 	bl	800408c <HAL_DMA_GetError>
 800570e:	4603      	mov	r3, r0
 8005710:	2b02      	cmp	r3, #2
 8005712:	d01b      	beq.n	800574c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005722:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	f043 0210 	orr.w	r2, r3, #16
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f7ff fd60 	bl	800520c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4613      	mov	r3, r2
 8005762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005764:	e048      	b.n	80057f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576c:	d044      	beq.n	80057f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576e:	f7fe f899 	bl	80038a4 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d302      	bcc.n	8005784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d139      	bne.n	80057f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	0c1b      	lsrs	r3, r3, #16
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b01      	cmp	r3, #1
 800578c:	d10d      	bne.n	80057aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	43da      	mvns	r2, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	4013      	ands	r3, r2
 800579a:	b29b      	uxth	r3, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	bf0c      	ite	eq
 80057a0:	2301      	moveq	r3, #1
 80057a2:	2300      	movne	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	461a      	mov	r2, r3
 80057a8:	e00c      	b.n	80057c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	43da      	mvns	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	4013      	ands	r3, r2
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bf0c      	ite	eq
 80057bc:	2301      	moveq	r3, #1
 80057be:	2300      	movne	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d116      	bne.n	80057f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e4:	f043 0220 	orr.w	r2, r3, #32
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e023      	b.n	8005840 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	0c1b      	lsrs	r3, r3, #16
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d10d      	bne.n	800581e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	43da      	mvns	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4013      	ands	r3, r2
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	bf0c      	ite	eq
 8005814:	2301      	moveq	r3, #1
 8005816:	2300      	movne	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	e00c      	b.n	8005838 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	43da      	mvns	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	429a      	cmp	r2, r3
 800583c:	d093      	beq.n	8005766 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005856:	e071      	b.n	800593c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005866:	d123      	bne.n	80058b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005876:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005880:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589c:	f043 0204 	orr.w	r2, r3, #4
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e067      	b.n	8005980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b6:	d041      	beq.n	800593c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b8:	f7fd fff4 	bl	80038a4 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d302      	bcc.n	80058ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d136      	bne.n	800593c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	0c1b      	lsrs	r3, r3, #16
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d10c      	bne.n	80058f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	43da      	mvns	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4013      	ands	r3, r2
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bf14      	ite	ne
 80058ea:	2301      	movne	r3, #1
 80058ec:	2300      	moveq	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	e00b      	b.n	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	43da      	mvns	r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4013      	ands	r3, r2
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d016      	beq.n	800593c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005928:	f043 0220 	orr.w	r2, r3, #32
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e021      	b.n	8005980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	0c1b      	lsrs	r3, r3, #16
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b01      	cmp	r3, #1
 8005944:	d10c      	bne.n	8005960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	43da      	mvns	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4013      	ands	r3, r2
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	bf14      	ite	ne
 8005958:	2301      	movne	r3, #1
 800595a:	2300      	moveq	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	e00b      	b.n	8005978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	43da      	mvns	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	bf14      	ite	ne
 8005972:	2301      	movne	r3, #1
 8005974:	2300      	moveq	r3, #0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	f47f af6d 	bne.w	8005858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005994:	e034      	b.n	8005a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f8e3 	bl	8005b62 <I2C_IsAcknowledgeFailed>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e034      	b.n	8005a10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d028      	beq.n	8005a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ae:	f7fd ff79 	bl	80038a4 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d302      	bcc.n	80059c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d11d      	bne.n	8005a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ce:	2b80      	cmp	r3, #128	@ 0x80
 80059d0:	d016      	beq.n	8005a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ec:	f043 0220 	orr.w	r2, r3, #32
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e007      	b.n	8005a10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0a:	2b80      	cmp	r3, #128	@ 0x80
 8005a0c:	d1c3      	bne.n	8005996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a24:	e034      	b.n	8005a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f89b 	bl	8005b62 <I2C_IsAcknowledgeFailed>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e034      	b.n	8005aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d028      	beq.n	8005a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a3e:	f7fd ff31 	bl	80038a4 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d302      	bcc.n	8005a54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d11d      	bne.n	8005a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d016      	beq.n	8005a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7c:	f043 0220 	orr.w	r2, r3, #32
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e007      	b.n	8005aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d1c3      	bne.n	8005a26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ab4:	e049      	b.n	8005b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	d119      	bne.n	8005af8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0210 	mvn.w	r2, #16
 8005acc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e030      	b.n	8005b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af8:	f7fd fed4 	bl	80038a4 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d302      	bcc.n	8005b0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d11d      	bne.n	8005b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b18:	2b40      	cmp	r3, #64	@ 0x40
 8005b1a:	d016      	beq.n	8005b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b36:	f043 0220 	orr.w	r2, r3, #32
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e007      	b.n	8005b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b54:	2b40      	cmp	r3, #64	@ 0x40
 8005b56:	d1ae      	bne.n	8005ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b78:	d11b      	bne.n	8005bb2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b82:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	f043 0204 	orr.w	r2, r3, #4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e101      	b.n	8005dd6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d106      	bne.n	8005bf2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f006 fe5f 	bl	800c8b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c00:	d102      	bne.n	8005c08 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f003 fa46 	bl	800909e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6818      	ldr	r0, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	7c1a      	ldrb	r2, [r3, #16]
 8005c1a:	f88d 2000 	strb.w	r2, [sp]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c22:	f003 f925 	bl	8008e70 <USB_CoreInit>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0ce      	b.n	8005dd6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f003 fa3e 	bl	80090c0 <USB_SetCurrentMode>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e0bf      	b.n	8005dd6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]
 8005c5a:	e04a      	b.n	8005cf2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c5c:	7bfa      	ldrb	r2, [r7, #15]
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	4613      	mov	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	3315      	adds	r3, #21
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c70:	7bfa      	ldrb	r2, [r7, #15]
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	4613      	mov	r3, r2
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	3314      	adds	r3, #20
 8005c80:	7bfa      	ldrb	r2, [r7, #15]
 8005c82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c84:	7bfa      	ldrb	r2, [r7, #15]
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	b298      	uxth	r0, r3
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	332e      	adds	r3, #46	@ 0x2e
 8005c98:	4602      	mov	r2, r0
 8005c9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c9c:	7bfa      	ldrb	r2, [r7, #15]
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	3318      	adds	r3, #24
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005cb0:	7bfa      	ldrb	r2, [r7, #15]
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	331c      	adds	r3, #28
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005cc4:	7bfa      	ldrb	r2, [r7, #15]
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	3320      	adds	r3, #32
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005cd8:	7bfa      	ldrb	r2, [r7, #15]
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	3324      	adds	r3, #36	@ 0x24
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	791b      	ldrb	r3, [r3, #4]
 8005cf6:	7bfa      	ldrb	r2, [r7, #15]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d3af      	bcc.n	8005c5c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	73fb      	strb	r3, [r7, #15]
 8005d00:	e044      	b.n	8005d8c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d02:	7bfa      	ldrb	r2, [r7, #15]
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	4613      	mov	r3, r2
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d18:	7bfa      	ldrb	r2, [r7, #15]
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	4413      	add	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005d2a:	7bfa      	ldrb	r2, [r7, #15]
 8005d2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d2e:	7bfa      	ldrb	r2, [r7, #15]
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	4613      	mov	r3, r2
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	440b      	add	r3, r1
 8005d3c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005d40:	2200      	movs	r2, #0
 8005d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d44:	7bfa      	ldrb	r2, [r7, #15]
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	440b      	add	r3, r1
 8005d52:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d5a:	7bfa      	ldrb	r2, [r7, #15]
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	440b      	add	r3, r1
 8005d68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d70:	7bfa      	ldrb	r2, [r7, #15]
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	73fb      	strb	r3, [r7, #15]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	791b      	ldrb	r3, [r3, #4]
 8005d90:	7bfa      	ldrb	r2, [r7, #15]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d3b5      	bcc.n	8005d02 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6818      	ldr	r0, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	7c1a      	ldrb	r2, [r3, #16]
 8005d9e:	f88d 2000 	strb.w	r2, [sp]
 8005da2:	3304      	adds	r3, #4
 8005da4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005da6:	f003 f9d7 	bl	8009158 <USB_DevInit>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e00c      	b.n	8005dd6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f004 fa21 	bl	800a216 <USB_DevDisconnect>

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_PCD_Start+0x1c>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e022      	b.n	8005e40 <HAL_PCD_Start+0x62>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d105      	bne.n	8005e22 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f003 f928 	bl	800907c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f004 f9cf 	bl	800a1d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005e48:	b590      	push	{r4, r7, lr}
 8005e4a:	b08d      	sub	sp, #52	@ 0x34
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f004 fa8d 	bl	800a37e <USB_GetMode>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f040 848c 	bne.w	8006784 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f004 f9f1 	bl	800a258 <USB_ReadInterrupts>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8482 	beq.w	8006782 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	0a1b      	lsrs	r3, r3, #8
 8005e88:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f004 f9de 	bl	800a258 <USB_ReadInterrupts>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d107      	bne.n	8005eb6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695a      	ldr	r2, [r3, #20]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f002 0202 	and.w	r2, r2, #2
 8005eb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f004 f9cc 	bl	800a258 <USB_ReadInterrupts>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f003 0310 	and.w	r3, r3, #16
 8005ec6:	2b10      	cmp	r3, #16
 8005ec8:	d161      	bne.n	8005f8e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699a      	ldr	r2, [r3, #24]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0210 	bic.w	r2, r2, #16
 8005ed8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f003 020f 	and.w	r2, r3, #15
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	0c5b      	lsrs	r3, r3, #17
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d124      	bne.n	8005f50 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d035      	beq.n	8005f7e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	091b      	lsrs	r3, r3, #4
 8005f1a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005f1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	461a      	mov	r2, r3
 8005f24:	6a38      	ldr	r0, [r7, #32]
 8005f26:	f004 f803 	bl	8009f30 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	091b      	lsrs	r3, r3, #4
 8005f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f36:	441a      	add	r2, r3
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	695a      	ldr	r2, [r3, #20]
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	091b      	lsrs	r3, r3, #4
 8005f44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f48:	441a      	add	r2, r3
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	615a      	str	r2, [r3, #20]
 8005f4e:	e016      	b.n	8005f7e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	0c5b      	lsrs	r3, r3, #17
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	2b06      	cmp	r3, #6
 8005f5a:	d110      	bne.n	8005f7e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f62:	2208      	movs	r2, #8
 8005f64:	4619      	mov	r1, r3
 8005f66:	6a38      	ldr	r0, [r7, #32]
 8005f68:	f003 ffe2 	bl	8009f30 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	695a      	ldr	r2, [r3, #20]
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	091b      	lsrs	r3, r3, #4
 8005f74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f78:	441a      	add	r2, r3
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	699a      	ldr	r2, [r3, #24]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0210 	orr.w	r2, r2, #16
 8005f8c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f004 f960 	bl	800a258 <USB_ReadInterrupts>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f9e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005fa2:	f040 80a7 	bne.w	80060f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f004 f965 	bl	800a27e <USB_ReadDevAllOutEpInterrupt>
 8005fb4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005fb6:	e099      	b.n	80060ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 808e 	beq.w	80060e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f004 f989 	bl	800a2e6 <USB_ReadDevOutEPInterrupt>
 8005fd4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00c      	beq.n	8005ffa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fec:	461a      	mov	r2, r3
 8005fee:	2301      	movs	r3, #1
 8005ff0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005ff2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fea3 	bl	8006d40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00c      	beq.n	800601e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006010:	461a      	mov	r2, r3
 8006012:	2308      	movs	r3, #8
 8006014:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006016:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 ff79 	bl	8006f10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f003 0310 	and.w	r3, r3, #16
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006034:	461a      	mov	r2, r3
 8006036:	2310      	movs	r3, #16
 8006038:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d030      	beq.n	80060a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800604c:	2b80      	cmp	r3, #128	@ 0x80
 800604e:	d109      	bne.n	8006064 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800605e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006062:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006066:	4613      	mov	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	4413      	add	r3, r2
 8006076:	3304      	adds	r3, #4
 8006078:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	78db      	ldrb	r3, [r3, #3]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d108      	bne.n	8006094 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2200      	movs	r2, #0
 8006086:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	b2db      	uxtb	r3, r3
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f006 fd14 	bl	800cabc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a0:	461a      	mov	r2, r3
 80060a2:	2302      	movs	r3, #2
 80060a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060bc:	461a      	mov	r2, r3
 80060be:	2320      	movs	r3, #32
 80060c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d009      	beq.n	80060e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80060cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d8:	461a      	mov	r2, r3
 80060da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	3301      	adds	r3, #1
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80060e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e8:	085b      	lsrs	r3, r3, #1
 80060ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80060ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f47f af62 	bne.w	8005fb8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f004 f8ad 	bl	800a258 <USB_ReadInterrupts>
 80060fe:	4603      	mov	r3, r0
 8006100:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006104:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006108:	f040 80db 	bne.w	80062c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4618      	mov	r0, r3
 8006112:	f004 f8ce 	bl	800a2b2 <USB_ReadDevAllInEpInterrupt>
 8006116:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800611c:	e0cd      	b.n	80062ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 80c2 	beq.w	80062ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	4611      	mov	r1, r2
 8006134:	4618      	mov	r0, r3
 8006136:	f004 f8f4 	bl	800a322 <USB_ReadDevInEPInterrupt>
 800613a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d057      	beq.n	80061f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	2201      	movs	r2, #1
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800615a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	43db      	mvns	r3, r3
 8006160:	69f9      	ldr	r1, [r7, #28]
 8006162:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006166:	4013      	ands	r3, r2
 8006168:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006176:	461a      	mov	r2, r3
 8006178:	2301      	movs	r3, #1
 800617a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	799b      	ldrb	r3, [r3, #6]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d132      	bne.n	80061ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006188:	4613      	mov	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	3320      	adds	r3, #32
 8006194:	6819      	ldr	r1, [r3, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800619a:	4613      	mov	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4403      	add	r3, r0
 80061a4:	331c      	adds	r3, #28
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4419      	add	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ae:	4613      	mov	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4403      	add	r3, r0
 80061b8:	3320      	adds	r3, #32
 80061ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d113      	bne.n	80061ea <HAL_PCD_IRQHandler+0x3a2>
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c6:	4613      	mov	r3, r2
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	3324      	adds	r3, #36	@ 0x24
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d108      	bne.n	80061ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061e2:	461a      	mov	r2, r3
 80061e4:	2101      	movs	r1, #1
 80061e6:	f004 f8fb 	bl	800a3e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f006 fbde 	bl	800c9b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800620c:	461a      	mov	r2, r3
 800620e:	2308      	movs	r3, #8
 8006210:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b00      	cmp	r3, #0
 800621a:	d008      	beq.n	800622e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006228:	461a      	mov	r2, r3
 800622a:	2310      	movs	r3, #16
 800622c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d008      	beq.n	800624a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006244:	461a      	mov	r2, r3
 8006246:	2340      	movs	r3, #64	@ 0x40
 8006248:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d023      	beq.n	800629c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006254:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006256:	6a38      	ldr	r0, [r7, #32]
 8006258:	f003 f8e2 	bl	8009420 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800625c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800625e:	4613      	mov	r3, r2
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	3310      	adds	r3, #16
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	4413      	add	r3, r2
 800626c:	3304      	adds	r3, #4
 800626e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	78db      	ldrb	r3, [r3, #3]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d108      	bne.n	800628a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2200      	movs	r2, #0
 800627c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	b2db      	uxtb	r3, r3
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f006 fc2b 	bl	800cae0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006296:	461a      	mov	r2, r3
 8006298:	2302      	movs	r3, #2
 800629a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80062a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fcbd 	bl	8006c28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	3301      	adds	r3, #1
 80062b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80062b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b6:	085b      	lsrs	r3, r3, #1
 80062b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80062ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f47f af2e 	bne.w	800611e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f003 ffc6 	bl	800a258 <USB_ReadInterrupts>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062d6:	d122      	bne.n	800631e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062e6:	f023 0301 	bic.w	r3, r3, #1
 80062ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d108      	bne.n	8006308 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80062fe:	2100      	movs	r1, #0
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fea3 	bl	800704c <HAL_PCDEx_LPM_Callback>
 8006306:	e002      	b.n	800630e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f006 fbc9 	bl	800caa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695a      	ldr	r2, [r3, #20]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800631c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f003 ff98 	bl	800a258 <USB_ReadInterrupts>
 8006328:	4603      	mov	r3, r0
 800632a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800632e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006332:	d112      	bne.n	800635a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b01      	cmp	r3, #1
 8006342:	d102      	bne.n	800634a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f006 fb85 	bl	800ca54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695a      	ldr	r2, [r3, #20]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006358:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	f003 ff7a 	bl	800a258 <USB_ReadInterrupts>
 8006364:	4603      	mov	r3, r0
 8006366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800636a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800636e:	f040 80b7 	bne.w	80064e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2110      	movs	r1, #16
 800638c:	4618      	mov	r0, r3
 800638e:	f003 f847 	bl	8009420 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006392:	2300      	movs	r3, #0
 8006394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006396:	e046      	b.n	8006426 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a4:	461a      	mov	r2, r3
 80063a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80063cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d8:	461a      	mov	r2, r3
 80063da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063f0:	0151      	lsls	r1, r2, #5
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	440a      	add	r2, r1
 80063f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006410:	0151      	lsls	r1, r2, #5
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	440a      	add	r2, r1
 8006416:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800641a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800641e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006422:	3301      	adds	r3, #1
 8006424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	791b      	ldrb	r3, [r3, #4]
 800642a:	461a      	mov	r2, r3
 800642c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642e:	4293      	cmp	r3, r2
 8006430:	d3b2      	bcc.n	8006398 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	69fa      	ldr	r2, [r7, #28]
 800643c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006440:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006444:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	7bdb      	ldrb	r3, [r3, #15]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d016      	beq.n	800647c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800645e:	f043 030b 	orr.w	r3, r3, #11
 8006462:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800646c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006474:	f043 030b 	orr.w	r3, r3, #11
 8006478:	6453      	str	r3, [r2, #68]	@ 0x44
 800647a:	e015      	b.n	80064a8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800648a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800648e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006492:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064a2:	f043 030b 	orr.w	r3, r3, #11
 80064a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80064ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6818      	ldr	r0, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80064ca:	461a      	mov	r2, r3
 80064cc:	f003 ff88 	bl	800a3e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695a      	ldr	r2, [r3, #20]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80064de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f003 feb7 	bl	800a258 <USB_ReadInterrupts>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064f4:	d123      	bne.n	800653e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f003 ff4d 	bl	800a39a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4618      	mov	r0, r3
 8006506:	f003 f804 	bl	8009512 <USB_GetDevSpeed>
 800650a:	4603      	mov	r3, r0
 800650c:	461a      	mov	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681c      	ldr	r4, [r3, #0]
 8006516:	f001 fa09 	bl	800792c <HAL_RCC_GetHCLKFreq>
 800651a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006520:	461a      	mov	r2, r3
 8006522:	4620      	mov	r0, r4
 8006524:	f002 fd08 	bl	8008f38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f006 fa6a 	bl	800ca02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695a      	ldr	r2, [r3, #20]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800653c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f003 fe88 	bl	800a258 <USB_ReadInterrupts>
 8006548:	4603      	mov	r3, r0
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b08      	cmp	r3, #8
 8006550:	d10a      	bne.n	8006568 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f006 fa47 	bl	800c9e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f002 0208 	and.w	r2, r2, #8
 8006566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4618      	mov	r0, r3
 800656e:	f003 fe73 	bl	800a258 <USB_ReadInterrupts>
 8006572:	4603      	mov	r3, r0
 8006574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006578:	2b80      	cmp	r3, #128	@ 0x80
 800657a:	d123      	bne.n	80065c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006588:	2301      	movs	r3, #1
 800658a:	627b      	str	r3, [r7, #36]	@ 0x24
 800658c:	e014      	b.n	80065b8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006592:	4613      	mov	r3, r2
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d105      	bne.n	80065b2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fb0a 	bl	8006bc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b4:	3301      	adds	r3, #1
 80065b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	791b      	ldrb	r3, [r3, #4]
 80065bc:	461a      	mov	r2, r3
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d3e4      	bcc.n	800658e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f003 fe45 	bl	800a258 <USB_ReadInterrupts>
 80065ce:	4603      	mov	r3, r0
 80065d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065d8:	d13c      	bne.n	8006654 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065da:	2301      	movs	r3, #1
 80065dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80065de:	e02b      	b.n	8006638 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065f4:	4613      	mov	r3, r2
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	4413      	add	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	3318      	adds	r3, #24
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d115      	bne.n	8006632 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006606:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006608:	2b00      	cmp	r3, #0
 800660a:	da12      	bge.n	8006632 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006610:	4613      	mov	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	3317      	adds	r3, #23
 800661c:	2201      	movs	r2, #1
 800661e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006628:	b2db      	uxtb	r3, r3
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 faca 	bl	8006bc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	3301      	adds	r3, #1
 8006636:	627b      	str	r3, [r7, #36]	@ 0x24
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	791b      	ldrb	r3, [r3, #4]
 800663c:	461a      	mov	r2, r3
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	4293      	cmp	r3, r2
 8006642:	d3cd      	bcc.n	80065e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695a      	ldr	r2, [r3, #20]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f003 fdfd 	bl	800a258 <USB_ReadInterrupts>
 800665e:	4603      	mov	r3, r0
 8006660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006664:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006668:	d156      	bne.n	8006718 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800666a:	2301      	movs	r3, #1
 800666c:	627b      	str	r3, [r7, #36]	@ 0x24
 800666e:	e045      	b.n	80066fc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006684:	4613      	mov	r3, r2
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d12e      	bne.n	80066f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006698:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800669a:	2b00      	cmp	r3, #0
 800669c:	da2b      	bge.n	80066f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80066aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d121      	bne.n	80066f6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066b6:	4613      	mov	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	440b      	add	r3, r1
 80066c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80066c4:	2201      	movs	r2, #1
 80066c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066f2:	6053      	str	r3, [r2, #4]
            break;
 80066f4:	e008      	b.n	8006708 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f8:	3301      	adds	r3, #1
 80066fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	791b      	ldrb	r3, [r3, #4]
 8006700:	461a      	mov	r2, r3
 8006702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006704:	4293      	cmp	r3, r2
 8006706:	d3b3      	bcc.n	8006670 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695a      	ldr	r2, [r3, #20]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006716:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4618      	mov	r0, r3
 800671e:	f003 fd9b 	bl	800a258 <USB_ReadInterrupts>
 8006722:	4603      	mov	r3, r0
 8006724:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800672c:	d10a      	bne.n	8006744 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f006 f9e8 	bl	800cb04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	f003 fd85 	bl	800a258 <USB_ReadInterrupts>
 800674e:	4603      	mov	r3, r0
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b04      	cmp	r3, #4
 8006756:	d115      	bne.n	8006784 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f006 f9d8 	bl	800cb20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6859      	ldr	r1, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	430a      	orrs	r2, r1
 800677e:	605a      	str	r2, [r3, #4]
 8006780:	e000      	b.n	8006784 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006782:	bf00      	nop
    }
  }
}
 8006784:	3734      	adds	r7, #52	@ 0x34
 8006786:	46bd      	mov	sp, r7
 8006788:	bd90      	pop	{r4, r7, pc}

0800678a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b082      	sub	sp, #8
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800679c:	2b01      	cmp	r3, #1
 800679e:	d101      	bne.n	80067a4 <HAL_PCD_SetAddress+0x1a>
 80067a0:	2302      	movs	r3, #2
 80067a2:	e012      	b.n	80067ca <HAL_PCD_SetAddress+0x40>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	78fa      	ldrb	r2, [r7, #3]
 80067b8:	4611      	mov	r1, r2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f003 fce4 	bl	800a188 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	4608      	mov	r0, r1
 80067dc:	4611      	mov	r1, r2
 80067de:	461a      	mov	r2, r3
 80067e0:	4603      	mov	r3, r0
 80067e2:	70fb      	strb	r3, [r7, #3]
 80067e4:	460b      	mov	r3, r1
 80067e6:	803b      	strh	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80067f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	da0f      	bge.n	8006818 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	f003 020f 	and.w	r2, r3, #15
 80067fe:	4613      	mov	r3, r2
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	3310      	adds	r3, #16
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	4413      	add	r3, r2
 800680c:	3304      	adds	r3, #4
 800680e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	705a      	strb	r2, [r3, #1]
 8006816:	e00f      	b.n	8006838 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	f003 020f 	and.w	r2, r3, #15
 800681e:	4613      	mov	r3, r2
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	4413      	add	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	3304      	adds	r3, #4
 8006830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	b2da      	uxtb	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006844:	883b      	ldrh	r3, [r7, #0]
 8006846:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	78ba      	ldrb	r2, [r7, #2]
 8006852:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d004      	beq.n	8006866 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006866:	78bb      	ldrb	r3, [r7, #2]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d102      	bne.n	8006872 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_PCD_EP_Open+0xae>
 800687c:	2302      	movs	r3, #2
 800687e:	e00e      	b.n	800689e <HAL_PCD_EP_Open+0xcc>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68f9      	ldr	r1, [r7, #12]
 800688e:	4618      	mov	r0, r3
 8006890:	f002 fe64 	bl	800955c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800689c:	7afb      	ldrb	r3, [r7, #11]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80068b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	da0f      	bge.n	80068da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	f003 020f 	and.w	r2, r3, #15
 80068c0:	4613      	mov	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	3310      	adds	r3, #16
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	4413      	add	r3, r2
 80068ce:	3304      	adds	r3, #4
 80068d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	705a      	strb	r2, [r3, #1]
 80068d8:	e00f      	b.n	80068fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	f003 020f 	and.w	r2, r3, #15
 80068e0:	4613      	mov	r3, r2
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	4413      	add	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	4413      	add	r3, r2
 80068f0:	3304      	adds	r3, #4
 80068f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80068fa:	78fb      	ldrb	r3, [r7, #3]
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	b2da      	uxtb	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <HAL_PCD_EP_Close+0x6e>
 8006910:	2302      	movs	r3, #2
 8006912:	e00e      	b.n	8006932 <HAL_PCD_EP_Close+0x8c>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68f9      	ldr	r1, [r7, #12]
 8006922:	4618      	mov	r0, r3
 8006924:	f002 fea2 	bl	800966c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
 8006946:	460b      	mov	r3, r1
 8006948:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800694a:	7afb      	ldrb	r3, [r7, #11]
 800694c:	f003 020f 	and.w	r2, r3, #15
 8006950:	4613      	mov	r3, r2
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	3304      	adds	r3, #4
 8006962:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2200      	movs	r2, #0
 8006974:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2200      	movs	r2, #0
 800697a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800697c:	7afb      	ldrb	r3, [r7, #11]
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	b2da      	uxtb	r2, r3
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	799b      	ldrb	r3, [r3, #6]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d102      	bne.n	8006996 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	799b      	ldrb	r3, [r3, #6]
 800699e:	461a      	mov	r2, r3
 80069a0:	6979      	ldr	r1, [r7, #20]
 80069a2:	f002 ff3f 	bl	8009824 <USB_EPStartXfer>

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	f003 020f 	and.w	r2, r3, #15
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80069d2:	681b      	ldr	r3, [r3, #0]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	607a      	str	r2, [r7, #4]
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	460b      	mov	r3, r1
 80069ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069f0:	7afb      	ldrb	r3, [r7, #11]
 80069f2:	f003 020f 	and.w	r2, r3, #15
 80069f6:	4613      	mov	r3, r2
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	3310      	adds	r3, #16
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	3304      	adds	r3, #4
 8006a06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2200      	movs	r2, #0
 8006a18:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	799b      	ldrb	r3, [r3, #6]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d102      	bne.n	8006a3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	799b      	ldrb	r3, [r3, #6]
 8006a42:	461a      	mov	r2, r3
 8006a44:	6979      	ldr	r1, [r7, #20]
 8006a46:	f002 feed 	bl	8009824 <USB_EPStartXfer>

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	7912      	ldrb	r2, [r2, #4]
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d901      	bls.n	8006a72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e04f      	b.n	8006b12 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	da0f      	bge.n	8006a9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a7a:	78fb      	ldrb	r3, [r7, #3]
 8006a7c:	f003 020f 	and.w	r2, r3, #15
 8006a80:	4613      	mov	r3, r2
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	3310      	adds	r3, #16
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	3304      	adds	r3, #4
 8006a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	705a      	strb	r2, [r3, #1]
 8006a98:	e00d      	b.n	8006ab6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	4413      	add	r3, r2
 8006aac:	3304      	adds	r3, #4
 8006aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <HAL_PCD_EP_SetStall+0x82>
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	e01d      	b.n	8006b12 <HAL_PCD_EP_SetStall+0xbe>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68f9      	ldr	r1, [r7, #12]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f003 fa7b 	bl	8009fe0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d109      	bne.n	8006b08 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	7999      	ldrb	r1, [r3, #6]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006b02:	461a      	mov	r2, r3
 8006b04:	f003 fc6c 	bl	800a3e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	7912      	ldrb	r2, [r2, #4]
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d901      	bls.n	8006b38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e042      	b.n	8006bbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	da0f      	bge.n	8006b60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	f003 020f 	and.w	r2, r3, #15
 8006b46:	4613      	mov	r3, r2
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	3310      	adds	r3, #16
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	4413      	add	r3, r2
 8006b54:	3304      	adds	r3, #4
 8006b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	705a      	strb	r2, [r3, #1]
 8006b5e:	e00f      	b.n	8006b80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	f003 020f 	and.w	r2, r3, #15
 8006b66:	4613      	mov	r3, r2
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	4413      	add	r3, r2
 8006b76:	3304      	adds	r3, #4
 8006b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	f003 030f 	and.w	r3, r3, #15
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_PCD_EP_ClrStall+0x86>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e00e      	b.n	8006bbe <HAL_PCD_EP_ClrStall+0xa4>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68f9      	ldr	r1, [r7, #12]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f003 fa84 	bl	800a0bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	da0c      	bge.n	8006bf4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bda:	78fb      	ldrb	r3, [r7, #3]
 8006bdc:	f003 020f 	and.w	r2, r3, #15
 8006be0:	4613      	mov	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	3310      	adds	r3, #16
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	4413      	add	r3, r2
 8006bee:	3304      	adds	r3, #4
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	e00c      	b.n	8006c0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	f003 020f 	and.w	r2, r3, #15
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	4413      	add	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	4413      	add	r3, r2
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68f9      	ldr	r1, [r7, #12]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f003 f8a3 	bl	8009d60 <USB_EPStopXfer>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006c1e:	7afb      	ldrb	r3, [r7, #11]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	@ 0x28
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	3310      	adds	r3, #16
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	695a      	ldr	r2, [r3, #20]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d901      	bls.n	8006c60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e06b      	b.n	8006d38 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	691a      	ldr	r2, [r3, #16]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d902      	bls.n	8006c7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	3303      	adds	r3, #3
 8006c80:	089b      	lsrs	r3, r3, #2
 8006c82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c84:	e02a      	b.n	8006cdc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	691a      	ldr	r2, [r3, #16]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d902      	bls.n	8006ca2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	3303      	adds	r3, #3
 8006ca6:	089b      	lsrs	r3, r3, #2
 8006ca8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	68d9      	ldr	r1, [r3, #12]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	6978      	ldr	r0, [r7, #20]
 8006cc0:	f003 f8f8 	bl	8009eb4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	441a      	add	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	695a      	ldr	r2, [r3, #20]
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	441a      	add	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d809      	bhi.n	8006d06 <PCD_WriteEmptyTxFifo+0xde>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	695a      	ldr	r2, [r3, #20]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d203      	bcs.n	8006d06 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1bf      	bne.n	8006c86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	691a      	ldr	r2, [r3, #16]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d811      	bhi.n	8006d36 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	2201      	movs	r2, #1
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	43db      	mvns	r3, r3
 8006d2c:	6939      	ldr	r1, [r7, #16]
 8006d2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d32:	4013      	ands	r3, r2
 8006d34:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3720      	adds	r7, #32
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	333c      	adds	r3, #60	@ 0x3c
 8006d58:	3304      	adds	r3, #4
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	799b      	ldrb	r3, [r3, #6]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d17b      	bne.n	8006e6e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d015      	beq.n	8006dac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	4a61      	ldr	r2, [pc, #388]	@ (8006f08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	f240 80b9 	bls.w	8006efc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 80b3 	beq.w	8006efc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da2:	461a      	mov	r2, r3
 8006da4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006da8:	6093      	str	r3, [r2, #8]
 8006daa:	e0a7      	b.n	8006efc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	2320      	movs	r3, #32
 8006dc6:	6093      	str	r3, [r2, #8]
 8006dc8:	e098      	b.n	8006efc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f040 8093 	bne.w	8006efc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8006f08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d90f      	bls.n	8006dfe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00a      	beq.n	8006dfe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df4:	461a      	mov	r2, r3
 8006df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dfa:	6093      	str	r3, [r2, #8]
 8006dfc:	e07e      	b.n	8006efc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	4613      	mov	r3, r2
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	4413      	add	r3, r2
 8006e10:	3304      	adds	r3, #4
 8006e12:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a1a      	ldr	r2, [r3, #32]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	0159      	lsls	r1, r3, #5
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	440b      	add	r3, r1
 8006e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e2a:	1ad2      	subs	r2, r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d114      	bne.n	8006e60 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d109      	bne.n	8006e52 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6818      	ldr	r0, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e48:	461a      	mov	r2, r3
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	f003 fac8 	bl	800a3e0 <USB_EP0_OutStart>
 8006e50:	e006      	b.n	8006e60 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	441a      	add	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f005 fd88 	bl	800c97c <HAL_PCD_DataOutStageCallback>
 8006e6c:	e046      	b.n	8006efc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	4a26      	ldr	r2, [pc, #152]	@ (8006f0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d124      	bne.n	8006ec0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e92:	6093      	str	r3, [r2, #8]
 8006e94:	e032      	b.n	8006efc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d008      	beq.n	8006eb2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eac:	461a      	mov	r2, r3
 8006eae:	2320      	movs	r3, #32
 8006eb0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f005 fd5f 	bl	800c97c <HAL_PCD_DataOutStageCallback>
 8006ebe:	e01d      	b.n	8006efc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d114      	bne.n	8006ef0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d108      	bne.n	8006ef0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6818      	ldr	r0, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ee8:	461a      	mov	r2, r3
 8006eea:	2100      	movs	r1, #0
 8006eec:	f003 fa78 	bl	800a3e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f005 fd40 	bl	800c97c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3720      	adds	r7, #32
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	4f54300a 	.word	0x4f54300a
 8006f0c:	4f54310a 	.word	0x4f54310a

08006f10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	333c      	adds	r3, #60	@ 0x3c
 8006f28:	3304      	adds	r3, #4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4a15      	ldr	r2, [pc, #84]	@ (8006f98 <PCD_EP_OutSetupPacket_int+0x88>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d90e      	bls.n	8006f64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d009      	beq.n	8006f64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f005 fcf7 	bl	800c958 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8006f98 <PCD_EP_OutSetupPacket_int+0x88>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d90c      	bls.n	8006f8c <PCD_EP_OutSetupPacket_int+0x7c>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	799b      	ldrb	r3, [r3, #6]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d108      	bne.n	8006f8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f84:	461a      	mov	r2, r3
 8006f86:	2101      	movs	r1, #1
 8006f88:	f003 fa2a 	bl	800a3e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	4f54300a 	.word	0x4f54300a

08006f9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d107      	bne.n	8006fca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006fba:	883b      	ldrh	r3, [r7, #0]
 8006fbc:	0419      	lsls	r1, r3, #16
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8006fc8:	e028      	b.n	800701c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd0:	0c1b      	lsrs	r3, r3, #16
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	e00d      	b.n	8006ffa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	3340      	adds	r3, #64	@ 0x40
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	0c1b      	lsrs	r3, r3, #16
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	73fb      	strb	r3, [r7, #15]
 8006ffa:	7bfa      	ldrb	r2, [r7, #15]
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	429a      	cmp	r2, r3
 8007002:	d3ec      	bcc.n	8006fde <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007004:	883b      	ldrh	r3, [r7, #0]
 8007006:	0418      	lsls	r0, r3, #16
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6819      	ldr	r1, [r3, #0]
 800700c:	78fb      	ldrb	r3, [r7, #3]
 800700e:	3b01      	subs	r3, #1
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	4302      	orrs	r2, r0
 8007014:	3340      	adds	r3, #64	@ 0x40
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	887a      	ldrh	r2, [r7, #2]
 800703c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e267      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d075      	beq.n	800716e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007082:	4b88      	ldr	r3, [pc, #544]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 030c 	and.w	r3, r3, #12
 800708a:	2b04      	cmp	r3, #4
 800708c:	d00c      	beq.n	80070a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800708e:	4b85      	ldr	r3, [pc, #532]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007096:	2b08      	cmp	r3, #8
 8007098:	d112      	bne.n	80070c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800709a:	4b82      	ldr	r3, [pc, #520]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070a6:	d10b      	bne.n	80070c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070a8:	4b7e      	ldr	r3, [pc, #504]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d05b      	beq.n	800716c <HAL_RCC_OscConfig+0x108>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d157      	bne.n	800716c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e242      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070c8:	d106      	bne.n	80070d8 <HAL_RCC_OscConfig+0x74>
 80070ca:	4b76      	ldr	r3, [pc, #472]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a75      	ldr	r2, [pc, #468]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	e01d      	b.n	8007114 <HAL_RCC_OscConfig+0xb0>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070e0:	d10c      	bne.n	80070fc <HAL_RCC_OscConfig+0x98>
 80070e2:	4b70      	ldr	r3, [pc, #448]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a6f      	ldr	r2, [pc, #444]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	4b6d      	ldr	r3, [pc, #436]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a6c      	ldr	r2, [pc, #432]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	e00b      	b.n	8007114 <HAL_RCC_OscConfig+0xb0>
 80070fc:	4b69      	ldr	r3, [pc, #420]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a68      	ldr	r2, [pc, #416]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	4b66      	ldr	r3, [pc, #408]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a65      	ldr	r2, [pc, #404]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 800710e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d013      	beq.n	8007144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800711c:	f7fc fbc2 	bl	80038a4 <HAL_GetTick>
 8007120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007124:	f7fc fbbe 	bl	80038a4 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b64      	cmp	r3, #100	@ 0x64
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e207      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007136:	4b5b      	ldr	r3, [pc, #364]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0f0      	beq.n	8007124 <HAL_RCC_OscConfig+0xc0>
 8007142:	e014      	b.n	800716e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007144:	f7fc fbae 	bl	80038a4 <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800714c:	f7fc fbaa 	bl	80038a4 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b64      	cmp	r3, #100	@ 0x64
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e1f3      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800715e:	4b51      	ldr	r3, [pc, #324]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1f0      	bne.n	800714c <HAL_RCC_OscConfig+0xe8>
 800716a:	e000      	b.n	800716e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800716c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d063      	beq.n	8007242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800717a:	4b4a      	ldr	r3, [pc, #296]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 030c 	and.w	r3, r3, #12
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00b      	beq.n	800719e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007186:	4b47      	ldr	r3, [pc, #284]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800718e:	2b08      	cmp	r3, #8
 8007190:	d11c      	bne.n	80071cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007192:	4b44      	ldr	r3, [pc, #272]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d116      	bne.n	80071cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800719e:	4b41      	ldr	r3, [pc, #260]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <HAL_RCC_OscConfig+0x152>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d001      	beq.n	80071b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e1c7      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071b6:	4b3b      	ldr	r3, [pc, #236]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	4937      	ldr	r1, [pc, #220]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ca:	e03a      	b.n	8007242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d020      	beq.n	8007216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071d4:	4b34      	ldr	r3, [pc, #208]	@ (80072a8 <HAL_RCC_OscConfig+0x244>)
 80071d6:	2201      	movs	r2, #1
 80071d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071da:	f7fc fb63 	bl	80038a4 <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071e0:	e008      	b.n	80071f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071e2:	f7fc fb5f 	bl	80038a4 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d901      	bls.n	80071f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e1a8      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071f4:	4b2b      	ldr	r3, [pc, #172]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f0      	beq.n	80071e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007200:	4b28      	ldr	r3, [pc, #160]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	00db      	lsls	r3, r3, #3
 800720e:	4925      	ldr	r1, [pc, #148]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007210:	4313      	orrs	r3, r2
 8007212:	600b      	str	r3, [r1, #0]
 8007214:	e015      	b.n	8007242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007216:	4b24      	ldr	r3, [pc, #144]	@ (80072a8 <HAL_RCC_OscConfig+0x244>)
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721c:	f7fc fb42 	bl	80038a4 <HAL_GetTick>
 8007220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007222:	e008      	b.n	8007236 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007224:	f7fc fb3e 	bl	80038a4 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e187      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007236:	4b1b      	ldr	r3, [pc, #108]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f0      	bne.n	8007224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0308 	and.w	r3, r3, #8
 800724a:	2b00      	cmp	r3, #0
 800724c:	d036      	beq.n	80072bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d016      	beq.n	8007284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007256:	4b15      	ldr	r3, [pc, #84]	@ (80072ac <HAL_RCC_OscConfig+0x248>)
 8007258:	2201      	movs	r2, #1
 800725a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800725c:	f7fc fb22 	bl	80038a4 <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007264:	f7fc fb1e 	bl	80038a4 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e167      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007276:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <HAL_RCC_OscConfig+0x240>)
 8007278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f0      	beq.n	8007264 <HAL_RCC_OscConfig+0x200>
 8007282:	e01b      	b.n	80072bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007284:	4b09      	ldr	r3, [pc, #36]	@ (80072ac <HAL_RCC_OscConfig+0x248>)
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800728a:	f7fc fb0b 	bl	80038a4 <HAL_GetTick>
 800728e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007290:	e00e      	b.n	80072b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007292:	f7fc fb07 	bl	80038a4 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d907      	bls.n	80072b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e150      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
 80072a4:	40023800 	.word	0x40023800
 80072a8:	42470000 	.word	0x42470000
 80072ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072b0:	4b88      	ldr	r3, [pc, #544]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80072b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1ea      	bne.n	8007292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8097 	beq.w	80073f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072ca:	2300      	movs	r3, #0
 80072cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072ce:	4b81      	ldr	r3, [pc, #516]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80072d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10f      	bne.n	80072fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072da:	2300      	movs	r3, #0
 80072dc:	60bb      	str	r3, [r7, #8]
 80072de:	4b7d      	ldr	r3, [pc, #500]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80072e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e2:	4a7c      	ldr	r2, [pc, #496]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80072e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80072ea:	4b7a      	ldr	r3, [pc, #488]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80072ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072f2:	60bb      	str	r3, [r7, #8]
 80072f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072f6:	2301      	movs	r3, #1
 80072f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072fa:	4b77      	ldr	r3, [pc, #476]	@ (80074d8 <HAL_RCC_OscConfig+0x474>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007302:	2b00      	cmp	r3, #0
 8007304:	d118      	bne.n	8007338 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007306:	4b74      	ldr	r3, [pc, #464]	@ (80074d8 <HAL_RCC_OscConfig+0x474>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a73      	ldr	r2, [pc, #460]	@ (80074d8 <HAL_RCC_OscConfig+0x474>)
 800730c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007312:	f7fc fac7 	bl	80038a4 <HAL_GetTick>
 8007316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007318:	e008      	b.n	800732c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800731a:	f7fc fac3 	bl	80038a4 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d901      	bls.n	800732c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e10c      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800732c:	4b6a      	ldr	r3, [pc, #424]	@ (80074d8 <HAL_RCC_OscConfig+0x474>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0f0      	beq.n	800731a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d106      	bne.n	800734e <HAL_RCC_OscConfig+0x2ea>
 8007340:	4b64      	ldr	r3, [pc, #400]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007344:	4a63      	ldr	r2, [pc, #396]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	6713      	str	r3, [r2, #112]	@ 0x70
 800734c:	e01c      	b.n	8007388 <HAL_RCC_OscConfig+0x324>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2b05      	cmp	r3, #5
 8007354:	d10c      	bne.n	8007370 <HAL_RCC_OscConfig+0x30c>
 8007356:	4b5f      	ldr	r3, [pc, #380]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800735a:	4a5e      	ldr	r2, [pc, #376]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 800735c:	f043 0304 	orr.w	r3, r3, #4
 8007360:	6713      	str	r3, [r2, #112]	@ 0x70
 8007362:	4b5c      	ldr	r3, [pc, #368]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007366:	4a5b      	ldr	r2, [pc, #364]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007368:	f043 0301 	orr.w	r3, r3, #1
 800736c:	6713      	str	r3, [r2, #112]	@ 0x70
 800736e:	e00b      	b.n	8007388 <HAL_RCC_OscConfig+0x324>
 8007370:	4b58      	ldr	r3, [pc, #352]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007374:	4a57      	ldr	r2, [pc, #348]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007376:	f023 0301 	bic.w	r3, r3, #1
 800737a:	6713      	str	r3, [r2, #112]	@ 0x70
 800737c:	4b55      	ldr	r3, [pc, #340]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 800737e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007380:	4a54      	ldr	r2, [pc, #336]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007382:	f023 0304 	bic.w	r3, r3, #4
 8007386:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d015      	beq.n	80073bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007390:	f7fc fa88 	bl	80038a4 <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007396:	e00a      	b.n	80073ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007398:	f7fc fa84 	bl	80038a4 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d901      	bls.n	80073ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e0cb      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ae:	4b49      	ldr	r3, [pc, #292]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80073b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0ee      	beq.n	8007398 <HAL_RCC_OscConfig+0x334>
 80073ba:	e014      	b.n	80073e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073bc:	f7fc fa72 	bl	80038a4 <HAL_GetTick>
 80073c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073c2:	e00a      	b.n	80073da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c4:	f7fc fa6e 	bl	80038a4 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d901      	bls.n	80073da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e0b5      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073da:	4b3e      	ldr	r3, [pc, #248]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80073dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1ee      	bne.n	80073c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d105      	bne.n	80073f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073ec:	4b39      	ldr	r3, [pc, #228]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80073ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f0:	4a38      	ldr	r2, [pc, #224]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80073f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 80a1 	beq.w	8007544 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007402:	4b34      	ldr	r3, [pc, #208]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 030c 	and.w	r3, r3, #12
 800740a:	2b08      	cmp	r3, #8
 800740c:	d05c      	beq.n	80074c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d141      	bne.n	800749a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007416:	4b31      	ldr	r3, [pc, #196]	@ (80074dc <HAL_RCC_OscConfig+0x478>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800741c:	f7fc fa42 	bl	80038a4 <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007422:	e008      	b.n	8007436 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007424:	f7fc fa3e 	bl	80038a4 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d901      	bls.n	8007436 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e087      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007436:	4b27      	ldr	r3, [pc, #156]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f0      	bne.n	8007424 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69da      	ldr	r2, [r3, #28]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007450:	019b      	lsls	r3, r3, #6
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007458:	085b      	lsrs	r3, r3, #1
 800745a:	3b01      	subs	r3, #1
 800745c:	041b      	lsls	r3, r3, #16
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007464:	061b      	lsls	r3, r3, #24
 8007466:	491b      	ldr	r1, [pc, #108]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 8007468:	4313      	orrs	r3, r2
 800746a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800746c:	4b1b      	ldr	r3, [pc, #108]	@ (80074dc <HAL_RCC_OscConfig+0x478>)
 800746e:	2201      	movs	r2, #1
 8007470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007472:	f7fc fa17 	bl	80038a4 <HAL_GetTick>
 8007476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747a:	f7fc fa13 	bl	80038a4 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e05c      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800748c:	4b11      	ldr	r3, [pc, #68]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0f0      	beq.n	800747a <HAL_RCC_OscConfig+0x416>
 8007498:	e054      	b.n	8007544 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749a:	4b10      	ldr	r3, [pc, #64]	@ (80074dc <HAL_RCC_OscConfig+0x478>)
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a0:	f7fc fa00 	bl	80038a4 <HAL_GetTick>
 80074a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a8:	f7fc f9fc 	bl	80038a4 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e045      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ba:	4b06      	ldr	r3, [pc, #24]	@ (80074d4 <HAL_RCC_OscConfig+0x470>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1f0      	bne.n	80074a8 <HAL_RCC_OscConfig+0x444>
 80074c6:	e03d      	b.n	8007544 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d107      	bne.n	80074e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e038      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
 80074d4:	40023800 	.word	0x40023800
 80074d8:	40007000 	.word	0x40007000
 80074dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80074e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007550 <HAL_RCC_OscConfig+0x4ec>)
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d028      	beq.n	8007540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d121      	bne.n	8007540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007506:	429a      	cmp	r2, r3
 8007508:	d11a      	bne.n	8007540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007510:	4013      	ands	r3, r2
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007516:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007518:	4293      	cmp	r3, r2
 800751a:	d111      	bne.n	8007540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007526:	085b      	lsrs	r3, r3, #1
 8007528:	3b01      	subs	r3, #1
 800752a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800752c:	429a      	cmp	r2, r3
 800752e:	d107      	bne.n	8007540 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800753c:	429a      	cmp	r2, r3
 800753e:	d001      	beq.n	8007544 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e000      	b.n	8007546 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	40023800 	.word	0x40023800

08007554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e0cc      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007568:	4b68      	ldr	r3, [pc, #416]	@ (800770c <HAL_RCC_ClockConfig+0x1b8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0307 	and.w	r3, r3, #7
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d90c      	bls.n	8007590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007576:	4b65      	ldr	r3, [pc, #404]	@ (800770c <HAL_RCC_ClockConfig+0x1b8>)
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	b2d2      	uxtb	r2, r2
 800757c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800757e:	4b63      	ldr	r3, [pc, #396]	@ (800770c <HAL_RCC_ClockConfig+0x1b8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	429a      	cmp	r2, r3
 800758a:	d001      	beq.n	8007590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e0b8      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d020      	beq.n	80075de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0304 	and.w	r3, r3, #4
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d005      	beq.n	80075b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075a8:	4b59      	ldr	r3, [pc, #356]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	4a58      	ldr	r2, [pc, #352]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0308 	and.w	r3, r3, #8
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075c0:	4b53      	ldr	r3, [pc, #332]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	4a52      	ldr	r2, [pc, #328]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80075ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075cc:	4b50      	ldr	r3, [pc, #320]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	494d      	ldr	r1, [pc, #308]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d044      	beq.n	8007674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d107      	bne.n	8007602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f2:	4b47      	ldr	r3, [pc, #284]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d119      	bne.n	8007632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e07f      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b02      	cmp	r3, #2
 8007608:	d003      	beq.n	8007612 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800760e:	2b03      	cmp	r3, #3
 8007610:	d107      	bne.n	8007622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007612:	4b3f      	ldr	r3, [pc, #252]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d109      	bne.n	8007632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e06f      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007622:	4b3b      	ldr	r3, [pc, #236]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e067      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007632:	4b37      	ldr	r3, [pc, #220]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f023 0203 	bic.w	r2, r3, #3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	4934      	ldr	r1, [pc, #208]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 8007640:	4313      	orrs	r3, r2
 8007642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007644:	f7fc f92e 	bl	80038a4 <HAL_GetTick>
 8007648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800764a:	e00a      	b.n	8007662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800764c:	f7fc f92a 	bl	80038a4 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800765a:	4293      	cmp	r3, r2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e04f      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007662:	4b2b      	ldr	r3, [pc, #172]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 020c 	and.w	r2, r3, #12
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	429a      	cmp	r2, r3
 8007672:	d1eb      	bne.n	800764c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007674:	4b25      	ldr	r3, [pc, #148]	@ (800770c <HAL_RCC_ClockConfig+0x1b8>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d20c      	bcs.n	800769c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007682:	4b22      	ldr	r3, [pc, #136]	@ (800770c <HAL_RCC_ClockConfig+0x1b8>)
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800768a:	4b20      	ldr	r3, [pc, #128]	@ (800770c <HAL_RCC_ClockConfig+0x1b8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d001      	beq.n	800769c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e032      	b.n	8007702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d008      	beq.n	80076ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076a8:	4b19      	ldr	r3, [pc, #100]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	4916      	ldr	r1, [pc, #88]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0308 	and.w	r3, r3, #8
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076c6:	4b12      	ldr	r3, [pc, #72]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	490e      	ldr	r1, [pc, #56]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076da:	f000 f821 	bl	8007720 <HAL_RCC_GetSysClockFreq>
 80076de:	4602      	mov	r2, r0
 80076e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007710 <HAL_RCC_ClockConfig+0x1bc>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	091b      	lsrs	r3, r3, #4
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	490a      	ldr	r1, [pc, #40]	@ (8007714 <HAL_RCC_ClockConfig+0x1c0>)
 80076ec:	5ccb      	ldrb	r3, [r1, r3]
 80076ee:	fa22 f303 	lsr.w	r3, r2, r3
 80076f2:	4a09      	ldr	r2, [pc, #36]	@ (8007718 <HAL_RCC_ClockConfig+0x1c4>)
 80076f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80076f6:	4b09      	ldr	r3, [pc, #36]	@ (800771c <HAL_RCC_ClockConfig+0x1c8>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fc f88e 	bl	800381c <HAL_InitTick>

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	40023c00 	.word	0x40023c00
 8007710:	40023800 	.word	0x40023800
 8007714:	08012bb0 	.word	0x08012bb0
 8007718:	2000003c 	.word	0x2000003c
 800771c:	20000040 	.word	0x20000040

08007720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007724:	b094      	sub	sp, #80	@ 0x50
 8007726:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007738:	4b79      	ldr	r3, [pc, #484]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x200>)
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f003 030c 	and.w	r3, r3, #12
 8007740:	2b08      	cmp	r3, #8
 8007742:	d00d      	beq.n	8007760 <HAL_RCC_GetSysClockFreq+0x40>
 8007744:	2b08      	cmp	r3, #8
 8007746:	f200 80e1 	bhi.w	800790c <HAL_RCC_GetSysClockFreq+0x1ec>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_RCC_GetSysClockFreq+0x34>
 800774e:	2b04      	cmp	r3, #4
 8007750:	d003      	beq.n	800775a <HAL_RCC_GetSysClockFreq+0x3a>
 8007752:	e0db      	b.n	800790c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007754:	4b73      	ldr	r3, [pc, #460]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x204>)
 8007756:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007758:	e0db      	b.n	8007912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800775a:	4b73      	ldr	r3, [pc, #460]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x208>)
 800775c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800775e:	e0d8      	b.n	8007912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007760:	4b6f      	ldr	r3, [pc, #444]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x200>)
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007768:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800776a:	4b6d      	ldr	r3, [pc, #436]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x200>)
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d063      	beq.n	800783e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007776:	4b6a      	ldr	r3, [pc, #424]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x200>)
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	099b      	lsrs	r3, r3, #6
 800777c:	2200      	movs	r2, #0
 800777e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007780:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007788:	633b      	str	r3, [r7, #48]	@ 0x30
 800778a:	2300      	movs	r3, #0
 800778c:	637b      	str	r3, [r7, #52]	@ 0x34
 800778e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007792:	4622      	mov	r2, r4
 8007794:	462b      	mov	r3, r5
 8007796:	f04f 0000 	mov.w	r0, #0
 800779a:	f04f 0100 	mov.w	r1, #0
 800779e:	0159      	lsls	r1, r3, #5
 80077a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077a4:	0150      	lsls	r0, r2, #5
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4621      	mov	r1, r4
 80077ac:	1a51      	subs	r1, r2, r1
 80077ae:	6139      	str	r1, [r7, #16]
 80077b0:	4629      	mov	r1, r5
 80077b2:	eb63 0301 	sbc.w	r3, r3, r1
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077c4:	4659      	mov	r1, fp
 80077c6:	018b      	lsls	r3, r1, #6
 80077c8:	4651      	mov	r1, sl
 80077ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077ce:	4651      	mov	r1, sl
 80077d0:	018a      	lsls	r2, r1, #6
 80077d2:	4651      	mov	r1, sl
 80077d4:	ebb2 0801 	subs.w	r8, r2, r1
 80077d8:	4659      	mov	r1, fp
 80077da:	eb63 0901 	sbc.w	r9, r3, r1
 80077de:	f04f 0200 	mov.w	r2, #0
 80077e2:	f04f 0300 	mov.w	r3, #0
 80077e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077f2:	4690      	mov	r8, r2
 80077f4:	4699      	mov	r9, r3
 80077f6:	4623      	mov	r3, r4
 80077f8:	eb18 0303 	adds.w	r3, r8, r3
 80077fc:	60bb      	str	r3, [r7, #8]
 80077fe:	462b      	mov	r3, r5
 8007800:	eb49 0303 	adc.w	r3, r9, r3
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	f04f 0200 	mov.w	r2, #0
 800780a:	f04f 0300 	mov.w	r3, #0
 800780e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007812:	4629      	mov	r1, r5
 8007814:	024b      	lsls	r3, r1, #9
 8007816:	4621      	mov	r1, r4
 8007818:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800781c:	4621      	mov	r1, r4
 800781e:	024a      	lsls	r2, r1, #9
 8007820:	4610      	mov	r0, r2
 8007822:	4619      	mov	r1, r3
 8007824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007826:	2200      	movs	r2, #0
 8007828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800782a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800782c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007830:	f7f9 fa2a 	bl	8000c88 <__aeabi_uldivmod>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4613      	mov	r3, r2
 800783a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800783c:	e058      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800783e:	4b38      	ldr	r3, [pc, #224]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x200>)
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	099b      	lsrs	r3, r3, #6
 8007844:	2200      	movs	r2, #0
 8007846:	4618      	mov	r0, r3
 8007848:	4611      	mov	r1, r2
 800784a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800784e:	623b      	str	r3, [r7, #32]
 8007850:	2300      	movs	r3, #0
 8007852:	627b      	str	r3, [r7, #36]	@ 0x24
 8007854:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007858:	4642      	mov	r2, r8
 800785a:	464b      	mov	r3, r9
 800785c:	f04f 0000 	mov.w	r0, #0
 8007860:	f04f 0100 	mov.w	r1, #0
 8007864:	0159      	lsls	r1, r3, #5
 8007866:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800786a:	0150      	lsls	r0, r2, #5
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4641      	mov	r1, r8
 8007872:	ebb2 0a01 	subs.w	sl, r2, r1
 8007876:	4649      	mov	r1, r9
 8007878:	eb63 0b01 	sbc.w	fp, r3, r1
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	f04f 0300 	mov.w	r3, #0
 8007884:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007888:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800788c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007890:	ebb2 040a 	subs.w	r4, r2, sl
 8007894:	eb63 050b 	sbc.w	r5, r3, fp
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	00eb      	lsls	r3, r5, #3
 80078a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078a6:	00e2      	lsls	r2, r4, #3
 80078a8:	4614      	mov	r4, r2
 80078aa:	461d      	mov	r5, r3
 80078ac:	4643      	mov	r3, r8
 80078ae:	18e3      	adds	r3, r4, r3
 80078b0:	603b      	str	r3, [r7, #0]
 80078b2:	464b      	mov	r3, r9
 80078b4:	eb45 0303 	adc.w	r3, r5, r3
 80078b8:	607b      	str	r3, [r7, #4]
 80078ba:	f04f 0200 	mov.w	r2, #0
 80078be:	f04f 0300 	mov.w	r3, #0
 80078c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078c6:	4629      	mov	r1, r5
 80078c8:	028b      	lsls	r3, r1, #10
 80078ca:	4621      	mov	r1, r4
 80078cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078d0:	4621      	mov	r1, r4
 80078d2:	028a      	lsls	r2, r1, #10
 80078d4:	4610      	mov	r0, r2
 80078d6:	4619      	mov	r1, r3
 80078d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078da:	2200      	movs	r2, #0
 80078dc:	61bb      	str	r3, [r7, #24]
 80078de:	61fa      	str	r2, [r7, #28]
 80078e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078e4:	f7f9 f9d0 	bl	8000c88 <__aeabi_uldivmod>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4613      	mov	r3, r2
 80078ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80078f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007920 <HAL_RCC_GetSysClockFreq+0x200>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	0c1b      	lsrs	r3, r3, #16
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	3301      	adds	r3, #1
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007900:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007904:	fbb2 f3f3 	udiv	r3, r2, r3
 8007908:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800790a:	e002      	b.n	8007912 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800790c:	4b05      	ldr	r3, [pc, #20]	@ (8007924 <HAL_RCC_GetSysClockFreq+0x204>)
 800790e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007914:	4618      	mov	r0, r3
 8007916:	3750      	adds	r7, #80	@ 0x50
 8007918:	46bd      	mov	sp, r7
 800791a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800791e:	bf00      	nop
 8007920:	40023800 	.word	0x40023800
 8007924:	00f42400 	.word	0x00f42400
 8007928:	007a1200 	.word	0x007a1200

0800792c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007930:	4b03      	ldr	r3, [pc, #12]	@ (8007940 <HAL_RCC_GetHCLKFreq+0x14>)
 8007932:	681b      	ldr	r3, [r3, #0]
}
 8007934:	4618      	mov	r0, r3
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	2000003c 	.word	0x2000003c

08007944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007948:	f7ff fff0 	bl	800792c <HAL_RCC_GetHCLKFreq>
 800794c:	4602      	mov	r2, r0
 800794e:	4b05      	ldr	r3, [pc, #20]	@ (8007964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	0a9b      	lsrs	r3, r3, #10
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	4903      	ldr	r1, [pc, #12]	@ (8007968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800795a:	5ccb      	ldrb	r3, [r1, r3]
 800795c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007960:	4618      	mov	r0, r3
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40023800 	.word	0x40023800
 8007968:	08012bc0 	.word	0x08012bc0

0800796c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007970:	f7ff ffdc 	bl	800792c <HAL_RCC_GetHCLKFreq>
 8007974:	4602      	mov	r2, r0
 8007976:	4b05      	ldr	r3, [pc, #20]	@ (800798c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	0b5b      	lsrs	r3, r3, #13
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	4903      	ldr	r1, [pc, #12]	@ (8007990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007982:	5ccb      	ldrb	r3, [r1, r3]
 8007984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007988:	4618      	mov	r0, r3
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40023800 	.word	0x40023800
 8007990:	08012bc0 	.word	0x08012bc0

08007994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d001      	beq.n	80079ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e046      	b.n	8007a3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a23      	ldr	r2, [pc, #140]	@ (8007a48 <HAL_TIM_Base_Start+0xb4>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d022      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c6:	d01d      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a1f      	ldr	r2, [pc, #124]	@ (8007a4c <HAL_TIM_Base_Start+0xb8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d018      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007a50 <HAL_TIM_Base_Start+0xbc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d013      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007a54 <HAL_TIM_Base_Start+0xc0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00e      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007a58 <HAL_TIM_Base_Start+0xc4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d009      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a19      	ldr	r2, [pc, #100]	@ (8007a5c <HAL_TIM_Base_Start+0xc8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d004      	beq.n	8007a04 <HAL_TIM_Base_Start+0x70>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a18      	ldr	r2, [pc, #96]	@ (8007a60 <HAL_TIM_Base_Start+0xcc>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d111      	bne.n	8007a28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b06      	cmp	r3, #6
 8007a14:	d010      	beq.n	8007a38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0201 	orr.w	r2, r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a26:	e007      	b.n	8007a38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0201 	orr.w	r2, r2, #1
 8007a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	40010000 	.word	0x40010000
 8007a4c:	40000400 	.word	0x40000400
 8007a50:	40000800 	.word	0x40000800
 8007a54:	40000c00 	.word	0x40000c00
 8007a58:	40010400 	.word	0x40010400
 8007a5c:	40014000 	.word	0x40014000
 8007a60:	40001800 	.word	0x40001800

08007a64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e041      	b.n	8007afa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7fb fc5c 	bl	8003348 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	f000 f9b8 	bl	8007e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
	...

08007b04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d109      	bne.n	8007b28 <HAL_TIM_PWM_Start+0x24>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	bf14      	ite	ne
 8007b20:	2301      	movne	r3, #1
 8007b22:	2300      	moveq	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	e022      	b.n	8007b6e <HAL_TIM_PWM_Start+0x6a>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d109      	bne.n	8007b42 <HAL_TIM_PWM_Start+0x3e>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	bf14      	ite	ne
 8007b3a:	2301      	movne	r3, #1
 8007b3c:	2300      	moveq	r3, #0
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	e015      	b.n	8007b6e <HAL_TIM_PWM_Start+0x6a>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d109      	bne.n	8007b5c <HAL_TIM_PWM_Start+0x58>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	bf14      	ite	ne
 8007b54:	2301      	movne	r3, #1
 8007b56:	2300      	moveq	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	e008      	b.n	8007b6e <HAL_TIM_PWM_Start+0x6a>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	bf14      	ite	ne
 8007b68:	2301      	movne	r3, #1
 8007b6a:	2300      	moveq	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e07c      	b.n	8007c70 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d104      	bne.n	8007b86 <HAL_TIM_PWM_Start+0x82>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b84:	e013      	b.n	8007bae <HAL_TIM_PWM_Start+0xaa>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d104      	bne.n	8007b96 <HAL_TIM_PWM_Start+0x92>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b94:	e00b      	b.n	8007bae <HAL_TIM_PWM_Start+0xaa>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d104      	bne.n	8007ba6 <HAL_TIM_PWM_Start+0xa2>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ba4:	e003      	b.n	8007bae <HAL_TIM_PWM_Start+0xaa>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fb8a 	bl	80082d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8007c78 <HAL_TIM_PWM_Start+0x174>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d004      	beq.n	8007bd0 <HAL_TIM_PWM_Start+0xcc>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a2c      	ldr	r2, [pc, #176]	@ (8007c7c <HAL_TIM_PWM_Start+0x178>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d101      	bne.n	8007bd4 <HAL_TIM_PWM_Start+0xd0>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <HAL_TIM_PWM_Start+0xd2>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d007      	beq.n	8007bea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007be8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a22      	ldr	r2, [pc, #136]	@ (8007c78 <HAL_TIM_PWM_Start+0x174>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d022      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x136>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bfc:	d01d      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x136>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a1f      	ldr	r2, [pc, #124]	@ (8007c80 <HAL_TIM_PWM_Start+0x17c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d018      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x136>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007c84 <HAL_TIM_PWM_Start+0x180>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d013      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x136>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a1c      	ldr	r2, [pc, #112]	@ (8007c88 <HAL_TIM_PWM_Start+0x184>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00e      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x136>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a16      	ldr	r2, [pc, #88]	@ (8007c7c <HAL_TIM_PWM_Start+0x178>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d009      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x136>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a18      	ldr	r2, [pc, #96]	@ (8007c8c <HAL_TIM_PWM_Start+0x188>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d004      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x136>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a16      	ldr	r2, [pc, #88]	@ (8007c90 <HAL_TIM_PWM_Start+0x18c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d111      	bne.n	8007c5e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 0307 	and.w	r3, r3, #7
 8007c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b06      	cmp	r3, #6
 8007c4a:	d010      	beq.n	8007c6e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f042 0201 	orr.w	r2, r2, #1
 8007c5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c5c:	e007      	b.n	8007c6e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f042 0201 	orr.w	r2, r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	40010000 	.word	0x40010000
 8007c7c:	40010400 	.word	0x40010400
 8007c80:	40000400 	.word	0x40000400
 8007c84:	40000800 	.word	0x40000800
 8007c88:	40000c00 	.word	0x40000c00
 8007c8c:	40014000 	.word	0x40014000
 8007c90:	40001800 	.word	0x40001800

08007c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d101      	bne.n	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cae:	2302      	movs	r3, #2
 8007cb0:	e0ae      	b.n	8007e10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b0c      	cmp	r3, #12
 8007cbe:	f200 809f 	bhi.w	8007e00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc8:	08007cfd 	.word	0x08007cfd
 8007ccc:	08007e01 	.word	0x08007e01
 8007cd0:	08007e01 	.word	0x08007e01
 8007cd4:	08007e01 	.word	0x08007e01
 8007cd8:	08007d3d 	.word	0x08007d3d
 8007cdc:	08007e01 	.word	0x08007e01
 8007ce0:	08007e01 	.word	0x08007e01
 8007ce4:	08007e01 	.word	0x08007e01
 8007ce8:	08007d7f 	.word	0x08007d7f
 8007cec:	08007e01 	.word	0x08007e01
 8007cf0:	08007e01 	.word	0x08007e01
 8007cf4:	08007e01 	.word	0x08007e01
 8007cf8:	08007dbf 	.word	0x08007dbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68b9      	ldr	r1, [r7, #8]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 f934 	bl	8007f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	699a      	ldr	r2, [r3, #24]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f042 0208 	orr.w	r2, r2, #8
 8007d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0204 	bic.w	r2, r2, #4
 8007d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6999      	ldr	r1, [r3, #24]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	691a      	ldr	r2, [r3, #16]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	619a      	str	r2, [r3, #24]
      break;
 8007d3a:	e064      	b.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68b9      	ldr	r1, [r7, #8]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 f984 	bl	8008050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	699a      	ldr	r2, [r3, #24]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6999      	ldr	r1, [r3, #24]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	021a      	lsls	r2, r3, #8
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	619a      	str	r2, [r3, #24]
      break;
 8007d7c:	e043      	b.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f9d9 	bl	800813c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69da      	ldr	r2, [r3, #28]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f042 0208 	orr.w	r2, r2, #8
 8007d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69da      	ldr	r2, [r3, #28]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f022 0204 	bic.w	r2, r2, #4
 8007da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69d9      	ldr	r1, [r3, #28]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	691a      	ldr	r2, [r3, #16]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	61da      	str	r2, [r3, #28]
      break;
 8007dbc:	e023      	b.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 fa2d 	bl	8008224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69da      	ldr	r2, [r3, #28]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	69da      	ldr	r2, [r3, #28]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69d9      	ldr	r1, [r3, #28]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	021a      	lsls	r2, r3, #8
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	61da      	str	r2, [r3, #28]
      break;
 8007dfe:	e002      	b.n	8007e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
      break;
 8007e04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a46      	ldr	r2, [pc, #280]	@ (8007f44 <TIM_Base_SetConfig+0x12c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d013      	beq.n	8007e58 <TIM_Base_SetConfig+0x40>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e36:	d00f      	beq.n	8007e58 <TIM_Base_SetConfig+0x40>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a43      	ldr	r2, [pc, #268]	@ (8007f48 <TIM_Base_SetConfig+0x130>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00b      	beq.n	8007e58 <TIM_Base_SetConfig+0x40>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a42      	ldr	r2, [pc, #264]	@ (8007f4c <TIM_Base_SetConfig+0x134>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d007      	beq.n	8007e58 <TIM_Base_SetConfig+0x40>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a41      	ldr	r2, [pc, #260]	@ (8007f50 <TIM_Base_SetConfig+0x138>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d003      	beq.n	8007e58 <TIM_Base_SetConfig+0x40>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a40      	ldr	r2, [pc, #256]	@ (8007f54 <TIM_Base_SetConfig+0x13c>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d108      	bne.n	8007e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a35      	ldr	r2, [pc, #212]	@ (8007f44 <TIM_Base_SetConfig+0x12c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d02b      	beq.n	8007eca <TIM_Base_SetConfig+0xb2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e78:	d027      	beq.n	8007eca <TIM_Base_SetConfig+0xb2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a32      	ldr	r2, [pc, #200]	@ (8007f48 <TIM_Base_SetConfig+0x130>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d023      	beq.n	8007eca <TIM_Base_SetConfig+0xb2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a31      	ldr	r2, [pc, #196]	@ (8007f4c <TIM_Base_SetConfig+0x134>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d01f      	beq.n	8007eca <TIM_Base_SetConfig+0xb2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a30      	ldr	r2, [pc, #192]	@ (8007f50 <TIM_Base_SetConfig+0x138>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d01b      	beq.n	8007eca <TIM_Base_SetConfig+0xb2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a2f      	ldr	r2, [pc, #188]	@ (8007f54 <TIM_Base_SetConfig+0x13c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d017      	beq.n	8007eca <TIM_Base_SetConfig+0xb2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8007f58 <TIM_Base_SetConfig+0x140>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d013      	beq.n	8007eca <TIM_Base_SetConfig+0xb2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8007f5c <TIM_Base_SetConfig+0x144>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00f      	beq.n	8007eca <TIM_Base_SetConfig+0xb2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a2c      	ldr	r2, [pc, #176]	@ (8007f60 <TIM_Base_SetConfig+0x148>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d00b      	beq.n	8007eca <TIM_Base_SetConfig+0xb2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8007f64 <TIM_Base_SetConfig+0x14c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d007      	beq.n	8007eca <TIM_Base_SetConfig+0xb2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8007f68 <TIM_Base_SetConfig+0x150>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d003      	beq.n	8007eca <TIM_Base_SetConfig+0xb2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a29      	ldr	r2, [pc, #164]	@ (8007f6c <TIM_Base_SetConfig+0x154>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d108      	bne.n	8007edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	689a      	ldr	r2, [r3, #8]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a10      	ldr	r2, [pc, #64]	@ (8007f44 <TIM_Base_SetConfig+0x12c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d003      	beq.n	8007f10 <TIM_Base_SetConfig+0xf8>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a12      	ldr	r2, [pc, #72]	@ (8007f54 <TIM_Base_SetConfig+0x13c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d103      	bne.n	8007f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	691a      	ldr	r2, [r3, #16]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d105      	bne.n	8007f36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	f023 0201 	bic.w	r2, r3, #1
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	611a      	str	r2, [r3, #16]
  }
}
 8007f36:	bf00      	nop
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	40010000 	.word	0x40010000
 8007f48:	40000400 	.word	0x40000400
 8007f4c:	40000800 	.word	0x40000800
 8007f50:	40000c00 	.word	0x40000c00
 8007f54:	40010400 	.word	0x40010400
 8007f58:	40014000 	.word	0x40014000
 8007f5c:	40014400 	.word	0x40014400
 8007f60:	40014800 	.word	0x40014800
 8007f64:	40001800 	.word	0x40001800
 8007f68:	40001c00 	.word	0x40001c00
 8007f6c:	40002000 	.word	0x40002000

08007f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	f023 0201 	bic.w	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 0303 	bic.w	r3, r3, #3
 8007fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f023 0302 	bic.w	r3, r3, #2
 8007fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a20      	ldr	r2, [pc, #128]	@ (8008048 <TIM_OC1_SetConfig+0xd8>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d003      	beq.n	8007fd4 <TIM_OC1_SetConfig+0x64>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a1f      	ldr	r2, [pc, #124]	@ (800804c <TIM_OC1_SetConfig+0xdc>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d10c      	bne.n	8007fee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f023 0308 	bic.w	r3, r3, #8
 8007fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f023 0304 	bic.w	r3, r3, #4
 8007fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a15      	ldr	r2, [pc, #84]	@ (8008048 <TIM_OC1_SetConfig+0xd8>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_OC1_SetConfig+0x8e>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a14      	ldr	r2, [pc, #80]	@ (800804c <TIM_OC1_SetConfig+0xdc>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d111      	bne.n	8008022 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800800c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	4313      	orrs	r3, r2
 8008016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4313      	orrs	r3, r2
 8008020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	621a      	str	r2, [r3, #32]
}
 800803c:	bf00      	nop
 800803e:	371c      	adds	r7, #28
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	40010000 	.word	0x40010000
 800804c:	40010400 	.word	0x40010400

08008050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	f023 0210 	bic.w	r2, r3, #16
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800807e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4313      	orrs	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f023 0320 	bic.w	r3, r3, #32
 800809a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	011b      	lsls	r3, r3, #4
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a22      	ldr	r2, [pc, #136]	@ (8008134 <TIM_OC2_SetConfig+0xe4>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d003      	beq.n	80080b8 <TIM_OC2_SetConfig+0x68>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a21      	ldr	r2, [pc, #132]	@ (8008138 <TIM_OC2_SetConfig+0xe8>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d10d      	bne.n	80080d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	011b      	lsls	r3, r3, #4
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a17      	ldr	r2, [pc, #92]	@ (8008134 <TIM_OC2_SetConfig+0xe4>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d003      	beq.n	80080e4 <TIM_OC2_SetConfig+0x94>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a16      	ldr	r2, [pc, #88]	@ (8008138 <TIM_OC2_SetConfig+0xe8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d113      	bne.n	800810c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	4313      	orrs	r3, r2
 800810a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	621a      	str	r2, [r3, #32]
}
 8008126:	bf00      	nop
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	40010000 	.word	0x40010000
 8008138:	40010400 	.word	0x40010400

0800813c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800816a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0303 	bic.w	r3, r3, #3
 8008172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	4313      	orrs	r3, r2
 8008190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a21      	ldr	r2, [pc, #132]	@ (800821c <TIM_OC3_SetConfig+0xe0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d003      	beq.n	80081a2 <TIM_OC3_SetConfig+0x66>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a20      	ldr	r2, [pc, #128]	@ (8008220 <TIM_OC3_SetConfig+0xe4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d10d      	bne.n	80081be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a16      	ldr	r2, [pc, #88]	@ (800821c <TIM_OC3_SetConfig+0xe0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d003      	beq.n	80081ce <TIM_OC3_SetConfig+0x92>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a15      	ldr	r2, [pc, #84]	@ (8008220 <TIM_OC3_SetConfig+0xe4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d113      	bne.n	80081f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	011b      	lsls	r3, r3, #4
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	621a      	str	r2, [r3, #32]
}
 8008210:	bf00      	nop
 8008212:	371c      	adds	r7, #28
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	40010000 	.word	0x40010000
 8008220:	40010400 	.word	0x40010400

08008224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800825a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	021b      	lsls	r3, r3, #8
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	4313      	orrs	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800826e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	031b      	lsls	r3, r3, #12
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	4313      	orrs	r3, r2
 800827a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a12      	ldr	r2, [pc, #72]	@ (80082c8 <TIM_OC4_SetConfig+0xa4>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d003      	beq.n	800828c <TIM_OC4_SetConfig+0x68>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a11      	ldr	r2, [pc, #68]	@ (80082cc <TIM_OC4_SetConfig+0xa8>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d109      	bne.n	80082a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	019b      	lsls	r3, r3, #6
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	4313      	orrs	r3, r2
 800829e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	621a      	str	r2, [r3, #32]
}
 80082ba:	bf00      	nop
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	40010000 	.word	0x40010000
 80082cc:	40010400 	.word	0x40010400

080082d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f003 031f 	and.w	r3, r3, #31
 80082e2:	2201      	movs	r2, #1
 80082e4:	fa02 f303 	lsl.w	r3, r2, r3
 80082e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6a1a      	ldr	r2, [r3, #32]
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	43db      	mvns	r3, r3
 80082f2:	401a      	ands	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6a1a      	ldr	r2, [r3, #32]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	f003 031f 	and.w	r3, r3, #31
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	fa01 f303 	lsl.w	r3, r1, r3
 8008308:	431a      	orrs	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	621a      	str	r2, [r3, #32]
}
 800830e:	bf00      	nop
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
	...

0800831c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008330:	2302      	movs	r3, #2
 8008332:	e05a      	b.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800835a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a21      	ldr	r2, [pc, #132]	@ (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d022      	beq.n	80083be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008380:	d01d      	beq.n	80083be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a1d      	ldr	r2, [pc, #116]	@ (80083fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d018      	beq.n	80083be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a1b      	ldr	r2, [pc, #108]	@ (8008400 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d013      	beq.n	80083be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a1a      	ldr	r2, [pc, #104]	@ (8008404 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00e      	beq.n	80083be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a18      	ldr	r2, [pc, #96]	@ (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d009      	beq.n	80083be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a17      	ldr	r2, [pc, #92]	@ (800840c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d004      	beq.n	80083be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a15      	ldr	r2, [pc, #84]	@ (8008410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d10c      	bne.n	80083d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	40010000 	.word	0x40010000
 80083fc:	40000400 	.word	0x40000400
 8008400:	40000800 	.word	0x40000800
 8008404:	40000c00 	.word	0x40000c00
 8008408:	40010400 	.word	0x40010400
 800840c:	40014000 	.word	0x40014000
 8008410:	40001800 	.word	0x40001800

08008414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e042      	b.n	80084ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d106      	bne.n	8008440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7fb f800 	bl	8003440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2224      	movs	r2, #36	@ 0x24
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa95 	bl	8008988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	691a      	ldr	r2, [r3, #16]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800846c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	695a      	ldr	r2, [r3, #20]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800847c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800848c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2220      	movs	r2, #32
 8008498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	4613      	mov	r3, r2
 80084c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	d112      	bne.n	80084f4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <HAL_UART_Receive_DMA+0x26>
 80084d4:	88fb      	ldrh	r3, [r7, #6]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e00b      	b.n	80084f6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80084e4:	88fb      	ldrh	r3, [r7, #6]
 80084e6:	461a      	mov	r2, r3
 80084e8:	68b9      	ldr	r1, [r7, #8]
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 f926 	bl	800873c <UART_Start_Receive_DMA>
 80084f0:	4603      	mov	r3, r0
 80084f2:	e000      	b.n	80084f6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80084f4:	2302      	movs	r3, #2
  }
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084fe:	b480      	push	{r7}
 8008500:	b083      	sub	sp, #12
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	460b      	mov	r3, r1
 8008530:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b09c      	sub	sp, #112	@ 0x70
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008556:	2b00      	cmp	r3, #0
 8008558:	d172      	bne.n	8008640 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800855a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800855c:	2200      	movs	r2, #0
 800855e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	330c      	adds	r3, #12
 8008566:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800856a:	e853 3f00 	ldrex	r3, [r3]
 800856e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008572:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008576:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	330c      	adds	r3, #12
 800857e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008580:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008582:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008584:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008586:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008588:	e841 2300 	strex	r3, r2, [r1]
 800858c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800858e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e5      	bne.n	8008560 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3314      	adds	r3, #20
 800859a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859e:	e853 3f00 	ldrex	r3, [r3]
 80085a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a6:	f023 0301 	bic.w	r3, r3, #1
 80085aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80085ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3314      	adds	r3, #20
 80085b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80085b4:	647a      	str	r2, [r7, #68]	@ 0x44
 80085b6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085bc:	e841 2300 	strex	r3, r2, [r1]
 80085c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1e5      	bne.n	8008594 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3314      	adds	r3, #20
 80085ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d2:	e853 3f00 	ldrex	r3, [r3]
 80085d6:	623b      	str	r3, [r7, #32]
   return(result);
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085de:	663b      	str	r3, [r7, #96]	@ 0x60
 80085e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3314      	adds	r3, #20
 80085e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80085e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80085ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e5      	bne.n	80085c8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80085fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008604:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008608:	2b01      	cmp	r3, #1
 800860a:	d119      	bne.n	8008640 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800860c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	330c      	adds	r3, #12
 8008612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	e853 3f00 	ldrex	r3, [r3]
 800861a:	60fb      	str	r3, [r7, #12]
   return(result);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f023 0310 	bic.w	r3, r3, #16
 8008622:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	330c      	adds	r3, #12
 800862a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800862c:	61fa      	str	r2, [r7, #28]
 800862e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008630:	69b9      	ldr	r1, [r7, #24]
 8008632:	69fa      	ldr	r2, [r7, #28]
 8008634:	e841 2300 	strex	r3, r2, [r1]
 8008638:	617b      	str	r3, [r7, #20]
   return(result);
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e5      	bne.n	800860c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008642:	2200      	movs	r2, #0
 8008644:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864a:	2b01      	cmp	r3, #1
 800864c:	d106      	bne.n	800865c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800864e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008650:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008652:	4619      	mov	r1, r3
 8008654:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008656:	f7ff ff66 	bl	8008526 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800865a:	e002      	b.n	8008662 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800865c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800865e:	f7fa fdbb 	bl	80031d8 <HAL_UART_RxCpltCallback>
}
 8008662:	bf00      	nop
 8008664:	3770      	adds	r7, #112	@ 0x70
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b084      	sub	sp, #16
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008676:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2201      	movs	r2, #1
 800867c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008682:	2b01      	cmp	r3, #1
 8008684:	d108      	bne.n	8008698 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800868a:	085b      	lsrs	r3, r3, #1
 800868c:	b29b      	uxth	r3, r3
 800868e:	4619      	mov	r1, r3
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f7ff ff48 	bl	8008526 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008696:	e002      	b.n	800869e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f7ff ff30 	bl	80084fe <HAL_UART_RxHalfCpltCallback>
}
 800869e:	bf00      	nop
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c2:	2b80      	cmp	r3, #128	@ 0x80
 80086c4:	bf0c      	ite	eq
 80086c6:	2301      	moveq	r3, #1
 80086c8:	2300      	movne	r3, #0
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b21      	cmp	r3, #33	@ 0x21
 80086d8:	d108      	bne.n	80086ec <UART_DMAError+0x46>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d005      	beq.n	80086ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2200      	movs	r2, #0
 80086e4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80086e6:	68b8      	ldr	r0, [r7, #8]
 80086e8:	f000 f8c2 	bl	8008870 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f6:	2b40      	cmp	r3, #64	@ 0x40
 80086f8:	bf0c      	ite	eq
 80086fa:	2301      	moveq	r3, #1
 80086fc:	2300      	movne	r3, #0
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b22      	cmp	r3, #34	@ 0x22
 800870c:	d108      	bne.n	8008720 <UART_DMAError+0x7a>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d005      	beq.n	8008720 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2200      	movs	r2, #0
 8008718:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800871a:	68b8      	ldr	r0, [r7, #8]
 800871c:	f000 f8d0 	bl	80088c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008724:	f043 0210 	orr.w	r2, r3, #16
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800872c:	68b8      	ldr	r0, [r7, #8]
 800872e:	f7ff fef0 	bl	8008512 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b098      	sub	sp, #96	@ 0x60
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	4613      	mov	r3, r2
 8008748:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	88fa      	ldrh	r2, [r7, #6]
 8008754:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2222      	movs	r2, #34	@ 0x22
 8008760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008768:	4a3e      	ldr	r2, [pc, #248]	@ (8008864 <UART_Start_Receive_DMA+0x128>)
 800876a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008770:	4a3d      	ldr	r2, [pc, #244]	@ (8008868 <UART_Start_Receive_DMA+0x12c>)
 8008772:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008778:	4a3c      	ldr	r2, [pc, #240]	@ (800886c <UART_Start_Receive_DMA+0x130>)
 800877a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008780:	2200      	movs	r2, #0
 8008782:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008784:	f107 0308 	add.w	r3, r7, #8
 8008788:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3304      	adds	r3, #4
 8008794:	4619      	mov	r1, r3
 8008796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	88fb      	ldrh	r3, [r7, #6]
 800879c:	f7fb fa72 	bl	8003c84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80087a0:	2300      	movs	r3, #0
 80087a2:	613b      	str	r3, [r7, #16]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	613b      	str	r3, [r7, #16]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	613b      	str	r3, [r7, #16]
 80087b4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d019      	beq.n	80087f2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	330c      	adds	r3, #12
 80087c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087c8:	e853 3f00 	ldrex	r3, [r3]
 80087cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	330c      	adds	r3, #12
 80087dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087de:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80087e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80087e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087e6:	e841 2300 	strex	r3, r2, [r1]
 80087ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80087ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1e5      	bne.n	80087be <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3314      	adds	r3, #20
 80087f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008804:	f043 0301 	orr.w	r3, r3, #1
 8008808:	657b      	str	r3, [r7, #84]	@ 0x54
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3314      	adds	r3, #20
 8008810:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008812:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008814:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008818:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e5      	bne.n	80087f2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3314      	adds	r3, #20
 800882c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	e853 3f00 	ldrex	r3, [r3]
 8008834:	617b      	str	r3, [r7, #20]
   return(result);
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800883c:	653b      	str	r3, [r7, #80]	@ 0x50
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3314      	adds	r3, #20
 8008844:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008846:	627a      	str	r2, [r7, #36]	@ 0x24
 8008848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	6a39      	ldr	r1, [r7, #32]
 800884c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800884e:	e841 2300 	strex	r3, r2, [r1]
 8008852:	61fb      	str	r3, [r7, #28]
   return(result);
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1e5      	bne.n	8008826 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3760      	adds	r7, #96	@ 0x60
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	0800853f 	.word	0x0800853f
 8008868:	0800866b 	.word	0x0800866b
 800886c:	080086a7 	.word	0x080086a7

08008870 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008870:	b480      	push	{r7}
 8008872:	b089      	sub	sp, #36	@ 0x24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	330c      	adds	r3, #12
 800887e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	e853 3f00 	ldrex	r3, [r3]
 8008886:	60bb      	str	r3, [r7, #8]
   return(result);
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800888e:	61fb      	str	r3, [r7, #28]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	330c      	adds	r3, #12
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	61ba      	str	r2, [r7, #24]
 800889a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889c:	6979      	ldr	r1, [r7, #20]
 800889e:	69ba      	ldr	r2, [r7, #24]
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	613b      	str	r3, [r7, #16]
   return(result);
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1e5      	bne.n	8008878 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80088b4:	bf00      	nop
 80088b6:	3724      	adds	r7, #36	@ 0x24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b095      	sub	sp, #84	@ 0x54
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	330c      	adds	r3, #12
 80088ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d2:	e853 3f00 	ldrex	r3, [r3]
 80088d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	330c      	adds	r3, #12
 80088e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80088e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80088ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088f0:	e841 2300 	strex	r3, r2, [r1]
 80088f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1e5      	bne.n	80088c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3314      	adds	r3, #20
 8008902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	e853 3f00 	ldrex	r3, [r3]
 800890a:	61fb      	str	r3, [r7, #28]
   return(result);
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	f023 0301 	bic.w	r3, r3, #1
 8008912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3314      	adds	r3, #20
 800891a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800891c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800891e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008924:	e841 2300 	strex	r3, r2, [r1]
 8008928:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800892a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1e5      	bne.n	80088fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008934:	2b01      	cmp	r3, #1
 8008936:	d119      	bne.n	800896c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	330c      	adds	r3, #12
 800893e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	e853 3f00 	ldrex	r3, [r3]
 8008946:	60bb      	str	r3, [r7, #8]
   return(result);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f023 0310 	bic.w	r3, r3, #16
 800894e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	330c      	adds	r3, #12
 8008956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008958:	61ba      	str	r2, [r7, #24]
 800895a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	6979      	ldr	r1, [r7, #20]
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	613b      	str	r3, [r7, #16]
   return(result);
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e5      	bne.n	8008938 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2220      	movs	r2, #32
 8008970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800897a:	bf00      	nop
 800897c:	3754      	adds	r7, #84	@ 0x54
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
	...

08008988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800898c:	b0c0      	sub	sp, #256	@ 0x100
 800898e:	af00      	add	r7, sp, #0
 8008990:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80089a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089a4:	68d9      	ldr	r1, [r3, #12]
 80089a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	ea40 0301 	orr.w	r3, r0, r1
 80089b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089b6:	689a      	ldr	r2, [r3, #8]
 80089b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	431a      	orrs	r2, r3
 80089c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	431a      	orrs	r2, r3
 80089c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80089d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80089e0:	f021 010c 	bic.w	r1, r1, #12
 80089e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80089ee:	430b      	orrs	r3, r1
 80089f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80089fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a02:	6999      	ldr	r1, [r3, #24]
 8008a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	ea40 0301 	orr.w	r3, r0, r1
 8008a0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	4b8f      	ldr	r3, [pc, #572]	@ (8008c54 <UART_SetConfig+0x2cc>)
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d005      	beq.n	8008a28 <UART_SetConfig+0xa0>
 8008a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	4b8d      	ldr	r3, [pc, #564]	@ (8008c58 <UART_SetConfig+0x2d0>)
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d104      	bne.n	8008a32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a28:	f7fe ffa0 	bl	800796c <HAL_RCC_GetPCLK2Freq>
 8008a2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008a30:	e003      	b.n	8008a3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a32:	f7fe ff87 	bl	8007944 <HAL_RCC_GetPCLK1Freq>
 8008a36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a3e:	69db      	ldr	r3, [r3, #28]
 8008a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a44:	f040 810c 	bne.w	8008c60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008a52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008a56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008a5a:	4622      	mov	r2, r4
 8008a5c:	462b      	mov	r3, r5
 8008a5e:	1891      	adds	r1, r2, r2
 8008a60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008a62:	415b      	adcs	r3, r3
 8008a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	eb12 0801 	adds.w	r8, r2, r1
 8008a70:	4629      	mov	r1, r5
 8008a72:	eb43 0901 	adc.w	r9, r3, r1
 8008a76:	f04f 0200 	mov.w	r2, #0
 8008a7a:	f04f 0300 	mov.w	r3, #0
 8008a7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a8a:	4690      	mov	r8, r2
 8008a8c:	4699      	mov	r9, r3
 8008a8e:	4623      	mov	r3, r4
 8008a90:	eb18 0303 	adds.w	r3, r8, r3
 8008a94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008a98:	462b      	mov	r3, r5
 8008a9a:	eb49 0303 	adc.w	r3, r9, r3
 8008a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008aae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008ab2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	18db      	adds	r3, r3, r3
 8008aba:	653b      	str	r3, [r7, #80]	@ 0x50
 8008abc:	4613      	mov	r3, r2
 8008abe:	eb42 0303 	adc.w	r3, r2, r3
 8008ac2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ac4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008ac8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008acc:	f7f8 f8dc 	bl	8000c88 <__aeabi_uldivmod>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4b61      	ldr	r3, [pc, #388]	@ (8008c5c <UART_SetConfig+0x2d4>)
 8008ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8008ada:	095b      	lsrs	r3, r3, #5
 8008adc:	011c      	lsls	r4, r3, #4
 8008ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ae8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008aec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008af0:	4642      	mov	r2, r8
 8008af2:	464b      	mov	r3, r9
 8008af4:	1891      	adds	r1, r2, r2
 8008af6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008af8:	415b      	adcs	r3, r3
 8008afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008afc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008b00:	4641      	mov	r1, r8
 8008b02:	eb12 0a01 	adds.w	sl, r2, r1
 8008b06:	4649      	mov	r1, r9
 8008b08:	eb43 0b01 	adc.w	fp, r3, r1
 8008b0c:	f04f 0200 	mov.w	r2, #0
 8008b10:	f04f 0300 	mov.w	r3, #0
 8008b14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b20:	4692      	mov	sl, r2
 8008b22:	469b      	mov	fp, r3
 8008b24:	4643      	mov	r3, r8
 8008b26:	eb1a 0303 	adds.w	r3, sl, r3
 8008b2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b2e:	464b      	mov	r3, r9
 8008b30:	eb4b 0303 	adc.w	r3, fp, r3
 8008b34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008b48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	18db      	adds	r3, r3, r3
 8008b50:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b52:	4613      	mov	r3, r2
 8008b54:	eb42 0303 	adc.w	r3, r2, r3
 8008b58:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008b5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008b62:	f7f8 f891 	bl	8000c88 <__aeabi_uldivmod>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8008c5c <UART_SetConfig+0x2d4>)
 8008b6e:	fba3 2301 	umull	r2, r3, r3, r1
 8008b72:	095b      	lsrs	r3, r3, #5
 8008b74:	2264      	movs	r2, #100	@ 0x64
 8008b76:	fb02 f303 	mul.w	r3, r2, r3
 8008b7a:	1acb      	subs	r3, r1, r3
 8008b7c:	00db      	lsls	r3, r3, #3
 8008b7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008b82:	4b36      	ldr	r3, [pc, #216]	@ (8008c5c <UART_SetConfig+0x2d4>)
 8008b84:	fba3 2302 	umull	r2, r3, r3, r2
 8008b88:	095b      	lsrs	r3, r3, #5
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008b90:	441c      	add	r4, r3
 8008b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008ba0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008ba4:	4642      	mov	r2, r8
 8008ba6:	464b      	mov	r3, r9
 8008ba8:	1891      	adds	r1, r2, r2
 8008baa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008bac:	415b      	adcs	r3, r3
 8008bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008bb4:	4641      	mov	r1, r8
 8008bb6:	1851      	adds	r1, r2, r1
 8008bb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8008bba:	4649      	mov	r1, r9
 8008bbc:	414b      	adcs	r3, r1
 8008bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc0:	f04f 0200 	mov.w	r2, #0
 8008bc4:	f04f 0300 	mov.w	r3, #0
 8008bc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008bcc:	4659      	mov	r1, fp
 8008bce:	00cb      	lsls	r3, r1, #3
 8008bd0:	4651      	mov	r1, sl
 8008bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bd6:	4651      	mov	r1, sl
 8008bd8:	00ca      	lsls	r2, r1, #3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4603      	mov	r3, r0
 8008be0:	4642      	mov	r2, r8
 8008be2:	189b      	adds	r3, r3, r2
 8008be4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008be8:	464b      	mov	r3, r9
 8008bea:	460a      	mov	r2, r1
 8008bec:	eb42 0303 	adc.w	r3, r2, r3
 8008bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008c00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008c04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008c08:	460b      	mov	r3, r1
 8008c0a:	18db      	adds	r3, r3, r3
 8008c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c0e:	4613      	mov	r3, r2
 8008c10:	eb42 0303 	adc.w	r3, r2, r3
 8008c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008c1e:	f7f8 f833 	bl	8000c88 <__aeabi_uldivmod>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4b0d      	ldr	r3, [pc, #52]	@ (8008c5c <UART_SetConfig+0x2d4>)
 8008c28:	fba3 1302 	umull	r1, r3, r3, r2
 8008c2c:	095b      	lsrs	r3, r3, #5
 8008c2e:	2164      	movs	r1, #100	@ 0x64
 8008c30:	fb01 f303 	mul.w	r3, r1, r3
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	3332      	adds	r3, #50	@ 0x32
 8008c3a:	4a08      	ldr	r2, [pc, #32]	@ (8008c5c <UART_SetConfig+0x2d4>)
 8008c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c40:	095b      	lsrs	r3, r3, #5
 8008c42:	f003 0207 	and.w	r2, r3, #7
 8008c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4422      	add	r2, r4
 8008c4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c50:	e106      	b.n	8008e60 <UART_SetConfig+0x4d8>
 8008c52:	bf00      	nop
 8008c54:	40011000 	.word	0x40011000
 8008c58:	40011400 	.word	0x40011400
 8008c5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c64:	2200      	movs	r2, #0
 8008c66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008c6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008c6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008c72:	4642      	mov	r2, r8
 8008c74:	464b      	mov	r3, r9
 8008c76:	1891      	adds	r1, r2, r2
 8008c78:	6239      	str	r1, [r7, #32]
 8008c7a:	415b      	adcs	r3, r3
 8008c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c82:	4641      	mov	r1, r8
 8008c84:	1854      	adds	r4, r2, r1
 8008c86:	4649      	mov	r1, r9
 8008c88:	eb43 0501 	adc.w	r5, r3, r1
 8008c8c:	f04f 0200 	mov.w	r2, #0
 8008c90:	f04f 0300 	mov.w	r3, #0
 8008c94:	00eb      	lsls	r3, r5, #3
 8008c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c9a:	00e2      	lsls	r2, r4, #3
 8008c9c:	4614      	mov	r4, r2
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	4643      	mov	r3, r8
 8008ca2:	18e3      	adds	r3, r4, r3
 8008ca4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ca8:	464b      	mov	r3, r9
 8008caa:	eb45 0303 	adc.w	r3, r5, r3
 8008cae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008cbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008cc2:	f04f 0200 	mov.w	r2, #0
 8008cc6:	f04f 0300 	mov.w	r3, #0
 8008cca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008cce:	4629      	mov	r1, r5
 8008cd0:	008b      	lsls	r3, r1, #2
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cd8:	4621      	mov	r1, r4
 8008cda:	008a      	lsls	r2, r1, #2
 8008cdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008ce0:	f7f7 ffd2 	bl	8000c88 <__aeabi_uldivmod>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	4b60      	ldr	r3, [pc, #384]	@ (8008e6c <UART_SetConfig+0x4e4>)
 8008cea:	fba3 2302 	umull	r2, r3, r3, r2
 8008cee:	095b      	lsrs	r3, r3, #5
 8008cf0:	011c      	lsls	r4, r3, #4
 8008cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008cfc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008d00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008d04:	4642      	mov	r2, r8
 8008d06:	464b      	mov	r3, r9
 8008d08:	1891      	adds	r1, r2, r2
 8008d0a:	61b9      	str	r1, [r7, #24]
 8008d0c:	415b      	adcs	r3, r3
 8008d0e:	61fb      	str	r3, [r7, #28]
 8008d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d14:	4641      	mov	r1, r8
 8008d16:	1851      	adds	r1, r2, r1
 8008d18:	6139      	str	r1, [r7, #16]
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	414b      	adcs	r3, r1
 8008d1e:	617b      	str	r3, [r7, #20]
 8008d20:	f04f 0200 	mov.w	r2, #0
 8008d24:	f04f 0300 	mov.w	r3, #0
 8008d28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d2c:	4659      	mov	r1, fp
 8008d2e:	00cb      	lsls	r3, r1, #3
 8008d30:	4651      	mov	r1, sl
 8008d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d36:	4651      	mov	r1, sl
 8008d38:	00ca      	lsls	r2, r1, #3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4603      	mov	r3, r0
 8008d40:	4642      	mov	r2, r8
 8008d42:	189b      	adds	r3, r3, r2
 8008d44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d48:	464b      	mov	r3, r9
 8008d4a:	460a      	mov	r2, r1
 8008d4c:	eb42 0303 	adc.w	r3, r2, r3
 8008d50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008d60:	f04f 0200 	mov.w	r2, #0
 8008d64:	f04f 0300 	mov.w	r3, #0
 8008d68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	008b      	lsls	r3, r1, #2
 8008d70:	4641      	mov	r1, r8
 8008d72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d76:	4641      	mov	r1, r8
 8008d78:	008a      	lsls	r2, r1, #2
 8008d7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008d7e:	f7f7 ff83 	bl	8000c88 <__aeabi_uldivmod>
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	4611      	mov	r1, r2
 8008d88:	4b38      	ldr	r3, [pc, #224]	@ (8008e6c <UART_SetConfig+0x4e4>)
 8008d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8008d8e:	095b      	lsrs	r3, r3, #5
 8008d90:	2264      	movs	r2, #100	@ 0x64
 8008d92:	fb02 f303 	mul.w	r3, r2, r3
 8008d96:	1acb      	subs	r3, r1, r3
 8008d98:	011b      	lsls	r3, r3, #4
 8008d9a:	3332      	adds	r3, #50	@ 0x32
 8008d9c:	4a33      	ldr	r2, [pc, #204]	@ (8008e6c <UART_SetConfig+0x4e4>)
 8008d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008da2:	095b      	lsrs	r3, r3, #5
 8008da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008da8:	441c      	add	r4, r3
 8008daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dae:	2200      	movs	r2, #0
 8008db0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008db2:	677a      	str	r2, [r7, #116]	@ 0x74
 8008db4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008db8:	4642      	mov	r2, r8
 8008dba:	464b      	mov	r3, r9
 8008dbc:	1891      	adds	r1, r2, r2
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	415b      	adcs	r3, r3
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dc8:	4641      	mov	r1, r8
 8008dca:	1851      	adds	r1, r2, r1
 8008dcc:	6039      	str	r1, [r7, #0]
 8008dce:	4649      	mov	r1, r9
 8008dd0:	414b      	adcs	r3, r1
 8008dd2:	607b      	str	r3, [r7, #4]
 8008dd4:	f04f 0200 	mov.w	r2, #0
 8008dd8:	f04f 0300 	mov.w	r3, #0
 8008ddc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008de0:	4659      	mov	r1, fp
 8008de2:	00cb      	lsls	r3, r1, #3
 8008de4:	4651      	mov	r1, sl
 8008de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dea:	4651      	mov	r1, sl
 8008dec:	00ca      	lsls	r2, r1, #3
 8008dee:	4610      	mov	r0, r2
 8008df0:	4619      	mov	r1, r3
 8008df2:	4603      	mov	r3, r0
 8008df4:	4642      	mov	r2, r8
 8008df6:	189b      	adds	r3, r3, r2
 8008df8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dfa:	464b      	mov	r3, r9
 8008dfc:	460a      	mov	r2, r1
 8008dfe:	eb42 0303 	adc.w	r3, r2, r3
 8008e02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008e10:	f04f 0200 	mov.w	r2, #0
 8008e14:	f04f 0300 	mov.w	r3, #0
 8008e18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	008b      	lsls	r3, r1, #2
 8008e20:	4641      	mov	r1, r8
 8008e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e26:	4641      	mov	r1, r8
 8008e28:	008a      	lsls	r2, r1, #2
 8008e2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008e2e:	f7f7 ff2b 	bl	8000c88 <__aeabi_uldivmod>
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4b0d      	ldr	r3, [pc, #52]	@ (8008e6c <UART_SetConfig+0x4e4>)
 8008e38:	fba3 1302 	umull	r1, r3, r3, r2
 8008e3c:	095b      	lsrs	r3, r3, #5
 8008e3e:	2164      	movs	r1, #100	@ 0x64
 8008e40:	fb01 f303 	mul.w	r3, r1, r3
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	011b      	lsls	r3, r3, #4
 8008e48:	3332      	adds	r3, #50	@ 0x32
 8008e4a:	4a08      	ldr	r2, [pc, #32]	@ (8008e6c <UART_SetConfig+0x4e4>)
 8008e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e50:	095b      	lsrs	r3, r3, #5
 8008e52:	f003 020f 	and.w	r2, r3, #15
 8008e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4422      	add	r2, r4
 8008e5e:	609a      	str	r2, [r3, #8]
}
 8008e60:	bf00      	nop
 8008e62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008e66:	46bd      	mov	sp, r7
 8008e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e6c:	51eb851f 	.word	0x51eb851f

08008e70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e70:	b084      	sub	sp, #16
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	f107 001c 	add.w	r0, r7, #28
 8008e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d123      	bne.n	8008ed2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d105      	bne.n	8008ec6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 fae8 	bl	800a49c <USB_CoreReset>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73fb      	strb	r3, [r7, #15]
 8008ed0:	e01b      	b.n	8008f0a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f001 fadc 	bl	800a49c <USB_CoreReset>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ee8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d106      	bne.n	8008efe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	639a      	str	r2, [r3, #56]	@ 0x38
 8008efc:	e005      	b.n	8008f0a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f0a:	7fbb      	ldrb	r3, [r7, #30]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d10b      	bne.n	8008f28 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f043 0206 	orr.w	r2, r3, #6
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f043 0220 	orr.w	r2, r3, #32
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f34:	b004      	add	sp, #16
 8008f36:	4770      	bx	lr

08008f38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	4613      	mov	r3, r2
 8008f44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008f46:	79fb      	ldrb	r3, [r7, #7]
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d165      	bne.n	8009018 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4a41      	ldr	r2, [pc, #260]	@ (8009054 <USB_SetTurnaroundTime+0x11c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d906      	bls.n	8008f62 <USB_SetTurnaroundTime+0x2a>
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	4a40      	ldr	r2, [pc, #256]	@ (8009058 <USB_SetTurnaroundTime+0x120>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d202      	bcs.n	8008f62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008f5c:	230f      	movs	r3, #15
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	e062      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	4a3c      	ldr	r2, [pc, #240]	@ (8009058 <USB_SetTurnaroundTime+0x120>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d306      	bcc.n	8008f78 <USB_SetTurnaroundTime+0x40>
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	4a3b      	ldr	r2, [pc, #236]	@ (800905c <USB_SetTurnaroundTime+0x124>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d202      	bcs.n	8008f78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008f72:	230e      	movs	r3, #14
 8008f74:	617b      	str	r3, [r7, #20]
 8008f76:	e057      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	4a38      	ldr	r2, [pc, #224]	@ (800905c <USB_SetTurnaroundTime+0x124>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d306      	bcc.n	8008f8e <USB_SetTurnaroundTime+0x56>
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	4a37      	ldr	r2, [pc, #220]	@ (8009060 <USB_SetTurnaroundTime+0x128>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d202      	bcs.n	8008f8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008f88:	230d      	movs	r3, #13
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	e04c      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	4a33      	ldr	r2, [pc, #204]	@ (8009060 <USB_SetTurnaroundTime+0x128>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d306      	bcc.n	8008fa4 <USB_SetTurnaroundTime+0x6c>
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	4a32      	ldr	r2, [pc, #200]	@ (8009064 <USB_SetTurnaroundTime+0x12c>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d802      	bhi.n	8008fa4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	617b      	str	r3, [r7, #20]
 8008fa2:	e041      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	4a2f      	ldr	r2, [pc, #188]	@ (8009064 <USB_SetTurnaroundTime+0x12c>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d906      	bls.n	8008fba <USB_SetTurnaroundTime+0x82>
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	4a2e      	ldr	r2, [pc, #184]	@ (8009068 <USB_SetTurnaroundTime+0x130>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d802      	bhi.n	8008fba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008fb4:	230b      	movs	r3, #11
 8008fb6:	617b      	str	r3, [r7, #20]
 8008fb8:	e036      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8009068 <USB_SetTurnaroundTime+0x130>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d906      	bls.n	8008fd0 <USB_SetTurnaroundTime+0x98>
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	4a29      	ldr	r2, [pc, #164]	@ (800906c <USB_SetTurnaroundTime+0x134>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d802      	bhi.n	8008fd0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008fca:	230a      	movs	r3, #10
 8008fcc:	617b      	str	r3, [r7, #20]
 8008fce:	e02b      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	4a26      	ldr	r2, [pc, #152]	@ (800906c <USB_SetTurnaroundTime+0x134>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d906      	bls.n	8008fe6 <USB_SetTurnaroundTime+0xae>
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	4a25      	ldr	r2, [pc, #148]	@ (8009070 <USB_SetTurnaroundTime+0x138>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d202      	bcs.n	8008fe6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008fe0:	2309      	movs	r3, #9
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	e020      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	4a21      	ldr	r2, [pc, #132]	@ (8009070 <USB_SetTurnaroundTime+0x138>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d306      	bcc.n	8008ffc <USB_SetTurnaroundTime+0xc4>
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	4a20      	ldr	r2, [pc, #128]	@ (8009074 <USB_SetTurnaroundTime+0x13c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d802      	bhi.n	8008ffc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008ff6:	2308      	movs	r3, #8
 8008ff8:	617b      	str	r3, [r7, #20]
 8008ffa:	e015      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8009074 <USB_SetTurnaroundTime+0x13c>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d906      	bls.n	8009012 <USB_SetTurnaroundTime+0xda>
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	4a1c      	ldr	r2, [pc, #112]	@ (8009078 <USB_SetTurnaroundTime+0x140>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d202      	bcs.n	8009012 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800900c:	2307      	movs	r3, #7
 800900e:	617b      	str	r3, [r7, #20]
 8009010:	e00a      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009012:	2306      	movs	r3, #6
 8009014:	617b      	str	r3, [r7, #20]
 8009016:	e007      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009018:	79fb      	ldrb	r3, [r7, #7]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d102      	bne.n	8009024 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800901e:	2309      	movs	r3, #9
 8009020:	617b      	str	r3, [r7, #20]
 8009022:	e001      	b.n	8009028 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009024:	2309      	movs	r3, #9
 8009026:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	029b      	lsls	r3, r3, #10
 800903c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009040:	431a      	orrs	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	371c      	adds	r7, #28
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	00d8acbf 	.word	0x00d8acbf
 8009058:	00e4e1c0 	.word	0x00e4e1c0
 800905c:	00f42400 	.word	0x00f42400
 8009060:	01067380 	.word	0x01067380
 8009064:	011a499f 	.word	0x011a499f
 8009068:	01312cff 	.word	0x01312cff
 800906c:	014ca43f 	.word	0x014ca43f
 8009070:	016e3600 	.word	0x016e3600
 8009074:	01a6ab1f 	.word	0x01a6ab1f
 8009078:	01e84800 	.word	0x01e84800

0800907c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f043 0201 	orr.w	r2, r3, #1
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	370c      	adds	r7, #12
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800909e:	b480      	push	{r7}
 80090a0:	b083      	sub	sp, #12
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f023 0201 	bic.w	r2, r3, #1
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80090dc:	78fb      	ldrb	r3, [r7, #3]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d115      	bne.n	800910e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80090ee:	200a      	movs	r0, #10
 80090f0:	f7fa fbe4 	bl	80038bc <HAL_Delay>
      ms += 10U;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	330a      	adds	r3, #10
 80090f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f001 f93f 	bl	800a37e <USB_GetMode>
 8009100:	4603      	mov	r3, r0
 8009102:	2b01      	cmp	r3, #1
 8009104:	d01e      	beq.n	8009144 <USB_SetCurrentMode+0x84>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2bc7      	cmp	r3, #199	@ 0xc7
 800910a:	d9f0      	bls.n	80090ee <USB_SetCurrentMode+0x2e>
 800910c:	e01a      	b.n	8009144 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d115      	bne.n	8009140 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009120:	200a      	movs	r0, #10
 8009122:	f7fa fbcb 	bl	80038bc <HAL_Delay>
      ms += 10U;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	330a      	adds	r3, #10
 800912a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 f926 	bl	800a37e <USB_GetMode>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d005      	beq.n	8009144 <USB_SetCurrentMode+0x84>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2bc7      	cmp	r3, #199	@ 0xc7
 800913c:	d9f0      	bls.n	8009120 <USB_SetCurrentMode+0x60>
 800913e:	e001      	b.n	8009144 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e005      	b.n	8009150 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2bc8      	cmp	r3, #200	@ 0xc8
 8009148:	d101      	bne.n	800914e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e000      	b.n	8009150 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009158:	b084      	sub	sp, #16
 800915a:	b580      	push	{r7, lr}
 800915c:	b086      	sub	sp, #24
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009172:	2300      	movs	r3, #0
 8009174:	613b      	str	r3, [r7, #16]
 8009176:	e009      	b.n	800918c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	3340      	adds	r3, #64	@ 0x40
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	2200      	movs	r2, #0
 8009184:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	3301      	adds	r3, #1
 800918a:	613b      	str	r3, [r7, #16]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	2b0e      	cmp	r3, #14
 8009190:	d9f2      	bls.n	8009178 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009192:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009196:	2b00      	cmp	r3, #0
 8009198:	d11c      	bne.n	80091d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091a8:	f043 0302 	orr.w	r3, r3, #2
 80091ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80091d2:	e00b      	b.n	80091ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80091f2:	461a      	mov	r2, r3
 80091f4:	2300      	movs	r3, #0
 80091f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d10d      	bne.n	800921c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009204:	2b00      	cmp	r3, #0
 8009206:	d104      	bne.n	8009212 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009208:	2100      	movs	r1, #0
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f968 	bl	80094e0 <USB_SetDevSpeed>
 8009210:	e008      	b.n	8009224 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009212:	2101      	movs	r1, #1
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f963 	bl	80094e0 <USB_SetDevSpeed>
 800921a:	e003      	b.n	8009224 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800921c:	2103      	movs	r1, #3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f95e 	bl	80094e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009224:	2110      	movs	r1, #16
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f8fa 	bl	8009420 <USB_FlushTxFifo>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f924 	bl	8009484 <USB_FlushRxFifo>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800924c:	461a      	mov	r2, r3
 800924e:	2300      	movs	r3, #0
 8009250:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009258:	461a      	mov	r2, r3
 800925a:	2300      	movs	r3, #0
 800925c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009264:	461a      	mov	r2, r3
 8009266:	2300      	movs	r3, #0
 8009268:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800926a:	2300      	movs	r3, #0
 800926c:	613b      	str	r3, [r7, #16]
 800926e:	e043      	b.n	80092f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009282:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009286:	d118      	bne.n	80092ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10a      	bne.n	80092a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	4413      	add	r3, r2
 8009296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800929a:	461a      	mov	r2, r3
 800929c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	e013      	b.n	80092cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092b0:	461a      	mov	r2, r3
 80092b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	e008      	b.n	80092cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092c6:	461a      	mov	r2, r3
 80092c8:	2300      	movs	r3, #0
 80092ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092d8:	461a      	mov	r2, r3
 80092da:	2300      	movs	r3, #0
 80092dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ea:	461a      	mov	r2, r3
 80092ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80092f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	3301      	adds	r3, #1
 80092f6:	613b      	str	r3, [r7, #16]
 80092f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80092fc:	461a      	mov	r2, r3
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	4293      	cmp	r3, r2
 8009302:	d3b5      	bcc.n	8009270 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009304:	2300      	movs	r3, #0
 8009306:	613b      	str	r3, [r7, #16]
 8009308:	e043      	b.n	8009392 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800931c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009320:	d118      	bne.n	8009354 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009334:	461a      	mov	r2, r3
 8009336:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	e013      	b.n	8009366 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	4413      	add	r3, r2
 8009346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800934a:	461a      	mov	r2, r3
 800934c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009350:	6013      	str	r3, [r2, #0]
 8009352:	e008      	b.n	8009366 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009360:	461a      	mov	r2, r3
 8009362:	2300      	movs	r3, #0
 8009364:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009372:	461a      	mov	r2, r3
 8009374:	2300      	movs	r3, #0
 8009376:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4413      	add	r3, r2
 8009380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009384:	461a      	mov	r2, r3
 8009386:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800938a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	3301      	adds	r3, #1
 8009390:	613b      	str	r3, [r7, #16]
 8009392:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009396:	461a      	mov	r2, r3
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	4293      	cmp	r3, r2
 800939c:	d3b5      	bcc.n	800930a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80093be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80093c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d105      	bne.n	80093d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	f043 0210 	orr.w	r2, r3, #16
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	699a      	ldr	r2, [r3, #24]
 80093d8:	4b10      	ldr	r3, [pc, #64]	@ (800941c <USB_DevInit+0x2c4>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80093e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	f043 0208 	orr.w	r2, r3, #8
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80093f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d107      	bne.n	800940c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009404:	f043 0304 	orr.w	r3, r3, #4
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009418:	b004      	add	sp, #16
 800941a:	4770      	bx	lr
 800941c:	803c3800 	.word	0x803c3800

08009420 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3301      	adds	r3, #1
 8009432:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800943a:	d901      	bls.n	8009440 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e01b      	b.n	8009478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	daf2      	bge.n	800942e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	019b      	lsls	r3, r3, #6
 8009450:	f043 0220 	orr.w	r2, r3, #32
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3301      	adds	r3, #1
 800945c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009464:	d901      	bls.n	800946a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e006      	b.n	8009478 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	f003 0320 	and.w	r3, r3, #32
 8009472:	2b20      	cmp	r3, #32
 8009474:	d0f0      	beq.n	8009458 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3301      	adds	r3, #1
 8009494:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800949c:	d901      	bls.n	80094a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e018      	b.n	80094d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	daf2      	bge.n	8009490 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2210      	movs	r2, #16
 80094b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	3301      	adds	r3, #1
 80094b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094c0:	d901      	bls.n	80094c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e006      	b.n	80094d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f003 0310 	and.w	r3, r3, #16
 80094ce:	2b10      	cmp	r3, #16
 80094d0:	d0f0      	beq.n	80094b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	68f9      	ldr	r1, [r7, #12]
 80094fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009500:	4313      	orrs	r3, r2
 8009502:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009512:	b480      	push	{r7}
 8009514:	b087      	sub	sp, #28
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f003 0306 	and.w	r3, r3, #6
 800952a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d102      	bne.n	8009538 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009532:	2300      	movs	r3, #0
 8009534:	75fb      	strb	r3, [r7, #23]
 8009536:	e00a      	b.n	800954e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d002      	beq.n	8009544 <USB_GetDevSpeed+0x32>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2b06      	cmp	r3, #6
 8009542:	d102      	bne.n	800954a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009544:	2302      	movs	r3, #2
 8009546:	75fb      	strb	r3, [r7, #23]
 8009548:	e001      	b.n	800954e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800954a:	230f      	movs	r3, #15
 800954c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800954e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009550:	4618      	mov	r0, r3
 8009552:	371c      	adds	r7, #28
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	785b      	ldrb	r3, [r3, #1]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d13a      	bne.n	80095ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800957e:	69da      	ldr	r2, [r3, #28]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	f003 030f 	and.w	r3, r3, #15
 8009588:	2101      	movs	r1, #1
 800958a:	fa01 f303 	lsl.w	r3, r1, r3
 800958e:	b29b      	uxth	r3, r3
 8009590:	68f9      	ldr	r1, [r7, #12]
 8009592:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009596:	4313      	orrs	r3, r2
 8009598:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d155      	bne.n	800965c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	791b      	ldrb	r3, [r3, #4]
 80095ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	059b      	lsls	r3, r3, #22
 80095d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095d4:	4313      	orrs	r3, r2
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	0151      	lsls	r1, r2, #5
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	440a      	add	r2, r1
 80095de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	e036      	b.n	800965c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095f4:	69da      	ldr	r2, [r3, #28]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	2101      	movs	r1, #1
 8009600:	fa01 f303 	lsl.w	r3, r1, r3
 8009604:	041b      	lsls	r3, r3, #16
 8009606:	68f9      	ldr	r1, [r7, #12]
 8009608:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800960c:	4313      	orrs	r3, r2
 800960e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d11a      	bne.n	800965c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	4413      	add	r3, r2
 800962e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	791b      	ldrb	r3, [r3, #4]
 8009640:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009642:	430b      	orrs	r3, r1
 8009644:	4313      	orrs	r3, r2
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	0151      	lsls	r1, r2, #5
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	440a      	add	r2, r1
 800964e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800965a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
	...

0800966c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	785b      	ldrb	r3, [r3, #1]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d161      	bne.n	800974c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800969a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800969e:	d11f      	bne.n	80096e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	0151      	lsls	r1, r2, #5
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	440a      	add	r2, r1
 80096b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80096be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	0151      	lsls	r1, r2, #5
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	440a      	add	r2, r1
 80096d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	f003 030f 	and.w	r3, r3, #15
 80096f0:	2101      	movs	r1, #1
 80096f2:	fa01 f303 	lsl.w	r3, r1, r3
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	43db      	mvns	r3, r3
 80096fa:	68f9      	ldr	r1, [r7, #12]
 80096fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009700:	4013      	ands	r3, r2
 8009702:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800970a:	69da      	ldr	r2, [r3, #28]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	f003 030f 	and.w	r3, r3, #15
 8009714:	2101      	movs	r1, #1
 8009716:	fa01 f303 	lsl.w	r3, r1, r3
 800971a:	b29b      	uxth	r3, r3
 800971c:	43db      	mvns	r3, r3
 800971e:	68f9      	ldr	r1, [r7, #12]
 8009720:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009724:	4013      	ands	r3, r2
 8009726:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4413      	add	r3, r2
 8009730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	0159      	lsls	r1, r3, #5
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	440b      	add	r3, r1
 800973e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009742:	4619      	mov	r1, r3
 8009744:	4b35      	ldr	r3, [pc, #212]	@ (800981c <USB_DeactivateEndpoint+0x1b0>)
 8009746:	4013      	ands	r3, r2
 8009748:	600b      	str	r3, [r1, #0]
 800974a:	e060      	b.n	800980e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800975e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009762:	d11f      	bne.n	80097a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4413      	add	r3, r2
 800976c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	0151      	lsls	r1, r2, #5
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	440a      	add	r2, r1
 800977a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800977e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009782:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	4413      	add	r3, r2
 800978c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	0151      	lsls	r1, r2, #5
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	440a      	add	r2, r1
 800979a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800979e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	f003 030f 	and.w	r3, r3, #15
 80097b4:	2101      	movs	r1, #1
 80097b6:	fa01 f303 	lsl.w	r3, r1, r3
 80097ba:	041b      	lsls	r3, r3, #16
 80097bc:	43db      	mvns	r3, r3
 80097be:	68f9      	ldr	r1, [r7, #12]
 80097c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097c4:	4013      	ands	r3, r2
 80097c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ce:	69da      	ldr	r2, [r3, #28]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	f003 030f 	and.w	r3, r3, #15
 80097d8:	2101      	movs	r1, #1
 80097da:	fa01 f303 	lsl.w	r3, r1, r3
 80097de:	041b      	lsls	r3, r3, #16
 80097e0:	43db      	mvns	r3, r3
 80097e2:	68f9      	ldr	r1, [r7, #12]
 80097e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097e8:	4013      	ands	r3, r2
 80097ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	0159      	lsls	r1, r3, #5
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	440b      	add	r3, r1
 8009802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009806:	4619      	mov	r1, r3
 8009808:	4b05      	ldr	r3, [pc, #20]	@ (8009820 <USB_DeactivateEndpoint+0x1b4>)
 800980a:	4013      	ands	r3, r2
 800980c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	ec337800 	.word	0xec337800
 8009820:	eff37800 	.word	0xeff37800

08009824 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08a      	sub	sp, #40	@ 0x28
 8009828:	af02      	add	r7, sp, #8
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	4613      	mov	r3, r2
 8009830:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	2b01      	cmp	r3, #1
 8009842:	f040 817f 	bne.w	8009b44 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d132      	bne.n	80098b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	4413      	add	r3, r2
 8009856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	69fa      	ldr	r2, [r7, #28]
 8009862:	440a      	add	r2, r1
 8009864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009868:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800986c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009870:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	4413      	add	r3, r2
 800987a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	69ba      	ldr	r2, [r7, #24]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	69fa      	ldr	r2, [r7, #28]
 8009886:	440a      	add	r2, r1
 8009888:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800988c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009890:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	69fa      	ldr	r2, [r7, #28]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ac:	0cdb      	lsrs	r3, r3, #19
 80098ae:	04db      	lsls	r3, r3, #19
 80098b0:	6113      	str	r3, [r2, #16]
 80098b2:	e097      	b.n	80099e4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	015a      	lsls	r2, r3, #5
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	4413      	add	r3, r2
 80098bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	0151      	lsls	r1, r2, #5
 80098c6:	69fa      	ldr	r2, [r7, #28]
 80098c8:	440a      	add	r2, r1
 80098ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ce:	0cdb      	lsrs	r3, r3, #19
 80098d0:	04db      	lsls	r3, r3, #19
 80098d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	0151      	lsls	r1, r2, #5
 80098e6:	69fa      	ldr	r2, [r7, #28]
 80098e8:	440a      	add	r2, r1
 80098ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80098f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80098f6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d11a      	bne.n	8009934 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	691a      	ldr	r2, [r3, #16]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	429a      	cmp	r2, r3
 8009908:	d903      	bls.n	8009912 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	689a      	ldr	r2, [r3, #8]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	015a      	lsls	r2, r3, #5
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	4413      	add	r3, r2
 800991a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	0151      	lsls	r1, r2, #5
 8009924:	69fa      	ldr	r2, [r7, #28]
 8009926:	440a      	add	r2, r1
 8009928:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800992c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009930:	6113      	str	r3, [r2, #16]
 8009932:	e044      	b.n	80099be <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	691a      	ldr	r2, [r3, #16]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	4413      	add	r3, r2
 800993e:	1e5a      	subs	r2, r3, #1
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	fbb2 f3f3 	udiv	r3, r2, r3
 8009948:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	4413      	add	r3, r2
 8009952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009956:	691a      	ldr	r2, [r3, #16]
 8009958:	8afb      	ldrh	r3, [r7, #22]
 800995a:	04d9      	lsls	r1, r3, #19
 800995c:	4ba4      	ldr	r3, [pc, #656]	@ (8009bf0 <USB_EPStartXfer+0x3cc>)
 800995e:	400b      	ands	r3, r1
 8009960:	69b9      	ldr	r1, [r7, #24]
 8009962:	0148      	lsls	r0, r1, #5
 8009964:	69f9      	ldr	r1, [r7, #28]
 8009966:	4401      	add	r1, r0
 8009968:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800996c:	4313      	orrs	r3, r2
 800996e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	791b      	ldrb	r3, [r3, #4]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d122      	bne.n	80099be <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	69ba      	ldr	r2, [r7, #24]
 8009988:	0151      	lsls	r1, r2, #5
 800998a:	69fa      	ldr	r2, [r7, #28]
 800998c:	440a      	add	r2, r1
 800998e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009992:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009996:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a4:	691a      	ldr	r2, [r3, #16]
 80099a6:	8afb      	ldrh	r3, [r7, #22]
 80099a8:	075b      	lsls	r3, r3, #29
 80099aa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80099ae:	69b9      	ldr	r1, [r7, #24]
 80099b0:	0148      	lsls	r0, r1, #5
 80099b2:	69f9      	ldr	r1, [r7, #28]
 80099b4:	4401      	add	r1, r0
 80099b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80099ba:	4313      	orrs	r3, r2
 80099bc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ca:	691a      	ldr	r2, [r3, #16]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099d4:	69b9      	ldr	r1, [r7, #24]
 80099d6:	0148      	lsls	r0, r1, #5
 80099d8:	69f9      	ldr	r1, [r7, #28]
 80099da:	4401      	add	r1, r0
 80099dc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80099e0:	4313      	orrs	r3, r2
 80099e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80099e4:	79fb      	ldrb	r3, [r7, #7]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d14b      	bne.n	8009a82 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d009      	beq.n	8009a06 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	015a      	lsls	r2, r3, #5
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099fe:	461a      	mov	r2, r3
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	791b      	ldrb	r3, [r3, #4]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d128      	bne.n	8009a60 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d110      	bne.n	8009a40 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	69ba      	ldr	r2, [r7, #24]
 8009a2e:	0151      	lsls	r1, r2, #5
 8009a30:	69fa      	ldr	r2, [r7, #28]
 8009a32:	440a      	add	r2, r1
 8009a34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	e00f      	b.n	8009a60 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	0151      	lsls	r1, r2, #5
 8009a52:	69fa      	ldr	r2, [r7, #28]
 8009a54:	440a      	add	r2, r1
 8009a56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a5e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	69fa      	ldr	r2, [r7, #28]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a7a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	e166      	b.n	8009d50 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	69ba      	ldr	r2, [r7, #24]
 8009a92:	0151      	lsls	r1, r2, #5
 8009a94:	69fa      	ldr	r2, [r7, #28]
 8009a96:	440a      	add	r2, r1
 8009a98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a9c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009aa0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	791b      	ldrb	r3, [r3, #4]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d015      	beq.n	8009ad6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f000 814e 	beq.w	8009d50 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	f003 030f 	and.w	r3, r3, #15
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aca:	69f9      	ldr	r1, [r7, #28]
 8009acc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	634b      	str	r3, [r1, #52]	@ 0x34
 8009ad4:	e13c      	b.n	8009d50 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d110      	bne.n	8009b08 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	69ba      	ldr	r2, [r7, #24]
 8009af6:	0151      	lsls	r1, r2, #5
 8009af8:	69fa      	ldr	r2, [r7, #28]
 8009afa:	440a      	add	r2, r1
 8009afc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	e00f      	b.n	8009b28 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	015a      	lsls	r2, r3, #5
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	69ba      	ldr	r2, [r7, #24]
 8009b18:	0151      	lsls	r1, r2, #5
 8009b1a:	69fa      	ldr	r2, [r7, #28]
 8009b1c:	440a      	add	r2, r1
 8009b1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b26:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	68d9      	ldr	r1, [r3, #12]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	781a      	ldrb	r2, [r3, #0]
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	b298      	uxth	r0, r3
 8009b36:	79fb      	ldrb	r3, [r7, #7]
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f000 f9b9 	bl	8009eb4 <USB_WritePacket>
 8009b42:	e105      	b.n	8009d50 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	0151      	lsls	r1, r2, #5
 8009b56:	69fa      	ldr	r2, [r7, #28]
 8009b58:	440a      	add	r2, r1
 8009b5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b5e:	0cdb      	lsrs	r3, r3, #19
 8009b60:	04db      	lsls	r3, r3, #19
 8009b62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	015a      	lsls	r2, r3, #5
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	69ba      	ldr	r2, [r7, #24]
 8009b74:	0151      	lsls	r1, r2, #5
 8009b76:	69fa      	ldr	r2, [r7, #28]
 8009b78:	440a      	add	r2, r1
 8009b7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b7e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009b82:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009b86:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d132      	bne.n	8009bf4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d003      	beq.n	8009b9e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	689a      	ldr	r2, [r3, #8]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	689a      	ldr	r2, [r3, #8]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	015a      	lsls	r2, r3, #5
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	4413      	add	r3, r2
 8009bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bb2:	691a      	ldr	r2, [r3, #16]
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bbc:	69b9      	ldr	r1, [r7, #24]
 8009bbe:	0148      	lsls	r0, r1, #5
 8009bc0:	69f9      	ldr	r1, [r7, #28]
 8009bc2:	4401      	add	r1, r0
 8009bc4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	015a      	lsls	r2, r3, #5
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	0151      	lsls	r1, r2, #5
 8009bde:	69fa      	ldr	r2, [r7, #28]
 8009be0:	440a      	add	r2, r1
 8009be2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009be6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009bea:	6113      	str	r3, [r2, #16]
 8009bec:	e062      	b.n	8009cb4 <USB_EPStartXfer+0x490>
 8009bee:	bf00      	nop
 8009bf0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d123      	bne.n	8009c44 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	015a      	lsls	r2, r3, #5
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	4413      	add	r3, r2
 8009c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c08:	691a      	ldr	r2, [r3, #16]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c12:	69b9      	ldr	r1, [r7, #24]
 8009c14:	0148      	lsls	r0, r1, #5
 8009c16:	69f9      	ldr	r1, [r7, #28]
 8009c18:	4401      	add	r1, r0
 8009c1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	69ba      	ldr	r2, [r7, #24]
 8009c32:	0151      	lsls	r1, r2, #5
 8009c34:	69fa      	ldr	r2, [r7, #28]
 8009c36:	440a      	add	r2, r1
 8009c38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c40:	6113      	str	r3, [r2, #16]
 8009c42:	e037      	b.n	8009cb4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	691a      	ldr	r2, [r3, #16]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	1e5a      	subs	r2, r3, #1
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c58:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	8afa      	ldrh	r2, [r7, #22]
 8009c60:	fb03 f202 	mul.w	r2, r3, r2
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c74:	691a      	ldr	r2, [r3, #16]
 8009c76:	8afb      	ldrh	r3, [r7, #22]
 8009c78:	04d9      	lsls	r1, r3, #19
 8009c7a:	4b38      	ldr	r3, [pc, #224]	@ (8009d5c <USB_EPStartXfer+0x538>)
 8009c7c:	400b      	ands	r3, r1
 8009c7e:	69b9      	ldr	r1, [r7, #24]
 8009c80:	0148      	lsls	r0, r1, #5
 8009c82:	69f9      	ldr	r1, [r7, #28]
 8009c84:	4401      	add	r1, r0
 8009c86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	015a      	lsls	r2, r3, #5
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	4413      	add	r3, r2
 8009c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c9a:	691a      	ldr	r2, [r3, #16]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ca4:	69b9      	ldr	r1, [r7, #24]
 8009ca6:	0148      	lsls	r0, r1, #5
 8009ca8:	69f9      	ldr	r1, [r7, #28]
 8009caa:	4401      	add	r1, r0
 8009cac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009cb4:	79fb      	ldrb	r3, [r7, #7]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d10d      	bne.n	8009cd6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d009      	beq.n	8009cd6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	68d9      	ldr	r1, [r3, #12]
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	015a      	lsls	r2, r3, #5
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	4413      	add	r3, r2
 8009cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cd2:	460a      	mov	r2, r1
 8009cd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	791b      	ldrb	r3, [r3, #4]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d128      	bne.n	8009d30 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d110      	bne.n	8009d10 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	69ba      	ldr	r2, [r7, #24]
 8009cfe:	0151      	lsls	r1, r2, #5
 8009d00:	69fa      	ldr	r2, [r7, #28]
 8009d02:	440a      	add	r2, r1
 8009d04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009d0c:	6013      	str	r3, [r2, #0]
 8009d0e:	e00f      	b.n	8009d30 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	69ba      	ldr	r2, [r7, #24]
 8009d20:	0151      	lsls	r1, r2, #5
 8009d22:	69fa      	ldr	r2, [r7, #28]
 8009d24:	440a      	add	r2, r1
 8009d26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	69ba      	ldr	r2, [r7, #24]
 8009d40:	0151      	lsls	r1, r2, #5
 8009d42:	69fa      	ldr	r2, [r7, #28]
 8009d44:	440a      	add	r2, r1
 8009d46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d4a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3720      	adds	r7, #32
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	1ff80000 	.word	0x1ff80000

08009d60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b087      	sub	sp, #28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	785b      	ldrb	r3, [r3, #1]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d14a      	bne.n	8009e14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d96:	f040 8086 	bne.w	8009ea6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	7812      	ldrb	r2, [r2, #0]
 8009dae:	0151      	lsls	r1, r2, #5
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	440a      	add	r2, r1
 8009db4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009db8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009dbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	7812      	ldrb	r2, [r2, #0]
 8009dd2:	0151      	lsls	r1, r2, #5
 8009dd4:	693a      	ldr	r2, [r7, #16]
 8009dd6:	440a      	add	r2, r1
 8009dd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ddc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009de0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3301      	adds	r3, #1
 8009de6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d902      	bls.n	8009df8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	75fb      	strb	r3, [r7, #23]
          break;
 8009df6:	e056      	b.n	8009ea6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e10:	d0e7      	beq.n	8009de2 <USB_EPStopXfer+0x82>
 8009e12:	e048      	b.n	8009ea6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e2c:	d13b      	bne.n	8009ea6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	7812      	ldrb	r2, [r2, #0]
 8009e42:	0151      	lsls	r1, r2, #5
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	440a      	add	r2, r1
 8009e48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	7812      	ldrb	r2, [r2, #0]
 8009e66:	0151      	lsls	r1, r2, #5
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	440a      	add	r2, r1
 8009e6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d902      	bls.n	8009e8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	75fb      	strb	r3, [r7, #23]
          break;
 8009e8a:	e00c      	b.n	8009ea6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ea4:	d0e7      	beq.n	8009e76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	371c      	adds	r7, #28
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b089      	sub	sp, #36	@ 0x24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	71fb      	strb	r3, [r7, #7]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009ed2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d123      	bne.n	8009f22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009eda:	88bb      	ldrh	r3, [r7, #4]
 8009edc:	3303      	adds	r3, #3
 8009ede:	089b      	lsrs	r3, r3, #2
 8009ee0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	61bb      	str	r3, [r7, #24]
 8009ee6:	e018      	b.n	8009f1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009ee8:	79fb      	ldrb	r3, [r7, #7]
 8009eea:	031a      	lsls	r2, r3, #12
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	3301      	adds	r3, #1
 8009f00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	3301      	adds	r3, #1
 8009f06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	3301      	adds	r3, #1
 8009f12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	3301      	adds	r3, #1
 8009f18:	61bb      	str	r3, [r7, #24]
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d3e2      	bcc.n	8009ee8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3724      	adds	r7, #36	@ 0x24
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b08b      	sub	sp, #44	@ 0x2c
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009f46:	88fb      	ldrh	r3, [r7, #6]
 8009f48:	089b      	lsrs	r3, r3, #2
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009f4e:	88fb      	ldrh	r3, [r7, #6]
 8009f50:	f003 0303 	and.w	r3, r3, #3
 8009f54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009f56:	2300      	movs	r3, #0
 8009f58:	623b      	str	r3, [r7, #32]
 8009f5a:	e014      	b.n	8009f86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f66:	601a      	str	r2, [r3, #0]
    pDest++;
 8009f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f70:	3301      	adds	r3, #1
 8009f72:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f76:	3301      	adds	r3, #1
 8009f78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009f80:	6a3b      	ldr	r3, [r7, #32]
 8009f82:	3301      	adds	r3, #1
 8009f84:	623b      	str	r3, [r7, #32]
 8009f86:	6a3a      	ldr	r2, [r7, #32]
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d3e6      	bcc.n	8009f5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009f8e:	8bfb      	ldrh	r3, [r7, #30]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d01e      	beq.n	8009fd2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009f94:	2300      	movs	r3, #0
 8009f96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	f107 0310 	add.w	r3, r7, #16
 8009fa4:	6812      	ldr	r2, [r2, #0]
 8009fa6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	00db      	lsls	r3, r3, #3
 8009fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb4:	b2da      	uxtb	r2, r3
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb8:	701a      	strb	r2, [r3, #0]
      i++;
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	623b      	str	r3, [r7, #32]
      pDest++;
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009fc6:	8bfb      	ldrh	r3, [r7, #30]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009fcc:	8bfb      	ldrh	r3, [r7, #30]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1ea      	bne.n	8009fa8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	372c      	adds	r7, #44	@ 0x2c
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	785b      	ldrb	r3, [r3, #1]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d12c      	bne.n	800a056 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	015a      	lsls	r2, r3, #5
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	4413      	add	r3, r2
 800a004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	db12      	blt.n	800a034 <USB_EPSetStall+0x54>
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00f      	beq.n	800a034 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	015a      	lsls	r2, r3, #5
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	4413      	add	r3, r2
 800a01c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	0151      	lsls	r1, r2, #5
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	440a      	add	r2, r1
 800a02a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a02e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a032:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	015a      	lsls	r2, r3, #5
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	4413      	add	r3, r2
 800a03c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	0151      	lsls	r1, r2, #5
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	440a      	add	r2, r1
 800a04a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a04e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	e02b      	b.n	800a0ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	015a      	lsls	r2, r3, #5
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	4413      	add	r3, r2
 800a05e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	db12      	blt.n	800a08e <USB_EPSetStall+0xae>
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00f      	beq.n	800a08e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	015a      	lsls	r2, r3, #5
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	4413      	add	r3, r2
 800a076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	0151      	lsls	r1, r2, #5
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	440a      	add	r2, r1
 800a084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a088:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a08c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	015a      	lsls	r2, r3, #5
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	4413      	add	r3, r2
 800a096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	0151      	lsls	r1, r2, #5
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	440a      	add	r2, r1
 800a0a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a0ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	785b      	ldrb	r3, [r3, #1]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d128      	bne.n	800a12a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	015a      	lsls	r2, r3, #5
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	4413      	add	r3, r2
 800a0e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	0151      	lsls	r1, r2, #5
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	440a      	add	r2, r1
 800a0ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a0f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	791b      	ldrb	r3, [r3, #4]
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d003      	beq.n	800a108 <USB_EPClearStall+0x4c>
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	791b      	ldrb	r3, [r3, #4]
 800a104:	2b02      	cmp	r3, #2
 800a106:	d138      	bne.n	800a17a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	015a      	lsls	r2, r3, #5
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	4413      	add	r3, r2
 800a110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	0151      	lsls	r1, r2, #5
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	440a      	add	r2, r1
 800a11e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	e027      	b.n	800a17a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	0151      	lsls	r1, r2, #5
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	440a      	add	r2, r1
 800a140:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a144:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a148:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	791b      	ldrb	r3, [r3, #4]
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d003      	beq.n	800a15a <USB_EPClearStall+0x9e>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	791b      	ldrb	r3, [r3, #4]
 800a156:	2b02      	cmp	r3, #2
 800a158:	d10f      	bne.n	800a17a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	015a      	lsls	r2, r3, #5
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	4413      	add	r3, r2
 800a162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	0151      	lsls	r1, r2, #5
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	440a      	add	r2, r1
 800a170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a178:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	460b      	mov	r3, r1
 800a192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a1a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a1aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	78fb      	ldrb	r3, [r7, #3]
 800a1b6:	011b      	lsls	r3, r3, #4
 800a1b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a1bc:	68f9      	ldr	r1, [r7, #12]
 800a1be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a1ee:	f023 0303 	bic.w	r3, r3, #3
 800a1f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a202:	f023 0302 	bic.w	r3, r3, #2
 800a206:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a216:	b480      	push	{r7}
 800a218:	b085      	sub	sp, #20
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a230:	f023 0303 	bic.w	r3, r3, #3
 800a234:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a244:	f043 0302 	orr.w	r3, r3, #2
 800a248:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	4013      	ands	r3, r2
 800a26e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a270:	68fb      	ldr	r3, [r7, #12]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3714      	adds	r7, #20
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a27e:	b480      	push	{r7}
 800a280:	b085      	sub	sp, #20
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a29a:	69db      	ldr	r3, [r3, #28]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	4013      	ands	r3, r2
 800a2a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	0c1b      	lsrs	r3, r3, #16
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b085      	sub	sp, #20
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ce:	69db      	ldr	r3, [r3, #28]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	b29b      	uxth	r3, r3
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b085      	sub	sp, #20
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a2f6:	78fb      	ldrb	r3, [r7, #3]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	4013      	ands	r3, r2
 800a312:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a314:	68bb      	ldr	r3, [r7, #8]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a322:	b480      	push	{r7}
 800a324:	b087      	sub	sp, #28
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	460b      	mov	r3, r1
 800a32c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a344:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	f003 030f 	and.w	r3, r3, #15
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	fa22 f303 	lsr.w	r3, r2, r3
 800a352:	01db      	lsls	r3, r3, #7
 800a354:	b2db      	uxtb	r3, r3
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	4313      	orrs	r3, r2
 800a35a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a35c:	78fb      	ldrb	r3, [r7, #3]
 800a35e:	015a      	lsls	r2, r3, #5
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	4413      	add	r3, r2
 800a364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	4013      	ands	r3, r2
 800a36e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a370:	68bb      	ldr	r3, [r7, #8]
}
 800a372:	4618      	mov	r0, r3
 800a374:	371c      	adds	r7, #28
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	f003 0301 	and.w	r3, r3, #1
}
 800a38e:	4618      	mov	r0, r3
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b085      	sub	sp, #20
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a3b8:	f023 0307 	bic.w	r3, r3, #7
 800a3bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a3cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	607a      	str	r2, [r7, #4]
 800a3ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	333c      	adds	r3, #60	@ 0x3c
 800a3f6:	3304      	adds	r3, #4
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	4a26      	ldr	r2, [pc, #152]	@ (800a498 <USB_EP0_OutStart+0xb8>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d90a      	bls.n	800a41a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a410:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a414:	d101      	bne.n	800a41a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	e037      	b.n	800a48a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a420:	461a      	mov	r2, r3
 800a422:	2300      	movs	r3, #0
 800a424:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a434:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a438:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a448:	f043 0318 	orr.w	r3, r3, #24
 800a44c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a45c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a460:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a462:	7afb      	ldrb	r3, [r7, #11]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d10f      	bne.n	800a488 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a46e:	461a      	mov	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a482:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a486:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	371c      	adds	r7, #28
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	4f54300a 	.word	0x4f54300a

0800a49c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4b4:	d901      	bls.n	800a4ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e01b      	b.n	800a4f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	daf2      	bge.n	800a4a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	f043 0201 	orr.w	r2, r3, #1
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4de:	d901      	bls.n	800a4e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e006      	b.n	800a4f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d0f0      	beq.n	800a4d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
	...

0800a500 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	460b      	mov	r3, r1
 800a50a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a50c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a510:	f002 fc9e 	bl	800ce50 <USBD_static_malloc>
 800a514:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d109      	bne.n	800a530 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	32b0      	adds	r2, #176	@ 0xb0
 800a526:	2100      	movs	r1, #0
 800a528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a52c:	2302      	movs	r3, #2
 800a52e:	e0d4      	b.n	800a6da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a530:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a534:	2100      	movs	r1, #0
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f003 fc93 	bl	800de62 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	32b0      	adds	r2, #176	@ 0xb0
 800a546:	68f9      	ldr	r1, [r7, #12]
 800a548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	32b0      	adds	r2, #176	@ 0xb0
 800a556:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	7c1b      	ldrb	r3, [r3, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d138      	bne.n	800a5da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a568:	4b5e      	ldr	r3, [pc, #376]	@ (800a6e4 <USBD_CDC_Init+0x1e4>)
 800a56a:	7819      	ldrb	r1, [r3, #0]
 800a56c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a570:	2202      	movs	r2, #2
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f002 fb49 	bl	800cc0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a578:	4b5a      	ldr	r3, [pc, #360]	@ (800a6e4 <USBD_CDC_Init+0x1e4>)
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	f003 020f 	and.w	r2, r3, #15
 800a580:	6879      	ldr	r1, [r7, #4]
 800a582:	4613      	mov	r3, r2
 800a584:	009b      	lsls	r3, r3, #2
 800a586:	4413      	add	r3, r2
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	440b      	add	r3, r1
 800a58c:	3324      	adds	r3, #36	@ 0x24
 800a58e:	2201      	movs	r2, #1
 800a590:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a592:	4b55      	ldr	r3, [pc, #340]	@ (800a6e8 <USBD_CDC_Init+0x1e8>)
 800a594:	7819      	ldrb	r1, [r3, #0]
 800a596:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a59a:	2202      	movs	r2, #2
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f002 fb34 	bl	800cc0a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a5a2:	4b51      	ldr	r3, [pc, #324]	@ (800a6e8 <USBD_CDC_Init+0x1e8>)
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	f003 020f 	and.w	r2, r3, #15
 800a5aa:	6879      	ldr	r1, [r7, #4]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	440b      	add	r3, r1
 800a5b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a5be:	4b4b      	ldr	r3, [pc, #300]	@ (800a6ec <USBD_CDC_Init+0x1ec>)
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	f003 020f 	and.w	r2, r3, #15
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	440b      	add	r3, r1
 800a5d2:	3326      	adds	r3, #38	@ 0x26
 800a5d4:	2210      	movs	r2, #16
 800a5d6:	801a      	strh	r2, [r3, #0]
 800a5d8:	e035      	b.n	800a646 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a5da:	4b42      	ldr	r3, [pc, #264]	@ (800a6e4 <USBD_CDC_Init+0x1e4>)
 800a5dc:	7819      	ldrb	r1, [r3, #0]
 800a5de:	2340      	movs	r3, #64	@ 0x40
 800a5e0:	2202      	movs	r2, #2
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f002 fb11 	bl	800cc0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a5e8:	4b3e      	ldr	r3, [pc, #248]	@ (800a6e4 <USBD_CDC_Init+0x1e4>)
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	f003 020f 	and.w	r2, r3, #15
 800a5f0:	6879      	ldr	r1, [r7, #4]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	440b      	add	r3, r1
 800a5fc:	3324      	adds	r3, #36	@ 0x24
 800a5fe:	2201      	movs	r2, #1
 800a600:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a602:	4b39      	ldr	r3, [pc, #228]	@ (800a6e8 <USBD_CDC_Init+0x1e8>)
 800a604:	7819      	ldrb	r1, [r3, #0]
 800a606:	2340      	movs	r3, #64	@ 0x40
 800a608:	2202      	movs	r2, #2
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f002 fafd 	bl	800cc0a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a610:	4b35      	ldr	r3, [pc, #212]	@ (800a6e8 <USBD_CDC_Init+0x1e8>)
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	f003 020f 	and.w	r2, r3, #15
 800a618:	6879      	ldr	r1, [r7, #4]
 800a61a:	4613      	mov	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4413      	add	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	440b      	add	r3, r1
 800a624:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a628:	2201      	movs	r2, #1
 800a62a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a62c:	4b2f      	ldr	r3, [pc, #188]	@ (800a6ec <USBD_CDC_Init+0x1ec>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	f003 020f 	and.w	r2, r3, #15
 800a634:	6879      	ldr	r1, [r7, #4]
 800a636:	4613      	mov	r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	4413      	add	r3, r2
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	440b      	add	r3, r1
 800a640:	3326      	adds	r3, #38	@ 0x26
 800a642:	2210      	movs	r2, #16
 800a644:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a646:	4b29      	ldr	r3, [pc, #164]	@ (800a6ec <USBD_CDC_Init+0x1ec>)
 800a648:	7819      	ldrb	r1, [r3, #0]
 800a64a:	2308      	movs	r3, #8
 800a64c:	2203      	movs	r2, #3
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f002 fadb 	bl	800cc0a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a654:	4b25      	ldr	r3, [pc, #148]	@ (800a6ec <USBD_CDC_Init+0x1ec>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	f003 020f 	and.w	r2, r3, #15
 800a65c:	6879      	ldr	r1, [r7, #4]
 800a65e:	4613      	mov	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	4413      	add	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	440b      	add	r3, r1
 800a668:	3324      	adds	r3, #36	@ 0x24
 800a66a:	2201      	movs	r2, #1
 800a66c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	33b0      	adds	r3, #176	@ 0xb0
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	e018      	b.n	800a6da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	7c1b      	ldrb	r3, [r3, #16]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10a      	bne.n	800a6c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6b0:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e8 <USBD_CDC_Init+0x1e8>)
 800a6b2:	7819      	ldrb	r1, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a6ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f002 fb92 	bl	800cde8 <USBD_LL_PrepareReceive>
 800a6c4:	e008      	b.n	800a6d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6c6:	4b08      	ldr	r3, [pc, #32]	@ (800a6e8 <USBD_CDC_Init+0x1e8>)
 800a6c8:	7819      	ldrb	r1, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a6d0:	2340      	movs	r3, #64	@ 0x40
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f002 fb88 	bl	800cde8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	200000cf 	.word	0x200000cf
 800a6e8:	200000d0 	.word	0x200000d0
 800a6ec:	200000d1 	.word	0x200000d1

0800a6f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a6fc:	4b3a      	ldr	r3, [pc, #232]	@ (800a7e8 <USBD_CDC_DeInit+0xf8>)
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f002 faa7 	bl	800cc56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a708:	4b37      	ldr	r3, [pc, #220]	@ (800a7e8 <USBD_CDC_DeInit+0xf8>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	f003 020f 	and.w	r2, r3, #15
 800a710:	6879      	ldr	r1, [r7, #4]
 800a712:	4613      	mov	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	440b      	add	r3, r1
 800a71c:	3324      	adds	r3, #36	@ 0x24
 800a71e:	2200      	movs	r2, #0
 800a720:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a722:	4b32      	ldr	r3, [pc, #200]	@ (800a7ec <USBD_CDC_DeInit+0xfc>)
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	4619      	mov	r1, r3
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f002 fa94 	bl	800cc56 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a72e:	4b2f      	ldr	r3, [pc, #188]	@ (800a7ec <USBD_CDC_DeInit+0xfc>)
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	f003 020f 	and.w	r2, r3, #15
 800a736:	6879      	ldr	r1, [r7, #4]
 800a738:	4613      	mov	r3, r2
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	4413      	add	r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	440b      	add	r3, r1
 800a742:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a746:	2200      	movs	r2, #0
 800a748:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a74a:	4b29      	ldr	r3, [pc, #164]	@ (800a7f0 <USBD_CDC_DeInit+0x100>)
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	4619      	mov	r1, r3
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f002 fa80 	bl	800cc56 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a756:	4b26      	ldr	r3, [pc, #152]	@ (800a7f0 <USBD_CDC_DeInit+0x100>)
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	f003 020f 	and.w	r2, r3, #15
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	4613      	mov	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	440b      	add	r3, r1
 800a76a:	3324      	adds	r3, #36	@ 0x24
 800a76c:	2200      	movs	r2, #0
 800a76e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a770:	4b1f      	ldr	r3, [pc, #124]	@ (800a7f0 <USBD_CDC_DeInit+0x100>)
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	f003 020f 	and.w	r2, r3, #15
 800a778:	6879      	ldr	r1, [r7, #4]
 800a77a:	4613      	mov	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	440b      	add	r3, r1
 800a784:	3326      	adds	r3, #38	@ 0x26
 800a786:	2200      	movs	r2, #0
 800a788:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	32b0      	adds	r2, #176	@ 0xb0
 800a794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d01f      	beq.n	800a7dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	33b0      	adds	r3, #176	@ 0xb0
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	32b0      	adds	r2, #176	@ 0xb0
 800a7ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f002 fb54 	bl	800ce6c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	32b0      	adds	r2, #176	@ 0xb0
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	200000cf 	.word	0x200000cf
 800a7ec:	200000d0 	.word	0x200000d0
 800a7f0:	200000d1 	.word	0x200000d1

0800a7f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	32b0      	adds	r2, #176	@ 0xb0
 800a808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a80c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a80e:	2300      	movs	r3, #0
 800a810:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a812:	2300      	movs	r3, #0
 800a814:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d101      	bne.n	800a824 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a820:	2303      	movs	r3, #3
 800a822:	e0bf      	b.n	800a9a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d050      	beq.n	800a8d2 <USBD_CDC_Setup+0xde>
 800a830:	2b20      	cmp	r3, #32
 800a832:	f040 80af 	bne.w	800a994 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	88db      	ldrh	r3, [r3, #6]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d03a      	beq.n	800a8b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	b25b      	sxtb	r3, r3
 800a844:	2b00      	cmp	r3, #0
 800a846:	da1b      	bge.n	800a880 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	33b0      	adds	r3, #176	@ 0xb0
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a85e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	88d2      	ldrh	r2, [r2, #6]
 800a864:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	88db      	ldrh	r3, [r3, #6]
 800a86a:	2b07      	cmp	r3, #7
 800a86c:	bf28      	it	cs
 800a86e:	2307      	movcs	r3, #7
 800a870:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	89fa      	ldrh	r2, [r7, #14]
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f001 fd93 	bl	800c3a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a87e:	e090      	b.n	800a9a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	785a      	ldrb	r2, [r3, #1]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	88db      	ldrh	r3, [r3, #6]
 800a88e:	2b3f      	cmp	r3, #63	@ 0x3f
 800a890:	d803      	bhi.n	800a89a <USBD_CDC_Setup+0xa6>
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	88db      	ldrh	r3, [r3, #6]
 800a896:	b2da      	uxtb	r2, r3
 800a898:	e000      	b.n	800a89c <USBD_CDC_Setup+0xa8>
 800a89a:	2240      	movs	r2, #64	@ 0x40
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a8a2:	6939      	ldr	r1, [r7, #16]
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f001 fda5 	bl	800c3fc <USBD_CtlPrepareRx>
      break;
 800a8b2:	e076      	b.n	800a9a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	33b0      	adds	r3, #176	@ 0xb0
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	7850      	ldrb	r0, [r2, #1]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	6839      	ldr	r1, [r7, #0]
 800a8ce:	4798      	blx	r3
      break;
 800a8d0:	e067      	b.n	800a9a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	785b      	ldrb	r3, [r3, #1]
 800a8d6:	2b0b      	cmp	r3, #11
 800a8d8:	d851      	bhi.n	800a97e <USBD_CDC_Setup+0x18a>
 800a8da:	a201      	add	r2, pc, #4	@ (adr r2, 800a8e0 <USBD_CDC_Setup+0xec>)
 800a8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e0:	0800a911 	.word	0x0800a911
 800a8e4:	0800a98d 	.word	0x0800a98d
 800a8e8:	0800a97f 	.word	0x0800a97f
 800a8ec:	0800a97f 	.word	0x0800a97f
 800a8f0:	0800a97f 	.word	0x0800a97f
 800a8f4:	0800a97f 	.word	0x0800a97f
 800a8f8:	0800a97f 	.word	0x0800a97f
 800a8fc:	0800a97f 	.word	0x0800a97f
 800a900:	0800a97f 	.word	0x0800a97f
 800a904:	0800a97f 	.word	0x0800a97f
 800a908:	0800a93b 	.word	0x0800a93b
 800a90c:	0800a965 	.word	0x0800a965
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b03      	cmp	r3, #3
 800a91a:	d107      	bne.n	800a92c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a91c:	f107 030a 	add.w	r3, r7, #10
 800a920:	2202      	movs	r2, #2
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f001 fd3d 	bl	800c3a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a92a:	e032      	b.n	800a992 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f001 fcbb 	bl	800c2aa <USBD_CtlError>
            ret = USBD_FAIL;
 800a934:	2303      	movs	r3, #3
 800a936:	75fb      	strb	r3, [r7, #23]
          break;
 800a938:	e02b      	b.n	800a992 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b03      	cmp	r3, #3
 800a944:	d107      	bne.n	800a956 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a946:	f107 030d 	add.w	r3, r7, #13
 800a94a:	2201      	movs	r2, #1
 800a94c:	4619      	mov	r1, r3
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f001 fd28 	bl	800c3a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a954:	e01d      	b.n	800a992 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f001 fca6 	bl	800c2aa <USBD_CtlError>
            ret = USBD_FAIL;
 800a95e:	2303      	movs	r3, #3
 800a960:	75fb      	strb	r3, [r7, #23]
          break;
 800a962:	e016      	b.n	800a992 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	2b03      	cmp	r3, #3
 800a96e:	d00f      	beq.n	800a990 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f001 fc99 	bl	800c2aa <USBD_CtlError>
            ret = USBD_FAIL;
 800a978:	2303      	movs	r3, #3
 800a97a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a97c:	e008      	b.n	800a990 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f001 fc92 	bl	800c2aa <USBD_CtlError>
          ret = USBD_FAIL;
 800a986:	2303      	movs	r3, #3
 800a988:	75fb      	strb	r3, [r7, #23]
          break;
 800a98a:	e002      	b.n	800a992 <USBD_CDC_Setup+0x19e>
          break;
 800a98c:	bf00      	nop
 800a98e:	e008      	b.n	800a9a2 <USBD_CDC_Setup+0x1ae>
          break;
 800a990:	bf00      	nop
      }
      break;
 800a992:	e006      	b.n	800a9a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f001 fc87 	bl	800c2aa <USBD_CtlError>
      ret = USBD_FAIL;
 800a99c:	2303      	movs	r3, #3
 800a99e:	75fb      	strb	r3, [r7, #23]
      break;
 800a9a0:	bf00      	nop
  }

  return (uint8_t)ret;
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3718      	adds	r7, #24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	32b0      	adds	r2, #176	@ 0xb0
 800a9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d101      	bne.n	800a9d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e065      	b.n	800aaa2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	32b0      	adds	r2, #176	@ 0xb0
 800a9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a9e6:	78fb      	ldrb	r3, [r7, #3]
 800a9e8:	f003 020f 	and.w	r2, r3, #15
 800a9ec:	6879      	ldr	r1, [r7, #4]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4413      	add	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	440b      	add	r3, r1
 800a9f8:	3318      	adds	r3, #24
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d02f      	beq.n	800aa60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aa00:	78fb      	ldrb	r3, [r7, #3]
 800aa02:	f003 020f 	and.w	r2, r3, #15
 800aa06:	6879      	ldr	r1, [r7, #4]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	440b      	add	r3, r1
 800aa12:	3318      	adds	r3, #24
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	78fb      	ldrb	r3, [r7, #3]
 800aa18:	f003 010f 	and.w	r1, r3, #15
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	460b      	mov	r3, r1
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	440b      	add	r3, r1
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4403      	add	r3, r0
 800aa28:	331c      	adds	r3, #28
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa30:	fb01 f303 	mul.w	r3, r1, r3
 800aa34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d112      	bne.n	800aa60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aa3a:	78fb      	ldrb	r3, [r7, #3]
 800aa3c:	f003 020f 	and.w	r2, r3, #15
 800aa40:	6879      	ldr	r1, [r7, #4]
 800aa42:	4613      	mov	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	440b      	add	r3, r1
 800aa4c:	3318      	adds	r3, #24
 800aa4e:	2200      	movs	r2, #0
 800aa50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa52:	78f9      	ldrb	r1, [r7, #3]
 800aa54:	2300      	movs	r3, #0
 800aa56:	2200      	movs	r2, #0
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f002 f9a4 	bl	800cda6 <USBD_LL_Transmit>
 800aa5e:	e01f      	b.n	800aaa0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	33b0      	adds	r3, #176	@ 0xb0
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4413      	add	r3, r2
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d010      	beq.n	800aaa0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	33b0      	adds	r3, #176	@ 0xb0
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	4413      	add	r3, r2
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800aa9c:	78fa      	ldrb	r2, [r7, #3]
 800aa9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b084      	sub	sp, #16
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	460b      	mov	r3, r1
 800aab4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	32b0      	adds	r2, #176	@ 0xb0
 800aac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	32b0      	adds	r2, #176	@ 0xb0
 800aad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aad8:	2303      	movs	r3, #3
 800aada:	e01a      	b.n	800ab12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aadc:	78fb      	ldrb	r3, [r7, #3]
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f002 f9a2 	bl	800ce2a <USBD_LL_GetRxDataSize>
 800aae6:	4602      	mov	r2, r0
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	33b0      	adds	r3, #176	@ 0xb0
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	32b0      	adds	r2, #176	@ 0xb0
 800ab2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ab38:	2303      	movs	r3, #3
 800ab3a:	e024      	b.n	800ab86 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	33b0      	adds	r3, #176	@ 0xb0
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d019      	beq.n	800ab84 <USBD_CDC_EP0_RxReady+0x6a>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ab56:	2bff      	cmp	r3, #255	@ 0xff
 800ab58:	d014      	beq.n	800ab84 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	33b0      	adds	r3, #176	@ 0xb0
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	4413      	add	r3, r2
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ab72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ab7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	22ff      	movs	r2, #255	@ 0xff
 800ab80:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
	...

0800ab90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab98:	2182      	movs	r1, #130	@ 0x82
 800ab9a:	4818      	ldr	r0, [pc, #96]	@ (800abfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ab9c:	f000 fd4f 	bl	800b63e <USBD_GetEpDesc>
 800aba0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aba2:	2101      	movs	r1, #1
 800aba4:	4815      	ldr	r0, [pc, #84]	@ (800abfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aba6:	f000 fd4a 	bl	800b63e <USBD_GetEpDesc>
 800abaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800abac:	2181      	movs	r1, #129	@ 0x81
 800abae:	4813      	ldr	r0, [pc, #76]	@ (800abfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abb0:	f000 fd45 	bl	800b63e <USBD_GetEpDesc>
 800abb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d002      	beq.n	800abc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2210      	movs	r2, #16
 800abc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d006      	beq.n	800abd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	2200      	movs	r2, #0
 800abcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abd0:	711a      	strb	r2, [r3, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d006      	beq.n	800abea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abe4:	711a      	strb	r2, [r3, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2243      	movs	r2, #67	@ 0x43
 800abee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800abf0:	4b02      	ldr	r3, [pc, #8]	@ (800abfc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	2000008c 	.word	0x2000008c

0800ac00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac08:	2182      	movs	r1, #130	@ 0x82
 800ac0a:	4818      	ldr	r0, [pc, #96]	@ (800ac6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac0c:	f000 fd17 	bl	800b63e <USBD_GetEpDesc>
 800ac10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac12:	2101      	movs	r1, #1
 800ac14:	4815      	ldr	r0, [pc, #84]	@ (800ac6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac16:	f000 fd12 	bl	800b63e <USBD_GetEpDesc>
 800ac1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac1c:	2181      	movs	r1, #129	@ 0x81
 800ac1e:	4813      	ldr	r0, [pc, #76]	@ (800ac6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac20:	f000 fd0d 	bl	800b63e <USBD_GetEpDesc>
 800ac24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	2210      	movs	r2, #16
 800ac30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d006      	beq.n	800ac46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	711a      	strb	r2, [r3, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f042 0202 	orr.w	r2, r2, #2
 800ac44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d006      	beq.n	800ac5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	711a      	strb	r2, [r3, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f042 0202 	orr.w	r2, r2, #2
 800ac58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2243      	movs	r2, #67	@ 0x43
 800ac5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac60:	4b02      	ldr	r3, [pc, #8]	@ (800ac6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3718      	adds	r7, #24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	2000008c 	.word	0x2000008c

0800ac70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac78:	2182      	movs	r1, #130	@ 0x82
 800ac7a:	4818      	ldr	r0, [pc, #96]	@ (800acdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ac7c:	f000 fcdf 	bl	800b63e <USBD_GetEpDesc>
 800ac80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac82:	2101      	movs	r1, #1
 800ac84:	4815      	ldr	r0, [pc, #84]	@ (800acdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ac86:	f000 fcda 	bl	800b63e <USBD_GetEpDesc>
 800ac8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac8c:	2181      	movs	r1, #129	@ 0x81
 800ac8e:	4813      	ldr	r0, [pc, #76]	@ (800acdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ac90:	f000 fcd5 	bl	800b63e <USBD_GetEpDesc>
 800ac94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	2210      	movs	r2, #16
 800aca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d006      	beq.n	800acb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	2200      	movs	r2, #0
 800acac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acb0:	711a      	strb	r2, [r3, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d006      	beq.n	800acca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acc4:	711a      	strb	r2, [r3, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2243      	movs	r2, #67	@ 0x43
 800acce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800acd0:	4b02      	ldr	r3, [pc, #8]	@ (800acdc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	2000008c 	.word	0x2000008c

0800ace0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	220a      	movs	r2, #10
 800acec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800acee:	4b03      	ldr	r3, [pc, #12]	@ (800acfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr
 800acfc:	20000048 	.word	0x20000048

0800ad00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e009      	b.n	800ad28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	33b0      	adds	r3, #176	@ 0xb0
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b087      	sub	sp, #28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	32b0      	adds	r2, #176	@ 0xb0
 800ad4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad4e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ad56:	2303      	movs	r3, #3
 800ad58:	e008      	b.n	800ad6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	68ba      	ldr	r2, [r7, #8]
 800ad5e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	371c      	adds	r7, #28
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	32b0      	adds	r2, #176	@ 0xb0
 800ad8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ad98:	2303      	movs	r3, #3
 800ad9a:	e004      	b.n	800ada6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
	...

0800adb4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	32b0      	adds	r2, #176	@ 0xb0
 800adc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800adcc:	2301      	movs	r3, #1
 800adce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d101      	bne.n	800adda <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800add6:	2303      	movs	r3, #3
 800add8:	e025      	b.n	800ae26 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d11f      	bne.n	800ae24 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800adec:	4b10      	ldr	r3, [pc, #64]	@ (800ae30 <USBD_CDC_TransmitPacket+0x7c>)
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	f003 020f 	and.w	r2, r3, #15
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	4613      	mov	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4413      	add	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	4403      	add	r3, r0
 800ae06:	3318      	adds	r3, #24
 800ae08:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ae0a:	4b09      	ldr	r3, [pc, #36]	@ (800ae30 <USBD_CDC_TransmitPacket+0x7c>)
 800ae0c:	7819      	ldrb	r1, [r3, #0]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f001 ffc3 	bl	800cda6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	200000cf 	.word	0x200000cf

0800ae34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	32b0      	adds	r2, #176	@ 0xb0
 800ae46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	32b0      	adds	r2, #176	@ 0xb0
 800ae56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d101      	bne.n	800ae62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	e018      	b.n	800ae94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	7c1b      	ldrb	r3, [r3, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10a      	bne.n	800ae80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ae9c <USBD_CDC_ReceivePacket+0x68>)
 800ae6c:	7819      	ldrb	r1, [r3, #0]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f001 ffb5 	bl	800cde8 <USBD_LL_PrepareReceive>
 800ae7e:	e008      	b.n	800ae92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae80:	4b06      	ldr	r3, [pc, #24]	@ (800ae9c <USBD_CDC_ReceivePacket+0x68>)
 800ae82:	7819      	ldrb	r1, [r3, #0]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae8a:	2340      	movs	r3, #64	@ 0x40
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f001 ffab 	bl	800cde8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	200000d0 	.word	0x200000d0

0800aea0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	e01f      	b.n	800aef8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d003      	beq.n	800aede <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	79fa      	ldrb	r2, [r7, #7]
 800aeea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f001 fe25 	bl	800cb3c <USBD_LL_Init>
 800aef2:	4603      	mov	r3, r0
 800aef4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af0a:	2300      	movs	r3, #0
 800af0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af14:	2303      	movs	r3, #3
 800af16:	e025      	b.n	800af64 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	32ae      	adds	r2, #174	@ 0xae
 800af2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00f      	beq.n	800af54 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	32ae      	adds	r2, #174	@ 0xae
 800af3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af44:	f107 020e 	add.w	r2, r7, #14
 800af48:	4610      	mov	r0, r2
 800af4a:	4798      	blx	r3
 800af4c:	4602      	mov	r2, r0
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800af5a:	1c5a      	adds	r2, r3, #1
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f001 fe2d 	bl	800cbd4 <USBD_LL_Start>
 800af7a:	4603      	mov	r3, r0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af8c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800af8e:	4618      	mov	r0, r3
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b084      	sub	sp, #16
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	460b      	mov	r3, r1
 800afa4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800afa6:	2300      	movs	r3, #0
 800afa8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d009      	beq.n	800afc8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	78fa      	ldrb	r2, [r7, #3]
 800afbe:	4611      	mov	r1, r2
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	4798      	blx	r3
 800afc4:	4603      	mov	r3, r0
 800afc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b084      	sub	sp, #16
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	460b      	mov	r3, r1
 800afdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	78fa      	ldrb	r2, [r7, #3]
 800afec:	4611      	mov	r1, r2
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	4798      	blx	r3
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aff8:	2303      	movs	r3, #3
 800affa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800affc:	7bfb      	ldrb	r3, [r7, #15]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b084      	sub	sp, #16
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b016:	6839      	ldr	r1, [r7, #0]
 800b018:	4618      	mov	r0, r3
 800b01a:	f001 f90c 	bl	800c236 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2201      	movs	r2, #1
 800b022:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b02c:	461a      	mov	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b03a:	f003 031f 	and.w	r3, r3, #31
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d01a      	beq.n	800b078 <USBD_LL_SetupStage+0x72>
 800b042:	2b02      	cmp	r3, #2
 800b044:	d822      	bhi.n	800b08c <USBD_LL_SetupStage+0x86>
 800b046:	2b00      	cmp	r3, #0
 800b048:	d002      	beq.n	800b050 <USBD_LL_SetupStage+0x4a>
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d00a      	beq.n	800b064 <USBD_LL_SetupStage+0x5e>
 800b04e:	e01d      	b.n	800b08c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b056:	4619      	mov	r1, r3
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fb63 	bl	800b724 <USBD_StdDevReq>
 800b05e:	4603      	mov	r3, r0
 800b060:	73fb      	strb	r3, [r7, #15]
      break;
 800b062:	e020      	b.n	800b0a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fbcb 	bl	800b808 <USBD_StdItfReq>
 800b072:	4603      	mov	r3, r0
 800b074:	73fb      	strb	r3, [r7, #15]
      break;
 800b076:	e016      	b.n	800b0a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fc2d 	bl	800b8e0 <USBD_StdEPReq>
 800b086:	4603      	mov	r3, r0
 800b088:	73fb      	strb	r3, [r7, #15]
      break;
 800b08a:	e00c      	b.n	800b0a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b092:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b096:	b2db      	uxtb	r3, r3
 800b098:	4619      	mov	r1, r3
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f001 fdfa 	bl	800cc94 <USBD_LL_StallEP>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b0a4:	bf00      	nop
  }

  return ret;
 800b0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3710      	adds	r7, #16
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	607a      	str	r2, [r7, #4]
 800b0bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b0c2:	7afb      	ldrb	r3, [r7, #11]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d16e      	bne.n	800b1a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b0ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b0d6:	2b03      	cmp	r3, #3
 800b0d8:	f040 8098 	bne.w	800b20c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	689a      	ldr	r2, [r3, #8]
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d913      	bls.n	800b110 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	689a      	ldr	r2, [r3, #8]
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	1ad2      	subs	r2, r2, r3
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	68da      	ldr	r2, [r3, #12]
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	4293      	cmp	r3, r2
 800b100:	bf28      	it	cs
 800b102:	4613      	movcs	r3, r2
 800b104:	461a      	mov	r2, r3
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f001 f994 	bl	800c436 <USBD_CtlContinueRx>
 800b10e:	e07d      	b.n	800b20c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b116:	f003 031f 	and.w	r3, r3, #31
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d014      	beq.n	800b148 <USBD_LL_DataOutStage+0x98>
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d81d      	bhi.n	800b15e <USBD_LL_DataOutStage+0xae>
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <USBD_LL_DataOutStage+0x7c>
 800b126:	2b01      	cmp	r3, #1
 800b128:	d003      	beq.n	800b132 <USBD_LL_DataOutStage+0x82>
 800b12a:	e018      	b.n	800b15e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b12c:	2300      	movs	r3, #0
 800b12e:	75bb      	strb	r3, [r7, #22]
            break;
 800b130:	e018      	b.n	800b164 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	4619      	mov	r1, r3
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 fa64 	bl	800b60a <USBD_CoreFindIF>
 800b142:	4603      	mov	r3, r0
 800b144:	75bb      	strb	r3, [r7, #22]
            break;
 800b146:	e00d      	b.n	800b164 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	4619      	mov	r1, r3
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f000 fa66 	bl	800b624 <USBD_CoreFindEP>
 800b158:	4603      	mov	r3, r0
 800b15a:	75bb      	strb	r3, [r7, #22]
            break;
 800b15c:	e002      	b.n	800b164 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b15e:	2300      	movs	r3, #0
 800b160:	75bb      	strb	r3, [r7, #22]
            break;
 800b162:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b164:	7dbb      	ldrb	r3, [r7, #22]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d119      	bne.n	800b19e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b03      	cmp	r3, #3
 800b174:	d113      	bne.n	800b19e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b176:	7dba      	ldrb	r2, [r7, #22]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	32ae      	adds	r2, #174	@ 0xae
 800b17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00b      	beq.n	800b19e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b186:	7dba      	ldrb	r2, [r7, #22]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b18e:	7dba      	ldrb	r2, [r7, #22]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	32ae      	adds	r2, #174	@ 0xae
 800b194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f001 f95a 	bl	800c458 <USBD_CtlSendStatus>
 800b1a4:	e032      	b.n	800b20c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b1a6:	7afb      	ldrb	r3, [r7, #11]
 800b1a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 fa37 	bl	800b624 <USBD_CoreFindEP>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b1ba:	7dbb      	ldrb	r3, [r7, #22]
 800b1bc:	2bff      	cmp	r3, #255	@ 0xff
 800b1be:	d025      	beq.n	800b20c <USBD_LL_DataOutStage+0x15c>
 800b1c0:	7dbb      	ldrb	r3, [r7, #22]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d122      	bne.n	800b20c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b03      	cmp	r3, #3
 800b1d0:	d117      	bne.n	800b202 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b1d2:	7dba      	ldrb	r2, [r7, #22]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	32ae      	adds	r2, #174	@ 0xae
 800b1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1dc:	699b      	ldr	r3, [r3, #24]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00f      	beq.n	800b202 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b1e2:	7dba      	ldrb	r2, [r7, #22]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b1ea:	7dba      	ldrb	r2, [r7, #22]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	32ae      	adds	r2, #174	@ 0xae
 800b1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	7afa      	ldrb	r2, [r7, #11]
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	4798      	blx	r3
 800b1fe:	4603      	mov	r3, r0
 800b200:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b202:	7dfb      	ldrb	r3, [r7, #23]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b208:	7dfb      	ldrb	r3, [r7, #23]
 800b20a:	e000      	b.n	800b20e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3718      	adds	r7, #24
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b086      	sub	sp, #24
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	60f8      	str	r0, [r7, #12]
 800b21e:	460b      	mov	r3, r1
 800b220:	607a      	str	r2, [r7, #4]
 800b222:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b224:	7afb      	ldrb	r3, [r7, #11]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d16f      	bne.n	800b30a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	3314      	adds	r3, #20
 800b22e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b236:	2b02      	cmp	r3, #2
 800b238:	d15a      	bne.n	800b2f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	689a      	ldr	r2, [r3, #8]
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	429a      	cmp	r2, r3
 800b244:	d914      	bls.n	800b270 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	689a      	ldr	r2, [r3, #8]
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	1ad2      	subs	r2, r2, r3
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	461a      	mov	r2, r3
 800b25a:	6879      	ldr	r1, [r7, #4]
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f001 f8bc 	bl	800c3da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b262:	2300      	movs	r3, #0
 800b264:	2200      	movs	r2, #0
 800b266:	2100      	movs	r1, #0
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f001 fdbd 	bl	800cde8 <USBD_LL_PrepareReceive>
 800b26e:	e03f      	b.n	800b2f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	68da      	ldr	r2, [r3, #12]
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d11c      	bne.n	800b2b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b284:	429a      	cmp	r2, r3
 800b286:	d316      	bcc.n	800b2b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b292:	429a      	cmp	r2, r3
 800b294:	d20f      	bcs.n	800b2b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b296:	2200      	movs	r2, #0
 800b298:	2100      	movs	r1, #0
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f001 f89d 	bl	800c3da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f001 fd9a 	bl	800cde8 <USBD_LL_PrepareReceive>
 800b2b4:	e01c      	b.n	800b2f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	2b03      	cmp	r3, #3
 800b2c0:	d10f      	bne.n	800b2e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d009      	beq.n	800b2e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2e2:	2180      	movs	r1, #128	@ 0x80
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	f001 fcd5 	bl	800cc94 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f001 f8c7 	bl	800c47e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d03a      	beq.n	800b370 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f7ff fe42 	bl	800af84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b308:	e032      	b.n	800b370 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b30a:	7afb      	ldrb	r3, [r7, #11]
 800b30c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b310:	b2db      	uxtb	r3, r3
 800b312:	4619      	mov	r1, r3
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f000 f985 	bl	800b624 <USBD_CoreFindEP>
 800b31a:	4603      	mov	r3, r0
 800b31c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	2bff      	cmp	r3, #255	@ 0xff
 800b322:	d025      	beq.n	800b370 <USBD_LL_DataInStage+0x15a>
 800b324:	7dfb      	ldrb	r3, [r7, #23]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d122      	bne.n	800b370 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b03      	cmp	r3, #3
 800b334:	d11c      	bne.n	800b370 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b336:	7dfa      	ldrb	r2, [r7, #23]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	32ae      	adds	r2, #174	@ 0xae
 800b33c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d014      	beq.n	800b370 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b346:	7dfa      	ldrb	r2, [r7, #23]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b34e:	7dfa      	ldrb	r2, [r7, #23]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	32ae      	adds	r2, #174	@ 0xae
 800b354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	7afa      	ldrb	r2, [r7, #11]
 800b35c:	4611      	mov	r1, r2
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	4798      	blx	r3
 800b362:	4603      	mov	r3, r0
 800b364:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b366:	7dbb      	ldrb	r3, [r7, #22]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d001      	beq.n	800b370 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b36c:	7dbb      	ldrb	r3, [r7, #22]
 800b36e:	e000      	b.n	800b372 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b084      	sub	sp, #16
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2201      	movs	r2, #1
 800b38a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d014      	beq.n	800b3e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00e      	beq.n	800b3e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	6852      	ldr	r2, [r2, #4]
 800b3ce:	b2d2      	uxtb	r2, r2
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	4798      	blx	r3
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3e0:	2340      	movs	r3, #64	@ 0x40
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f001 fc0f 	bl	800cc0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2240      	movs	r2, #64	@ 0x40
 800b3f8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3fc:	2340      	movs	r3, #64	@ 0x40
 800b3fe:	2200      	movs	r2, #0
 800b400:	2180      	movs	r1, #128	@ 0x80
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f001 fc01 	bl	800cc0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2240      	movs	r2, #64	@ 0x40
 800b412:	621a      	str	r2, [r3, #32]

  return ret;
 800b414:	7bfb      	ldrb	r3, [r7, #15]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b41e:	b480      	push	{r7}
 800b420:	b083      	sub	sp, #12
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	460b      	mov	r3, r1
 800b428:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	78fa      	ldrb	r2, [r7, #3]
 800b42e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	370c      	adds	r7, #12
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr

0800b43e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b43e:	b480      	push	{r7}
 800b440:	b083      	sub	sp, #12
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	2b04      	cmp	r3, #4
 800b450:	d006      	beq.n	800b460 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2204      	movs	r2, #4
 800b464:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	370c      	adds	r7, #12
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr

0800b476 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b476:	b480      	push	{r7}
 800b478:	b083      	sub	sp, #12
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b484:	b2db      	uxtb	r3, r3
 800b486:	2b04      	cmp	r3, #4
 800b488:	d106      	bne.n	800b498 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b490:	b2da      	uxtb	r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	370c      	adds	r7, #12
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b082      	sub	sp, #8
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b4:	b2db      	uxtb	r3, r3
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d110      	bne.n	800b4dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00b      	beq.n	800b4dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ca:	69db      	ldr	r3, [r3, #28]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d005      	beq.n	800b4dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4d6:	69db      	ldr	r3, [r3, #28]
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3708      	adds	r7, #8
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b082      	sub	sp, #8
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	32ae      	adds	r2, #174	@ 0xae
 800b4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d101      	bne.n	800b508 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b504:	2303      	movs	r3, #3
 800b506:	e01c      	b.n	800b542 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b03      	cmp	r3, #3
 800b512:	d115      	bne.n	800b540 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	32ae      	adds	r2, #174	@ 0xae
 800b51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b522:	6a1b      	ldr	r3, [r3, #32]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00b      	beq.n	800b540 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	32ae      	adds	r2, #174	@ 0xae
 800b532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b536:	6a1b      	ldr	r3, [r3, #32]
 800b538:	78fa      	ldrb	r2, [r7, #3]
 800b53a:	4611      	mov	r1, r2
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b082      	sub	sp, #8
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
 800b552:	460b      	mov	r3, r1
 800b554:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	32ae      	adds	r2, #174	@ 0xae
 800b560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d101      	bne.n	800b56c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b568:	2303      	movs	r3, #3
 800b56a:	e01c      	b.n	800b5a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b572:	b2db      	uxtb	r3, r3
 800b574:	2b03      	cmp	r3, #3
 800b576:	d115      	bne.n	800b5a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	32ae      	adds	r2, #174	@ 0xae
 800b582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00b      	beq.n	800b5a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	32ae      	adds	r2, #174	@ 0xae
 800b596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b59a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b59c:	78fa      	ldrb	r2, [r7, #3]
 800b59e:	4611      	mov	r1, r2
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b5ae:	b480      	push	{r7}
 800b5b0:	b083      	sub	sp, #12
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00e      	beq.n	800b600 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	6852      	ldr	r2, [r2, #4]
 800b5ee:	b2d2      	uxtb	r2, r2
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	4798      	blx	r3
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d001      	beq.n	800b600 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b600:	7bfb      	ldrb	r3, [r7, #15]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b083      	sub	sp, #12
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	460b      	mov	r3, r1
 800b614:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b616:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b618:	4618      	mov	r0, r3
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b630:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b632:	4618      	mov	r0, r3
 800b634:	370c      	adds	r7, #12
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b086      	sub	sp, #24
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
 800b646:	460b      	mov	r3, r1
 800b648:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b652:	2300      	movs	r3, #0
 800b654:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	885b      	ldrh	r3, [r3, #2]
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	7812      	ldrb	r2, [r2, #0]
 800b660:	4293      	cmp	r3, r2
 800b662:	d91f      	bls.n	800b6a4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b66a:	e013      	b.n	800b694 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b66c:	f107 030a 	add.w	r3, r7, #10
 800b670:	4619      	mov	r1, r3
 800b672:	6978      	ldr	r0, [r7, #20]
 800b674:	f000 f81b 	bl	800b6ae <USBD_GetNextDesc>
 800b678:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	785b      	ldrb	r3, [r3, #1]
 800b67e:	2b05      	cmp	r3, #5
 800b680:	d108      	bne.n	800b694 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	789b      	ldrb	r3, [r3, #2]
 800b68a:	78fa      	ldrb	r2, [r7, #3]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d008      	beq.n	800b6a2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	885b      	ldrh	r3, [r3, #2]
 800b698:	b29a      	uxth	r2, r3
 800b69a:	897b      	ldrh	r3, [r7, #10]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d8e5      	bhi.n	800b66c <USBD_GetEpDesc+0x2e>
 800b6a0:	e000      	b.n	800b6a4 <USBD_GetEpDesc+0x66>
          break;
 800b6a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b6a4:	693b      	ldr	r3, [r7, #16]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b085      	sub	sp, #20
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	881b      	ldrh	r3, [r3, #0]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	7812      	ldrb	r2, [r2, #0]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b087      	sub	sp, #28
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b704:	8a3b      	ldrh	r3, [r7, #16]
 800b706:	021b      	lsls	r3, r3, #8
 800b708:	b21a      	sxth	r2, r3
 800b70a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b70e:	4313      	orrs	r3, r2
 800b710:	b21b      	sxth	r3, r3
 800b712:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b714:	89fb      	ldrh	r3, [r7, #14]
}
 800b716:	4618      	mov	r0, r3
 800b718:	371c      	adds	r7, #28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
	...

0800b724 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b73a:	2b40      	cmp	r3, #64	@ 0x40
 800b73c:	d005      	beq.n	800b74a <USBD_StdDevReq+0x26>
 800b73e:	2b40      	cmp	r3, #64	@ 0x40
 800b740:	d857      	bhi.n	800b7f2 <USBD_StdDevReq+0xce>
 800b742:	2b00      	cmp	r3, #0
 800b744:	d00f      	beq.n	800b766 <USBD_StdDevReq+0x42>
 800b746:	2b20      	cmp	r3, #32
 800b748:	d153      	bne.n	800b7f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	32ae      	adds	r2, #174	@ 0xae
 800b754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	6839      	ldr	r1, [r7, #0]
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	4798      	blx	r3
 800b760:	4603      	mov	r3, r0
 800b762:	73fb      	strb	r3, [r7, #15]
      break;
 800b764:	e04a      	b.n	800b7fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	785b      	ldrb	r3, [r3, #1]
 800b76a:	2b09      	cmp	r3, #9
 800b76c:	d83b      	bhi.n	800b7e6 <USBD_StdDevReq+0xc2>
 800b76e:	a201      	add	r2, pc, #4	@ (adr r2, 800b774 <USBD_StdDevReq+0x50>)
 800b770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b774:	0800b7c9 	.word	0x0800b7c9
 800b778:	0800b7dd 	.word	0x0800b7dd
 800b77c:	0800b7e7 	.word	0x0800b7e7
 800b780:	0800b7d3 	.word	0x0800b7d3
 800b784:	0800b7e7 	.word	0x0800b7e7
 800b788:	0800b7a7 	.word	0x0800b7a7
 800b78c:	0800b79d 	.word	0x0800b79d
 800b790:	0800b7e7 	.word	0x0800b7e7
 800b794:	0800b7bf 	.word	0x0800b7bf
 800b798:	0800b7b1 	.word	0x0800b7b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b79c:	6839      	ldr	r1, [r7, #0]
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 fa3c 	bl	800bc1c <USBD_GetDescriptor>
          break;
 800b7a4:	e024      	b.n	800b7f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fba1 	bl	800bef0 <USBD_SetAddress>
          break;
 800b7ae:	e01f      	b.n	800b7f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fbe0 	bl	800bf78 <USBD_SetConfig>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	73fb      	strb	r3, [r7, #15]
          break;
 800b7bc:	e018      	b.n	800b7f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b7be:	6839      	ldr	r1, [r7, #0]
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 fc83 	bl	800c0cc <USBD_GetConfig>
          break;
 800b7c6:	e013      	b.n	800b7f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fcb4 	bl	800c138 <USBD_GetStatus>
          break;
 800b7d0:	e00e      	b.n	800b7f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fce3 	bl	800c1a0 <USBD_SetFeature>
          break;
 800b7da:	e009      	b.n	800b7f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b7dc:	6839      	ldr	r1, [r7, #0]
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fd07 	bl	800c1f2 <USBD_ClrFeature>
          break;
 800b7e4:	e004      	b.n	800b7f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b7e6:	6839      	ldr	r1, [r7, #0]
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fd5e 	bl	800c2aa <USBD_CtlError>
          break;
 800b7ee:	bf00      	nop
      }
      break;
 800b7f0:	e004      	b.n	800b7fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fd58 	bl	800c2aa <USBD_CtlError>
      break;
 800b7fa:	bf00      	nop
  }

  return ret;
 800b7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3710      	adds	r7, #16
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop

0800b808 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b81e:	2b40      	cmp	r3, #64	@ 0x40
 800b820:	d005      	beq.n	800b82e <USBD_StdItfReq+0x26>
 800b822:	2b40      	cmp	r3, #64	@ 0x40
 800b824:	d852      	bhi.n	800b8cc <USBD_StdItfReq+0xc4>
 800b826:	2b00      	cmp	r3, #0
 800b828:	d001      	beq.n	800b82e <USBD_StdItfReq+0x26>
 800b82a:	2b20      	cmp	r3, #32
 800b82c:	d14e      	bne.n	800b8cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b834:	b2db      	uxtb	r3, r3
 800b836:	3b01      	subs	r3, #1
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d840      	bhi.n	800b8be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	889b      	ldrh	r3, [r3, #4]
 800b840:	b2db      	uxtb	r3, r3
 800b842:	2b01      	cmp	r3, #1
 800b844:	d836      	bhi.n	800b8b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	889b      	ldrh	r3, [r3, #4]
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	4619      	mov	r1, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff fedb 	bl	800b60a <USBD_CoreFindIF>
 800b854:	4603      	mov	r3, r0
 800b856:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b858:	7bbb      	ldrb	r3, [r7, #14]
 800b85a:	2bff      	cmp	r3, #255	@ 0xff
 800b85c:	d01d      	beq.n	800b89a <USBD_StdItfReq+0x92>
 800b85e:	7bbb      	ldrb	r3, [r7, #14]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d11a      	bne.n	800b89a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b864:	7bba      	ldrb	r2, [r7, #14]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	32ae      	adds	r2, #174	@ 0xae
 800b86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00f      	beq.n	800b894 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b874:	7bba      	ldrb	r2, [r7, #14]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b87c:	7bba      	ldrb	r2, [r7, #14]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	32ae      	adds	r2, #174	@ 0xae
 800b882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	6839      	ldr	r1, [r7, #0]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	4798      	blx	r3
 800b88e:	4603      	mov	r3, r0
 800b890:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b892:	e004      	b.n	800b89e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b894:	2303      	movs	r3, #3
 800b896:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b898:	e001      	b.n	800b89e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b89a:	2303      	movs	r3, #3
 800b89c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	88db      	ldrh	r3, [r3, #6]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d110      	bne.n	800b8c8 <USBD_StdItfReq+0xc0>
 800b8a6:	7bfb      	ldrb	r3, [r7, #15]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10d      	bne.n	800b8c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 fdd3 	bl	800c458 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b8b2:	e009      	b.n	800b8c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fcf7 	bl	800c2aa <USBD_CtlError>
          break;
 800b8bc:	e004      	b.n	800b8c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 fcf2 	bl	800c2aa <USBD_CtlError>
          break;
 800b8c6:	e000      	b.n	800b8ca <USBD_StdItfReq+0xc2>
          break;
 800b8c8:	bf00      	nop
      }
      break;
 800b8ca:	e004      	b.n	800b8d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b8cc:	6839      	ldr	r1, [r7, #0]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fceb 	bl	800c2aa <USBD_CtlError>
      break;
 800b8d4:	bf00      	nop
  }

  return ret;
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	889b      	ldrh	r3, [r3, #4]
 800b8f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b8fc:	2b40      	cmp	r3, #64	@ 0x40
 800b8fe:	d007      	beq.n	800b910 <USBD_StdEPReq+0x30>
 800b900:	2b40      	cmp	r3, #64	@ 0x40
 800b902:	f200 817f 	bhi.w	800bc04 <USBD_StdEPReq+0x324>
 800b906:	2b00      	cmp	r3, #0
 800b908:	d02a      	beq.n	800b960 <USBD_StdEPReq+0x80>
 800b90a:	2b20      	cmp	r3, #32
 800b90c:	f040 817a 	bne.w	800bc04 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b910:	7bbb      	ldrb	r3, [r7, #14]
 800b912:	4619      	mov	r1, r3
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f7ff fe85 	bl	800b624 <USBD_CoreFindEP>
 800b91a:	4603      	mov	r3, r0
 800b91c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b91e:	7b7b      	ldrb	r3, [r7, #13]
 800b920:	2bff      	cmp	r3, #255	@ 0xff
 800b922:	f000 8174 	beq.w	800bc0e <USBD_StdEPReq+0x32e>
 800b926:	7b7b      	ldrb	r3, [r7, #13]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f040 8170 	bne.w	800bc0e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b92e:	7b7a      	ldrb	r2, [r7, #13]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b936:	7b7a      	ldrb	r2, [r7, #13]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	32ae      	adds	r2, #174	@ 0xae
 800b93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	2b00      	cmp	r3, #0
 800b944:	f000 8163 	beq.w	800bc0e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b948:	7b7a      	ldrb	r2, [r7, #13]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	32ae      	adds	r2, #174	@ 0xae
 800b94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	6839      	ldr	r1, [r7, #0]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	4798      	blx	r3
 800b95a:	4603      	mov	r3, r0
 800b95c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b95e:	e156      	b.n	800bc0e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	785b      	ldrb	r3, [r3, #1]
 800b964:	2b03      	cmp	r3, #3
 800b966:	d008      	beq.n	800b97a <USBD_StdEPReq+0x9a>
 800b968:	2b03      	cmp	r3, #3
 800b96a:	f300 8145 	bgt.w	800bbf8 <USBD_StdEPReq+0x318>
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f000 809b 	beq.w	800baaa <USBD_StdEPReq+0x1ca>
 800b974:	2b01      	cmp	r3, #1
 800b976:	d03c      	beq.n	800b9f2 <USBD_StdEPReq+0x112>
 800b978:	e13e      	b.n	800bbf8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b02      	cmp	r3, #2
 800b984:	d002      	beq.n	800b98c <USBD_StdEPReq+0xac>
 800b986:	2b03      	cmp	r3, #3
 800b988:	d016      	beq.n	800b9b8 <USBD_StdEPReq+0xd8>
 800b98a:	e02c      	b.n	800b9e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00d      	beq.n	800b9ae <USBD_StdEPReq+0xce>
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	2b80      	cmp	r3, #128	@ 0x80
 800b996:	d00a      	beq.n	800b9ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b998:	7bbb      	ldrb	r3, [r7, #14]
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f001 f979 	bl	800cc94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9a2:	2180      	movs	r1, #128	@ 0x80
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f001 f975 	bl	800cc94 <USBD_LL_StallEP>
 800b9aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9ac:	e020      	b.n	800b9f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fc7a 	bl	800c2aa <USBD_CtlError>
              break;
 800b9b6:	e01b      	b.n	800b9f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	885b      	ldrh	r3, [r3, #2]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10e      	bne.n	800b9de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b9c0:	7bbb      	ldrb	r3, [r7, #14]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00b      	beq.n	800b9de <USBD_StdEPReq+0xfe>
 800b9c6:	7bbb      	ldrb	r3, [r7, #14]
 800b9c8:	2b80      	cmp	r3, #128	@ 0x80
 800b9ca:	d008      	beq.n	800b9de <USBD_StdEPReq+0xfe>
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	88db      	ldrh	r3, [r3, #6]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d104      	bne.n	800b9de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9d4:	7bbb      	ldrb	r3, [r7, #14]
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f001 f95b 	bl	800cc94 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fd3a 	bl	800c458 <USBD_CtlSendStatus>

              break;
 800b9e4:	e004      	b.n	800b9f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 fc5e 	bl	800c2aa <USBD_CtlError>
              break;
 800b9ee:	bf00      	nop
          }
          break;
 800b9f0:	e107      	b.n	800bc02 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d002      	beq.n	800ba04 <USBD_StdEPReq+0x124>
 800b9fe:	2b03      	cmp	r3, #3
 800ba00:	d016      	beq.n	800ba30 <USBD_StdEPReq+0x150>
 800ba02:	e04b      	b.n	800ba9c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00d      	beq.n	800ba26 <USBD_StdEPReq+0x146>
 800ba0a:	7bbb      	ldrb	r3, [r7, #14]
 800ba0c:	2b80      	cmp	r3, #128	@ 0x80
 800ba0e:	d00a      	beq.n	800ba26 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba10:	7bbb      	ldrb	r3, [r7, #14]
 800ba12:	4619      	mov	r1, r3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f001 f93d 	bl	800cc94 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba1a:	2180      	movs	r1, #128	@ 0x80
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f001 f939 	bl	800cc94 <USBD_LL_StallEP>
 800ba22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba24:	e040      	b.n	800baa8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 fc3e 	bl	800c2aa <USBD_CtlError>
              break;
 800ba2e:	e03b      	b.n	800baa8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	885b      	ldrh	r3, [r3, #2]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d136      	bne.n	800baa6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba38:	7bbb      	ldrb	r3, [r7, #14]
 800ba3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d004      	beq.n	800ba4c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba42:	7bbb      	ldrb	r3, [r7, #14]
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f001 f943 	bl	800ccd2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 fd03 	bl	800c458 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba52:	7bbb      	ldrb	r3, [r7, #14]
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff fde4 	bl	800b624 <USBD_CoreFindEP>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba60:	7b7b      	ldrb	r3, [r7, #13]
 800ba62:	2bff      	cmp	r3, #255	@ 0xff
 800ba64:	d01f      	beq.n	800baa6 <USBD_StdEPReq+0x1c6>
 800ba66:	7b7b      	ldrb	r3, [r7, #13]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d11c      	bne.n	800baa6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ba6c:	7b7a      	ldrb	r2, [r7, #13]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ba74:	7b7a      	ldrb	r2, [r7, #13]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	32ae      	adds	r2, #174	@ 0xae
 800ba7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d010      	beq.n	800baa6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba84:	7b7a      	ldrb	r2, [r7, #13]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	32ae      	adds	r2, #174	@ 0xae
 800ba8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	6839      	ldr	r1, [r7, #0]
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	4798      	blx	r3
 800ba96:	4603      	mov	r3, r0
 800ba98:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ba9a:	e004      	b.n	800baa6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ba9c:	6839      	ldr	r1, [r7, #0]
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 fc03 	bl	800c2aa <USBD_CtlError>
              break;
 800baa4:	e000      	b.n	800baa8 <USBD_StdEPReq+0x1c8>
              break;
 800baa6:	bf00      	nop
          }
          break;
 800baa8:	e0ab      	b.n	800bc02 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d002      	beq.n	800babc <USBD_StdEPReq+0x1dc>
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	d032      	beq.n	800bb20 <USBD_StdEPReq+0x240>
 800baba:	e097      	b.n	800bbec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800babc:	7bbb      	ldrb	r3, [r7, #14]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d007      	beq.n	800bad2 <USBD_StdEPReq+0x1f2>
 800bac2:	7bbb      	ldrb	r3, [r7, #14]
 800bac4:	2b80      	cmp	r3, #128	@ 0x80
 800bac6:	d004      	beq.n	800bad2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bac8:	6839      	ldr	r1, [r7, #0]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fbed 	bl	800c2aa <USBD_CtlError>
                break;
 800bad0:	e091      	b.n	800bbf6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bad2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	da0b      	bge.n	800baf2 <USBD_StdEPReq+0x212>
 800bada:	7bbb      	ldrb	r3, [r7, #14]
 800badc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bae0:	4613      	mov	r3, r2
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	4413      	add	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	3310      	adds	r3, #16
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	4413      	add	r3, r2
 800baee:	3304      	adds	r3, #4
 800baf0:	e00b      	b.n	800bb0a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800baf2:	7bbb      	ldrb	r3, [r7, #14]
 800baf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baf8:	4613      	mov	r3, r2
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	4413      	add	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	4413      	add	r3, r2
 800bb08:	3304      	adds	r3, #4
 800bb0a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	2202      	movs	r2, #2
 800bb16:	4619      	mov	r1, r3
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fc43 	bl	800c3a4 <USBD_CtlSendData>
              break;
 800bb1e:	e06a      	b.n	800bbf6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	da11      	bge.n	800bb4c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb28:	7bbb      	ldrb	r3, [r7, #14]
 800bb2a:	f003 020f 	and.w	r2, r3, #15
 800bb2e:	6879      	ldr	r1, [r7, #4]
 800bb30:	4613      	mov	r3, r2
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	440b      	add	r3, r1
 800bb3a:	3324      	adds	r3, #36	@ 0x24
 800bb3c:	881b      	ldrh	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d117      	bne.n	800bb72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb42:	6839      	ldr	r1, [r7, #0]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 fbb0 	bl	800c2aa <USBD_CtlError>
                  break;
 800bb4a:	e054      	b.n	800bbf6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb4c:	7bbb      	ldrb	r3, [r7, #14]
 800bb4e:	f003 020f 	and.w	r2, r3, #15
 800bb52:	6879      	ldr	r1, [r7, #4]
 800bb54:	4613      	mov	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4413      	add	r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	440b      	add	r3, r1
 800bb5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb62:	881b      	ldrh	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d104      	bne.n	800bb72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fb9d 	bl	800c2aa <USBD_CtlError>
                  break;
 800bb70:	e041      	b.n	800bbf6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	da0b      	bge.n	800bb92 <USBD_StdEPReq+0x2b2>
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]
 800bb7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb80:	4613      	mov	r3, r2
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	4413      	add	r3, r2
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	3310      	adds	r3, #16
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	3304      	adds	r3, #4
 800bb90:	e00b      	b.n	800bbaa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb92:	7bbb      	ldrb	r3, [r7, #14]
 800bb94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb98:	4613      	mov	r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	4413      	add	r3, r2
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	4413      	add	r3, r2
 800bba8:	3304      	adds	r3, #4
 800bbaa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bbac:	7bbb      	ldrb	r3, [r7, #14]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d002      	beq.n	800bbb8 <USBD_StdEPReq+0x2d8>
 800bbb2:	7bbb      	ldrb	r3, [r7, #14]
 800bbb4:	2b80      	cmp	r3, #128	@ 0x80
 800bbb6:	d103      	bne.n	800bbc0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	e00e      	b.n	800bbde <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bbc0:	7bbb      	ldrb	r3, [r7, #14]
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f001 f8a3 	bl	800cd10 <USBD_LL_IsStallEP>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d003      	beq.n	800bbd8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	601a      	str	r2, [r3, #0]
 800bbd6:	e002      	b.n	800bbde <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fbdd 	bl	800c3a4 <USBD_CtlSendData>
              break;
 800bbea:	e004      	b.n	800bbf6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fb5b 	bl	800c2aa <USBD_CtlError>
              break;
 800bbf4:	bf00      	nop
          }
          break;
 800bbf6:	e004      	b.n	800bc02 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fb55 	bl	800c2aa <USBD_CtlError>
          break;
 800bc00:	bf00      	nop
      }
      break;
 800bc02:	e005      	b.n	800bc10 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fb4f 	bl	800c2aa <USBD_CtlError>
      break;
 800bc0c:	e000      	b.n	800bc10 <USBD_StdEPReq+0x330>
      break;
 800bc0e:	bf00      	nop
  }

  return ret;
 800bc10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
	...

0800bc1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc26:	2300      	movs	r3, #0
 800bc28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	885b      	ldrh	r3, [r3, #2]
 800bc36:	0a1b      	lsrs	r3, r3, #8
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	2b06      	cmp	r3, #6
 800bc3e:	f200 8128 	bhi.w	800be92 <USBD_GetDescriptor+0x276>
 800bc42:	a201      	add	r2, pc, #4	@ (adr r2, 800bc48 <USBD_GetDescriptor+0x2c>)
 800bc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc48:	0800bc65 	.word	0x0800bc65
 800bc4c:	0800bc7d 	.word	0x0800bc7d
 800bc50:	0800bcbd 	.word	0x0800bcbd
 800bc54:	0800be93 	.word	0x0800be93
 800bc58:	0800be93 	.word	0x0800be93
 800bc5c:	0800be33 	.word	0x0800be33
 800bc60:	0800be5f 	.word	0x0800be5f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	7c12      	ldrb	r2, [r2, #16]
 800bc70:	f107 0108 	add.w	r1, r7, #8
 800bc74:	4610      	mov	r0, r2
 800bc76:	4798      	blx	r3
 800bc78:	60f8      	str	r0, [r7, #12]
      break;
 800bc7a:	e112      	b.n	800bea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	7c1b      	ldrb	r3, [r3, #16]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10d      	bne.n	800bca0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc8c:	f107 0208 	add.w	r2, r7, #8
 800bc90:	4610      	mov	r0, r2
 800bc92:	4798      	blx	r3
 800bc94:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	2202      	movs	r2, #2
 800bc9c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc9e:	e100      	b.n	800bea2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca8:	f107 0208 	add.w	r2, r7, #8
 800bcac:	4610      	mov	r0, r2
 800bcae:	4798      	blx	r3
 800bcb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	2202      	movs	r2, #2
 800bcb8:	701a      	strb	r2, [r3, #0]
      break;
 800bcba:	e0f2      	b.n	800bea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	885b      	ldrh	r3, [r3, #2]
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b05      	cmp	r3, #5
 800bcc4:	f200 80ac 	bhi.w	800be20 <USBD_GetDescriptor+0x204>
 800bcc8:	a201      	add	r2, pc, #4	@ (adr r2, 800bcd0 <USBD_GetDescriptor+0xb4>)
 800bcca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcce:	bf00      	nop
 800bcd0:	0800bce9 	.word	0x0800bce9
 800bcd4:	0800bd1d 	.word	0x0800bd1d
 800bcd8:	0800bd51 	.word	0x0800bd51
 800bcdc:	0800bd85 	.word	0x0800bd85
 800bce0:	0800bdb9 	.word	0x0800bdb9
 800bce4:	0800bded 	.word	0x0800bded
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00b      	beq.n	800bd0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	7c12      	ldrb	r2, [r2, #16]
 800bd00:	f107 0108 	add.w	r1, r7, #8
 800bd04:	4610      	mov	r0, r2
 800bd06:	4798      	blx	r3
 800bd08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd0a:	e091      	b.n	800be30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 facb 	bl	800c2aa <USBD_CtlError>
            err++;
 800bd14:	7afb      	ldrb	r3, [r7, #11]
 800bd16:	3301      	adds	r3, #1
 800bd18:	72fb      	strb	r3, [r7, #11]
          break;
 800bd1a:	e089      	b.n	800be30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00b      	beq.n	800bd40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	7c12      	ldrb	r2, [r2, #16]
 800bd34:	f107 0108 	add.w	r1, r7, #8
 800bd38:	4610      	mov	r0, r2
 800bd3a:	4798      	blx	r3
 800bd3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd3e:	e077      	b.n	800be30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 fab1 	bl	800c2aa <USBD_CtlError>
            err++;
 800bd48:	7afb      	ldrb	r3, [r7, #11]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd4e:	e06f      	b.n	800be30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00b      	beq.n	800bd74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	7c12      	ldrb	r2, [r2, #16]
 800bd68:	f107 0108 	add.w	r1, r7, #8
 800bd6c:	4610      	mov	r0, r2
 800bd6e:	4798      	blx	r3
 800bd70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd72:	e05d      	b.n	800be30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 fa97 	bl	800c2aa <USBD_CtlError>
            err++;
 800bd7c:	7afb      	ldrb	r3, [r7, #11]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	72fb      	strb	r3, [r7, #11]
          break;
 800bd82:	e055      	b.n	800be30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00b      	beq.n	800bda8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	7c12      	ldrb	r2, [r2, #16]
 800bd9c:	f107 0108 	add.w	r1, r7, #8
 800bda0:	4610      	mov	r0, r2
 800bda2:	4798      	blx	r3
 800bda4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bda6:	e043      	b.n	800be30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bda8:	6839      	ldr	r1, [r7, #0]
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fa7d 	bl	800c2aa <USBD_CtlError>
            err++;
 800bdb0:	7afb      	ldrb	r3, [r7, #11]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	72fb      	strb	r3, [r7, #11]
          break;
 800bdb6:	e03b      	b.n	800be30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdbe:	695b      	ldr	r3, [r3, #20]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00b      	beq.n	800bddc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	7c12      	ldrb	r2, [r2, #16]
 800bdd0:	f107 0108 	add.w	r1, r7, #8
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	4798      	blx	r3
 800bdd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdda:	e029      	b.n	800be30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fa63 	bl	800c2aa <USBD_CtlError>
            err++;
 800bde4:	7afb      	ldrb	r3, [r7, #11]
 800bde6:	3301      	adds	r3, #1
 800bde8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdea:	e021      	b.n	800be30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00b      	beq.n	800be10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdfe:	699b      	ldr	r3, [r3, #24]
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	7c12      	ldrb	r2, [r2, #16]
 800be04:	f107 0108 	add.w	r1, r7, #8
 800be08:	4610      	mov	r0, r2
 800be0a:	4798      	blx	r3
 800be0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be0e:	e00f      	b.n	800be30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fa49 	bl	800c2aa <USBD_CtlError>
            err++;
 800be18:	7afb      	ldrb	r3, [r7, #11]
 800be1a:	3301      	adds	r3, #1
 800be1c:	72fb      	strb	r3, [r7, #11]
          break;
 800be1e:	e007      	b.n	800be30 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fa41 	bl	800c2aa <USBD_CtlError>
          err++;
 800be28:	7afb      	ldrb	r3, [r7, #11]
 800be2a:	3301      	adds	r3, #1
 800be2c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800be2e:	bf00      	nop
      }
      break;
 800be30:	e037      	b.n	800bea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	7c1b      	ldrb	r3, [r3, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d109      	bne.n	800be4e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be42:	f107 0208 	add.w	r2, r7, #8
 800be46:	4610      	mov	r0, r2
 800be48:	4798      	blx	r3
 800be4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be4c:	e029      	b.n	800bea2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fa2a 	bl	800c2aa <USBD_CtlError>
        err++;
 800be56:	7afb      	ldrb	r3, [r7, #11]
 800be58:	3301      	adds	r3, #1
 800be5a:	72fb      	strb	r3, [r7, #11]
      break;
 800be5c:	e021      	b.n	800bea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	7c1b      	ldrb	r3, [r3, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10d      	bne.n	800be82 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be6e:	f107 0208 	add.w	r2, r7, #8
 800be72:	4610      	mov	r0, r2
 800be74:	4798      	blx	r3
 800be76:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	3301      	adds	r3, #1
 800be7c:	2207      	movs	r2, #7
 800be7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be80:	e00f      	b.n	800bea2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be82:	6839      	ldr	r1, [r7, #0]
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fa10 	bl	800c2aa <USBD_CtlError>
        err++;
 800be8a:	7afb      	ldrb	r3, [r7, #11]
 800be8c:	3301      	adds	r3, #1
 800be8e:	72fb      	strb	r3, [r7, #11]
      break;
 800be90:	e007      	b.n	800bea2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800be92:	6839      	ldr	r1, [r7, #0]
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 fa08 	bl	800c2aa <USBD_CtlError>
      err++;
 800be9a:	7afb      	ldrb	r3, [r7, #11]
 800be9c:	3301      	adds	r3, #1
 800be9e:	72fb      	strb	r3, [r7, #11]
      break;
 800bea0:	bf00      	nop
  }

  if (err != 0U)
 800bea2:	7afb      	ldrb	r3, [r7, #11]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d11e      	bne.n	800bee6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	88db      	ldrh	r3, [r3, #6]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d016      	beq.n	800bede <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800beb0:	893b      	ldrh	r3, [r7, #8]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00e      	beq.n	800bed4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	88da      	ldrh	r2, [r3, #6]
 800beba:	893b      	ldrh	r3, [r7, #8]
 800bebc:	4293      	cmp	r3, r2
 800bebe:	bf28      	it	cs
 800bec0:	4613      	movcs	r3, r2
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bec6:	893b      	ldrh	r3, [r7, #8]
 800bec8:	461a      	mov	r2, r3
 800beca:	68f9      	ldr	r1, [r7, #12]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 fa69 	bl	800c3a4 <USBD_CtlSendData>
 800bed2:	e009      	b.n	800bee8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f9e7 	bl	800c2aa <USBD_CtlError>
 800bedc:	e004      	b.n	800bee8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 faba 	bl	800c458 <USBD_CtlSendStatus>
 800bee4:	e000      	b.n	800bee8 <USBD_GetDescriptor+0x2cc>
    return;
 800bee6:	bf00      	nop
  }
}
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop

0800bef0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	889b      	ldrh	r3, [r3, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d131      	bne.n	800bf66 <USBD_SetAddress+0x76>
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	88db      	ldrh	r3, [r3, #6]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d12d      	bne.n	800bf66 <USBD_SetAddress+0x76>
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	885b      	ldrh	r3, [r3, #2]
 800bf0e:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf10:	d829      	bhi.n	800bf66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	885b      	ldrh	r3, [r3, #2]
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d104      	bne.n	800bf34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 f9bc 	bl	800c2aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf32:	e01d      	b.n	800bf70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	7bfa      	ldrb	r2, [r7, #15]
 800bf38:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 ff11 	bl	800cd68 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fa86 	bl	800c458 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf4c:	7bfb      	ldrb	r3, [r7, #15]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d004      	beq.n	800bf5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2202      	movs	r2, #2
 800bf56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf5a:	e009      	b.n	800bf70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf64:	e004      	b.n	800bf70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 f99e 	bl	800c2aa <USBD_CtlError>
  }
}
 800bf6e:	bf00      	nop
 800bf70:	bf00      	nop
 800bf72:	3710      	adds	r7, #16
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	885b      	ldrh	r3, [r3, #2]
 800bf8a:	b2da      	uxtb	r2, r3
 800bf8c:	4b4e      	ldr	r3, [pc, #312]	@ (800c0c8 <USBD_SetConfig+0x150>)
 800bf8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf90:	4b4d      	ldr	r3, [pc, #308]	@ (800c0c8 <USBD_SetConfig+0x150>)
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d905      	bls.n	800bfa4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f985 	bl	800c2aa <USBD_CtlError>
    return USBD_FAIL;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	e08c      	b.n	800c0be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d002      	beq.n	800bfb6 <USBD_SetConfig+0x3e>
 800bfb0:	2b03      	cmp	r3, #3
 800bfb2:	d029      	beq.n	800c008 <USBD_SetConfig+0x90>
 800bfb4:	e075      	b.n	800c0a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bfb6:	4b44      	ldr	r3, [pc, #272]	@ (800c0c8 <USBD_SetConfig+0x150>)
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d020      	beq.n	800c000 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bfbe:	4b42      	ldr	r3, [pc, #264]	@ (800c0c8 <USBD_SetConfig+0x150>)
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bfc8:	4b3f      	ldr	r3, [pc, #252]	@ (800c0c8 <USBD_SetConfig+0x150>)
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7fe ffe3 	bl	800af9a <USBD_SetClassConfig>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d008      	beq.n	800bff0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 f962 	bl	800c2aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2202      	movs	r2, #2
 800bfea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bfee:	e065      	b.n	800c0bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fa31 	bl	800c458 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2203      	movs	r2, #3
 800bffa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bffe:	e05d      	b.n	800c0bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fa29 	bl	800c458 <USBD_CtlSendStatus>
      break;
 800c006:	e059      	b.n	800c0bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c008:	4b2f      	ldr	r3, [pc, #188]	@ (800c0c8 <USBD_SetConfig+0x150>)
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d112      	bne.n	800c036 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2202      	movs	r2, #2
 800c014:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c018:	4b2b      	ldr	r3, [pc, #172]	@ (800c0c8 <USBD_SetConfig+0x150>)
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	461a      	mov	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c022:	4b29      	ldr	r3, [pc, #164]	@ (800c0c8 <USBD_SetConfig+0x150>)
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f7fe ffd2 	bl	800afd2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fa12 	bl	800c458 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c034:	e042      	b.n	800c0bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c036:	4b24      	ldr	r3, [pc, #144]	@ (800c0c8 <USBD_SetConfig+0x150>)
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	461a      	mov	r2, r3
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	429a      	cmp	r2, r3
 800c042:	d02a      	beq.n	800c09a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	4619      	mov	r1, r3
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7fe ffc0 	bl	800afd2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c052:	4b1d      	ldr	r3, [pc, #116]	@ (800c0c8 <USBD_SetConfig+0x150>)
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	461a      	mov	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c05c:	4b1a      	ldr	r3, [pc, #104]	@ (800c0c8 <USBD_SetConfig+0x150>)
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	4619      	mov	r1, r3
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7fe ff99 	bl	800af9a <USBD_SetClassConfig>
 800c068:	4603      	mov	r3, r0
 800c06a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00f      	beq.n	800c092 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c072:	6839      	ldr	r1, [r7, #0]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 f918 	bl	800c2aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	4619      	mov	r1, r3
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f7fe ffa5 	bl	800afd2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2202      	movs	r2, #2
 800c08c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c090:	e014      	b.n	800c0bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f9e0 	bl	800c458 <USBD_CtlSendStatus>
      break;
 800c098:	e010      	b.n	800c0bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 f9dc 	bl	800c458 <USBD_CtlSendStatus>
      break;
 800c0a0:	e00c      	b.n	800c0bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c0a2:	6839      	ldr	r1, [r7, #0]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 f900 	bl	800c2aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0aa:	4b07      	ldr	r3, [pc, #28]	@ (800c0c8 <USBD_SetConfig+0x150>)
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f7fe ff8e 	bl	800afd2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c0ba:	bf00      	nop
  }

  return ret;
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	200006c4 	.word	0x200006c4

0800c0cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	88db      	ldrh	r3, [r3, #6]
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d004      	beq.n	800c0e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 f8e2 	bl	800c2aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c0e6:	e023      	b.n	800c130 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	dc02      	bgt.n	800c0fa <USBD_GetConfig+0x2e>
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	dc03      	bgt.n	800c100 <USBD_GetConfig+0x34>
 800c0f8:	e015      	b.n	800c126 <USBD_GetConfig+0x5a>
 800c0fa:	2b03      	cmp	r3, #3
 800c0fc:	d00b      	beq.n	800c116 <USBD_GetConfig+0x4a>
 800c0fe:	e012      	b.n	800c126 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	3308      	adds	r3, #8
 800c10a:	2201      	movs	r2, #1
 800c10c:	4619      	mov	r1, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 f948 	bl	800c3a4 <USBD_CtlSendData>
        break;
 800c114:	e00c      	b.n	800c130 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	3304      	adds	r3, #4
 800c11a:	2201      	movs	r2, #1
 800c11c:	4619      	mov	r1, r3
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 f940 	bl	800c3a4 <USBD_CtlSendData>
        break;
 800c124:	e004      	b.n	800c130 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 f8be 	bl	800c2aa <USBD_CtlError>
        break;
 800c12e:	bf00      	nop
}
 800c130:	bf00      	nop
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	3b01      	subs	r3, #1
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d81e      	bhi.n	800c18e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	88db      	ldrh	r3, [r3, #6]
 800c154:	2b02      	cmp	r3, #2
 800c156:	d004      	beq.n	800c162 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 f8a5 	bl	800c2aa <USBD_CtlError>
        break;
 800c160:	e01a      	b.n	800c198 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2201      	movs	r2, #1
 800c166:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d005      	beq.n	800c17e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	f043 0202 	orr.w	r2, r3, #2
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	330c      	adds	r3, #12
 800c182:	2202      	movs	r2, #2
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 f90c 	bl	800c3a4 <USBD_CtlSendData>
      break;
 800c18c:	e004      	b.n	800c198 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c18e:	6839      	ldr	r1, [r7, #0]
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 f88a 	bl	800c2aa <USBD_CtlError>
      break;
 800c196:	bf00      	nop
  }
}
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	885b      	ldrh	r3, [r3, #2]
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d107      	bne.n	800c1c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f94c 	bl	800c458 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c1c0:	e013      	b.n	800c1ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	885b      	ldrh	r3, [r3, #2]
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	d10b      	bne.n	800c1e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	889b      	ldrh	r3, [r3, #4]
 800c1ce:	0a1b      	lsrs	r3, r3, #8
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f93c 	bl	800c458 <USBD_CtlSendStatus>
}
 800c1e0:	e003      	b.n	800c1ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 f860 	bl	800c2aa <USBD_CtlError>
}
 800c1ea:	bf00      	nop
 800c1ec:	3708      	adds	r7, #8
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b082      	sub	sp, #8
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c202:	b2db      	uxtb	r3, r3
 800c204:	3b01      	subs	r3, #1
 800c206:	2b02      	cmp	r3, #2
 800c208:	d80b      	bhi.n	800c222 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	885b      	ldrh	r3, [r3, #2]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d10c      	bne.n	800c22c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 f91c 	bl	800c458 <USBD_CtlSendStatus>
      }
      break;
 800c220:	e004      	b.n	800c22c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c222:	6839      	ldr	r1, [r7, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 f840 	bl	800c2aa <USBD_CtlError>
      break;
 800c22a:	e000      	b.n	800c22e <USBD_ClrFeature+0x3c>
      break;
 800c22c:	bf00      	nop
  }
}
 800c22e:	bf00      	nop
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b084      	sub	sp, #16
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	781a      	ldrb	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	3301      	adds	r3, #1
 800c250:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	781a      	ldrb	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	3301      	adds	r3, #1
 800c25e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	f7ff fa40 	bl	800b6e6 <SWAPBYTE>
 800c266:	4603      	mov	r3, r0
 800c268:	461a      	mov	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	3301      	adds	r3, #1
 800c272:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	3301      	adds	r3, #1
 800c278:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f7ff fa33 	bl	800b6e6 <SWAPBYTE>
 800c280:	4603      	mov	r3, r0
 800c282:	461a      	mov	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	3301      	adds	r3, #1
 800c28c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3301      	adds	r3, #1
 800c292:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f7ff fa26 	bl	800b6e6 <SWAPBYTE>
 800c29a:	4603      	mov	r3, r0
 800c29c:	461a      	mov	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	80da      	strh	r2, [r3, #6]
}
 800c2a2:	bf00      	nop
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b082      	sub	sp, #8
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
 800c2b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2b4:	2180      	movs	r1, #128	@ 0x80
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fcec 	bl	800cc94 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c2bc:	2100      	movs	r1, #0
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fce8 	bl	800cc94 <USBD_LL_StallEP>
}
 800c2c4:	bf00      	nop
 800c2c6:	3708      	adds	r7, #8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d042      	beq.n	800c368 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c2e6:	6938      	ldr	r0, [r7, #16]
 800c2e8:	f000 f842 	bl	800c370 <USBD_GetLen>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	005b      	lsls	r3, r3, #1
 800c2f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2f6:	d808      	bhi.n	800c30a <USBD_GetString+0x3e>
 800c2f8:	6938      	ldr	r0, [r7, #16]
 800c2fa:	f000 f839 	bl	800c370 <USBD_GetLen>
 800c2fe:	4603      	mov	r3, r0
 800c300:	3301      	adds	r3, #1
 800c302:	b29b      	uxth	r3, r3
 800c304:	005b      	lsls	r3, r3, #1
 800c306:	b29a      	uxth	r2, r3
 800c308:	e001      	b.n	800c30e <USBD_GetString+0x42>
 800c30a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c312:	7dfb      	ldrb	r3, [r7, #23]
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	4413      	add	r3, r2
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	7812      	ldrb	r2, [r2, #0]
 800c31c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c31e:	7dfb      	ldrb	r3, [r7, #23]
 800c320:	3301      	adds	r3, #1
 800c322:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c324:	7dfb      	ldrb	r3, [r7, #23]
 800c326:	68ba      	ldr	r2, [r7, #8]
 800c328:	4413      	add	r3, r2
 800c32a:	2203      	movs	r2, #3
 800c32c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c32e:	7dfb      	ldrb	r3, [r7, #23]
 800c330:	3301      	adds	r3, #1
 800c332:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c334:	e013      	b.n	800c35e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c336:	7dfb      	ldrb	r3, [r7, #23]
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	4413      	add	r3, r2
 800c33c:	693a      	ldr	r2, [r7, #16]
 800c33e:	7812      	ldrb	r2, [r2, #0]
 800c340:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	3301      	adds	r3, #1
 800c346:	613b      	str	r3, [r7, #16]
    idx++;
 800c348:	7dfb      	ldrb	r3, [r7, #23]
 800c34a:	3301      	adds	r3, #1
 800c34c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c34e:	7dfb      	ldrb	r3, [r7, #23]
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	4413      	add	r3, r2
 800c354:	2200      	movs	r2, #0
 800c356:	701a      	strb	r2, [r3, #0]
    idx++;
 800c358:	7dfb      	ldrb	r3, [r7, #23]
 800c35a:	3301      	adds	r3, #1
 800c35c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1e7      	bne.n	800c336 <USBD_GetString+0x6a>
 800c366:	e000      	b.n	800c36a <USBD_GetString+0x9e>
    return;
 800c368:	bf00      	nop
  }
}
 800c36a:	3718      	adds	r7, #24
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c378:	2300      	movs	r3, #0
 800c37a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c380:	e005      	b.n	800c38e <USBD_GetLen+0x1e>
  {
    len++;
 800c382:	7bfb      	ldrb	r3, [r7, #15]
 800c384:	3301      	adds	r3, #1
 800c386:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	3301      	adds	r3, #1
 800c38c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1f5      	bne.n	800c382 <USBD_GetLen+0x12>
  }

  return len;
 800c396:	7bfb      	ldrb	r3, [r7, #15]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3714      	adds	r7, #20
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2202      	movs	r2, #2
 800c3b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	68ba      	ldr	r2, [r7, #8]
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	68f8      	ldr	r0, [r7, #12]
 800c3cc:	f000 fceb 	bl	800cda6 <USBD_LL_Transmit>

  return USBD_OK;
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b084      	sub	sp, #16
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	60f8      	str	r0, [r7, #12]
 800c3e2:	60b9      	str	r1, [r7, #8]
 800c3e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f000 fcda 	bl	800cda6 <USBD_LL_Transmit>

  return USBD_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2203      	movs	r2, #3
 800c40c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	2100      	movs	r1, #0
 800c426:	68f8      	ldr	r0, [r7, #12]
 800c428:	f000 fcde 	bl	800cde8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b084      	sub	sp, #16
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	60f8      	str	r0, [r7, #12]
 800c43e:	60b9      	str	r1, [r7, #8]
 800c440:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	68ba      	ldr	r2, [r7, #8]
 800c446:	2100      	movs	r1, #0
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f000 fccd 	bl	800cde8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2204      	movs	r2, #4
 800c464:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c468:	2300      	movs	r3, #0
 800c46a:	2200      	movs	r2, #0
 800c46c:	2100      	movs	r1, #0
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fc99 	bl	800cda6 <USBD_LL_Transmit>

  return USBD_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b082      	sub	sp, #8
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2205      	movs	r2, #5
 800c48a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c48e:	2300      	movs	r3, #0
 800c490:	2200      	movs	r2, #0
 800c492:	2100      	movs	r1, #0
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 fca7 	bl	800cde8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	4912      	ldr	r1, [pc, #72]	@ (800c4f4 <MX_USB_DEVICE_Init+0x50>)
 800c4ac:	4812      	ldr	r0, [pc, #72]	@ (800c4f8 <MX_USB_DEVICE_Init+0x54>)
 800c4ae:	f7fe fcf7 	bl	800aea0 <USBD_Init>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c4b8:	f7f6 fe9e 	bl	80031f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c4bc:	490f      	ldr	r1, [pc, #60]	@ (800c4fc <MX_USB_DEVICE_Init+0x58>)
 800c4be:	480e      	ldr	r0, [pc, #56]	@ (800c4f8 <MX_USB_DEVICE_Init+0x54>)
 800c4c0:	f7fe fd1e 	bl	800af00 <USBD_RegisterClass>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d001      	beq.n	800c4ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c4ca:	f7f6 fe95 	bl	80031f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c4ce:	490c      	ldr	r1, [pc, #48]	@ (800c500 <MX_USB_DEVICE_Init+0x5c>)
 800c4d0:	4809      	ldr	r0, [pc, #36]	@ (800c4f8 <MX_USB_DEVICE_Init+0x54>)
 800c4d2:	f7fe fc15 	bl	800ad00 <USBD_CDC_RegisterInterface>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d001      	beq.n	800c4e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c4dc:	f7f6 fe8c 	bl	80031f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c4e0:	4805      	ldr	r0, [pc, #20]	@ (800c4f8 <MX_USB_DEVICE_Init+0x54>)
 800c4e2:	f7fe fd43 	bl	800af6c <USBD_Start>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d001      	beq.n	800c4f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c4ec:	f7f6 fe84 	bl	80031f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c4f0:	bf00      	nop
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	200000e8 	.word	0x200000e8
 800c4f8:	200006c8 	.word	0x200006c8
 800c4fc:	20000054 	.word	0x20000054
 800c500:	200000d4 	.word	0x200000d4

0800c504 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c508:	2200      	movs	r2, #0
 800c50a:	4905      	ldr	r1, [pc, #20]	@ (800c520 <CDC_Init_FS+0x1c>)
 800c50c:	4805      	ldr	r0, [pc, #20]	@ (800c524 <CDC_Init_FS+0x20>)
 800c50e:	f7fe fc11 	bl	800ad34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c512:	4905      	ldr	r1, [pc, #20]	@ (800c528 <CDC_Init_FS+0x24>)
 800c514:	4803      	ldr	r0, [pc, #12]	@ (800c524 <CDC_Init_FS+0x20>)
 800c516:	f7fe fc2f 	bl	800ad78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c51a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	200011a4 	.word	0x200011a4
 800c524:	200006c8 	.word	0x200006c8
 800c528:	200009a4 	.word	0x200009a4

0800c52c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c52c:	b480      	push	{r7}
 800c52e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c530:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c532:	4618      	mov	r0, r3
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	6039      	str	r1, [r7, #0]
 800c546:	71fb      	strb	r3, [r7, #7]
 800c548:	4613      	mov	r3, r2
 800c54a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c54c:	79fb      	ldrb	r3, [r7, #7]
 800c54e:	2b23      	cmp	r3, #35	@ 0x23
 800c550:	d84a      	bhi.n	800c5e8 <CDC_Control_FS+0xac>
 800c552:	a201      	add	r2, pc, #4	@ (adr r2, 800c558 <CDC_Control_FS+0x1c>)
 800c554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c558:	0800c5e9 	.word	0x0800c5e9
 800c55c:	0800c5e9 	.word	0x0800c5e9
 800c560:	0800c5e9 	.word	0x0800c5e9
 800c564:	0800c5e9 	.word	0x0800c5e9
 800c568:	0800c5e9 	.word	0x0800c5e9
 800c56c:	0800c5e9 	.word	0x0800c5e9
 800c570:	0800c5e9 	.word	0x0800c5e9
 800c574:	0800c5e9 	.word	0x0800c5e9
 800c578:	0800c5e9 	.word	0x0800c5e9
 800c57c:	0800c5e9 	.word	0x0800c5e9
 800c580:	0800c5e9 	.word	0x0800c5e9
 800c584:	0800c5e9 	.word	0x0800c5e9
 800c588:	0800c5e9 	.word	0x0800c5e9
 800c58c:	0800c5e9 	.word	0x0800c5e9
 800c590:	0800c5e9 	.word	0x0800c5e9
 800c594:	0800c5e9 	.word	0x0800c5e9
 800c598:	0800c5e9 	.word	0x0800c5e9
 800c59c:	0800c5e9 	.word	0x0800c5e9
 800c5a0:	0800c5e9 	.word	0x0800c5e9
 800c5a4:	0800c5e9 	.word	0x0800c5e9
 800c5a8:	0800c5e9 	.word	0x0800c5e9
 800c5ac:	0800c5e9 	.word	0x0800c5e9
 800c5b0:	0800c5e9 	.word	0x0800c5e9
 800c5b4:	0800c5e9 	.word	0x0800c5e9
 800c5b8:	0800c5e9 	.word	0x0800c5e9
 800c5bc:	0800c5e9 	.word	0x0800c5e9
 800c5c0:	0800c5e9 	.word	0x0800c5e9
 800c5c4:	0800c5e9 	.word	0x0800c5e9
 800c5c8:	0800c5e9 	.word	0x0800c5e9
 800c5cc:	0800c5e9 	.word	0x0800c5e9
 800c5d0:	0800c5e9 	.word	0x0800c5e9
 800c5d4:	0800c5e9 	.word	0x0800c5e9
 800c5d8:	0800c5e9 	.word	0x0800c5e9
 800c5dc:	0800c5e9 	.word	0x0800c5e9
 800c5e0:	0800c5e9 	.word	0x0800c5e9
 800c5e4:	0800c5e9 	.word	0x0800c5e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c5e8:	bf00      	nop
  }

  return (USBD_OK);
 800c5ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c602:	6879      	ldr	r1, [r7, #4]
 800c604:	4805      	ldr	r0, [pc, #20]	@ (800c61c <CDC_Receive_FS+0x24>)
 800c606:	f7fe fbb7 	bl	800ad78 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c60a:	4804      	ldr	r0, [pc, #16]	@ (800c61c <CDC_Receive_FS+0x24>)
 800c60c:	f7fe fc12 	bl	800ae34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c610:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c612:	4618      	mov	r0, r3
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	200006c8 	.word	0x200006c8

0800c620 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	460b      	mov	r3, r1
 800c62a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c62c:	2300      	movs	r3, #0
 800c62e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c630:	4b0d      	ldr	r3, [pc, #52]	@ (800c668 <CDC_Transmit_FS+0x48>)
 800c632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c636:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d001      	beq.n	800c646 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c642:	2301      	movs	r3, #1
 800c644:	e00b      	b.n	800c65e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c646:	887b      	ldrh	r3, [r7, #2]
 800c648:	461a      	mov	r2, r3
 800c64a:	6879      	ldr	r1, [r7, #4]
 800c64c:	4806      	ldr	r0, [pc, #24]	@ (800c668 <CDC_Transmit_FS+0x48>)
 800c64e:	f7fe fb71 	bl	800ad34 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c652:	4805      	ldr	r0, [pc, #20]	@ (800c668 <CDC_Transmit_FS+0x48>)
 800c654:	f7fe fbae 	bl	800adb4 <USBD_CDC_TransmitPacket>
 800c658:	4603      	mov	r3, r0
 800c65a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	200006c8 	.word	0x200006c8

0800c66c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b087      	sub	sp, #28
 800c670:	af00      	add	r7, sp, #0
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	4613      	mov	r3, r2
 800c678:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c67a:	2300      	movs	r3, #0
 800c67c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c67e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c682:	4618      	mov	r0, r3
 800c684:	371c      	adds	r7, #28
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
	...

0800c690 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	4603      	mov	r3, r0
 800c698:	6039      	str	r1, [r7, #0]
 800c69a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	2212      	movs	r2, #18
 800c6a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c6a2:	4b03      	ldr	r3, [pc, #12]	@ (800c6b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr
 800c6b0:	20000104 	.word	0x20000104

0800c6b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	6039      	str	r1, [r7, #0]
 800c6be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	2204      	movs	r2, #4
 800c6c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c6c6:	4b03      	ldr	r3, [pc, #12]	@ (800c6d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	370c      	adds	r7, #12
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr
 800c6d4:	20000118 	.word	0x20000118

0800c6d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	4603      	mov	r3, r0
 800c6e0:	6039      	str	r1, [r7, #0]
 800c6e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6e4:	79fb      	ldrb	r3, [r7, #7]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d105      	bne.n	800c6f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	4907      	ldr	r1, [pc, #28]	@ (800c70c <USBD_FS_ProductStrDescriptor+0x34>)
 800c6ee:	4808      	ldr	r0, [pc, #32]	@ (800c710 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6f0:	f7ff fdec 	bl	800c2cc <USBD_GetString>
 800c6f4:	e004      	b.n	800c700 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	4904      	ldr	r1, [pc, #16]	@ (800c70c <USBD_FS_ProductStrDescriptor+0x34>)
 800c6fa:	4805      	ldr	r0, [pc, #20]	@ (800c710 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6fc:	f7ff fde6 	bl	800c2cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c700:	4b02      	ldr	r3, [pc, #8]	@ (800c70c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c702:	4618      	mov	r0, r3
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	200019a4 	.word	0x200019a4
 800c710:	08012b68 	.word	0x08012b68

0800c714 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	4603      	mov	r3, r0
 800c71c:	6039      	str	r1, [r7, #0]
 800c71e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c720:	683a      	ldr	r2, [r7, #0]
 800c722:	4904      	ldr	r1, [pc, #16]	@ (800c734 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c724:	4804      	ldr	r0, [pc, #16]	@ (800c738 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c726:	f7ff fdd1 	bl	800c2cc <USBD_GetString>
  return USBD_StrDesc;
 800c72a:	4b02      	ldr	r3, [pc, #8]	@ (800c734 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	200019a4 	.word	0x200019a4
 800c738:	08012b80 	.word	0x08012b80

0800c73c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	4603      	mov	r3, r0
 800c744:	6039      	str	r1, [r7, #0]
 800c746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	221a      	movs	r2, #26
 800c74c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c74e:	f000 f843 	bl	800c7d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c752:	4b02      	ldr	r3, [pc, #8]	@ (800c75c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c754:	4618      	mov	r0, r3
 800c756:	3708      	adds	r7, #8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	2000011c 	.word	0x2000011c

0800c760 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
 800c766:	4603      	mov	r3, r0
 800c768:	6039      	str	r1, [r7, #0]
 800c76a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c76c:	79fb      	ldrb	r3, [r7, #7]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d105      	bne.n	800c77e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	4907      	ldr	r1, [pc, #28]	@ (800c794 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c776:	4808      	ldr	r0, [pc, #32]	@ (800c798 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c778:	f7ff fda8 	bl	800c2cc <USBD_GetString>
 800c77c:	e004      	b.n	800c788 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	4904      	ldr	r1, [pc, #16]	@ (800c794 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c782:	4805      	ldr	r0, [pc, #20]	@ (800c798 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c784:	f7ff fda2 	bl	800c2cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c788:	4b02      	ldr	r3, [pc, #8]	@ (800c794 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	200019a4 	.word	0x200019a4
 800c798:	08012b94 	.word	0x08012b94

0800c79c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	6039      	str	r1, [r7, #0]
 800c7a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c7a8:	79fb      	ldrb	r3, [r7, #7]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d105      	bne.n	800c7ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7ae:	683a      	ldr	r2, [r7, #0]
 800c7b0:	4907      	ldr	r1, [pc, #28]	@ (800c7d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7b2:	4808      	ldr	r0, [pc, #32]	@ (800c7d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7b4:	f7ff fd8a 	bl	800c2cc <USBD_GetString>
 800c7b8:	e004      	b.n	800c7c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7ba:	683a      	ldr	r2, [r7, #0]
 800c7bc:	4904      	ldr	r1, [pc, #16]	@ (800c7d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7be:	4805      	ldr	r0, [pc, #20]	@ (800c7d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7c0:	f7ff fd84 	bl	800c2cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7c4:	4b02      	ldr	r3, [pc, #8]	@ (800c7d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	200019a4 	.word	0x200019a4
 800c7d4:	08012ba0 	.word	0x08012ba0

0800c7d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c7de:	4b0f      	ldr	r3, [pc, #60]	@ (800c81c <Get_SerialNum+0x44>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c7e4:	4b0e      	ldr	r3, [pc, #56]	@ (800c820 <Get_SerialNum+0x48>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c7ea:	4b0e      	ldr	r3, [pc, #56]	@ (800c824 <Get_SerialNum+0x4c>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d009      	beq.n	800c812 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c7fe:	2208      	movs	r2, #8
 800c800:	4909      	ldr	r1, [pc, #36]	@ (800c828 <Get_SerialNum+0x50>)
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	f000 f814 	bl	800c830 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c808:	2204      	movs	r2, #4
 800c80a:	4908      	ldr	r1, [pc, #32]	@ (800c82c <Get_SerialNum+0x54>)
 800c80c:	68b8      	ldr	r0, [r7, #8]
 800c80e:	f000 f80f 	bl	800c830 <IntToUnicode>
  }
}
 800c812:	bf00      	nop
 800c814:	3710      	adds	r7, #16
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	1fff7a10 	.word	0x1fff7a10
 800c820:	1fff7a14 	.word	0x1fff7a14
 800c824:	1fff7a18 	.word	0x1fff7a18
 800c828:	2000011e 	.word	0x2000011e
 800c82c:	2000012e 	.word	0x2000012e

0800c830 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c830:	b480      	push	{r7}
 800c832:	b087      	sub	sp, #28
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	4613      	mov	r3, r2
 800c83c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c83e:	2300      	movs	r3, #0
 800c840:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c842:	2300      	movs	r3, #0
 800c844:	75fb      	strb	r3, [r7, #23]
 800c846:	e027      	b.n	800c898 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	0f1b      	lsrs	r3, r3, #28
 800c84c:	2b09      	cmp	r3, #9
 800c84e:	d80b      	bhi.n	800c868 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	0f1b      	lsrs	r3, r3, #28
 800c854:	b2da      	uxtb	r2, r3
 800c856:	7dfb      	ldrb	r3, [r7, #23]
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	4619      	mov	r1, r3
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	440b      	add	r3, r1
 800c860:	3230      	adds	r2, #48	@ 0x30
 800c862:	b2d2      	uxtb	r2, r2
 800c864:	701a      	strb	r2, [r3, #0]
 800c866:	e00a      	b.n	800c87e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	0f1b      	lsrs	r3, r3, #28
 800c86c:	b2da      	uxtb	r2, r3
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
 800c870:	005b      	lsls	r3, r3, #1
 800c872:	4619      	mov	r1, r3
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	440b      	add	r3, r1
 800c878:	3237      	adds	r2, #55	@ 0x37
 800c87a:	b2d2      	uxtb	r2, r2
 800c87c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	011b      	lsls	r3, r3, #4
 800c882:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c884:	7dfb      	ldrb	r3, [r7, #23]
 800c886:	005b      	lsls	r3, r3, #1
 800c888:	3301      	adds	r3, #1
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	4413      	add	r3, r2
 800c88e:	2200      	movs	r2, #0
 800c890:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c892:	7dfb      	ldrb	r3, [r7, #23]
 800c894:	3301      	adds	r3, #1
 800c896:	75fb      	strb	r3, [r7, #23]
 800c898:	7dfa      	ldrb	r2, [r7, #23]
 800c89a:	79fb      	ldrb	r3, [r7, #7]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d3d3      	bcc.n	800c848 <IntToUnicode+0x18>
  }
}
 800c8a0:	bf00      	nop
 800c8a2:	bf00      	nop
 800c8a4:	371c      	adds	r7, #28
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr
	...

0800c8b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b08a      	sub	sp, #40	@ 0x28
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8b8:	f107 0314 	add.w	r3, r7, #20
 800c8bc:	2200      	movs	r2, #0
 800c8be:	601a      	str	r2, [r3, #0]
 800c8c0:	605a      	str	r2, [r3, #4]
 800c8c2:	609a      	str	r2, [r3, #8]
 800c8c4:	60da      	str	r2, [r3, #12]
 800c8c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c8d0:	d13a      	bne.n	800c948 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	613b      	str	r3, [r7, #16]
 800c8d6:	4b1e      	ldr	r3, [pc, #120]	@ (800c950 <HAL_PCD_MspInit+0xa0>)
 800c8d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8da:	4a1d      	ldr	r2, [pc, #116]	@ (800c950 <HAL_PCD_MspInit+0xa0>)
 800c8dc:	f043 0301 	orr.w	r3, r3, #1
 800c8e0:	6313      	str	r3, [r2, #48]	@ 0x30
 800c8e2:	4b1b      	ldr	r3, [pc, #108]	@ (800c950 <HAL_PCD_MspInit+0xa0>)
 800c8e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8e6:	f003 0301 	and.w	r3, r3, #1
 800c8ea:	613b      	str	r3, [r7, #16]
 800c8ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c8ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c8f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8f4:	2302      	movs	r3, #2
 800c8f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c900:	230a      	movs	r3, #10
 800c902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c904:	f107 0314 	add.w	r3, r7, #20
 800c908:	4619      	mov	r1, r3
 800c90a:	4812      	ldr	r0, [pc, #72]	@ (800c954 <HAL_PCD_MspInit+0xa4>)
 800c90c:	f7f7 fcaa 	bl	8004264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c910:	4b0f      	ldr	r3, [pc, #60]	@ (800c950 <HAL_PCD_MspInit+0xa0>)
 800c912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c914:	4a0e      	ldr	r2, [pc, #56]	@ (800c950 <HAL_PCD_MspInit+0xa0>)
 800c916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c91a:	6353      	str	r3, [r2, #52]	@ 0x34
 800c91c:	2300      	movs	r3, #0
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	4b0b      	ldr	r3, [pc, #44]	@ (800c950 <HAL_PCD_MspInit+0xa0>)
 800c922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c924:	4a0a      	ldr	r2, [pc, #40]	@ (800c950 <HAL_PCD_MspInit+0xa0>)
 800c926:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c92a:	6453      	str	r3, [r2, #68]	@ 0x44
 800c92c:	4b08      	ldr	r3, [pc, #32]	@ (800c950 <HAL_PCD_MspInit+0xa0>)
 800c92e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c934:	60fb      	str	r3, [r7, #12]
 800c936:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c938:	2200      	movs	r2, #0
 800c93a:	2100      	movs	r1, #0
 800c93c:	2043      	movs	r0, #67	@ 0x43
 800c93e:	f7f7 f8bc 	bl	8003aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c942:	2043      	movs	r0, #67	@ 0x43
 800c944:	f7f7 f8d5 	bl	8003af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c948:	bf00      	nop
 800c94a:	3728      	adds	r7, #40	@ 0x28
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	40023800 	.word	0x40023800
 800c954:	40020000 	.word	0x40020000

0800c958 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c96c:	4619      	mov	r1, r3
 800c96e:	4610      	mov	r0, r2
 800c970:	f7fe fb49 	bl	800b006 <USBD_LL_SetupStage>
}
 800c974:	bf00      	nop
 800c976:	3708      	adds	r7, #8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	460b      	mov	r3, r1
 800c986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c98e:	78fa      	ldrb	r2, [r7, #3]
 800c990:	6879      	ldr	r1, [r7, #4]
 800c992:	4613      	mov	r3, r2
 800c994:	00db      	lsls	r3, r3, #3
 800c996:	4413      	add	r3, r2
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	440b      	add	r3, r1
 800c99c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	78fb      	ldrb	r3, [r7, #3]
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	f7fe fb83 	bl	800b0b0 <USBD_LL_DataOutStage>
}
 800c9aa:	bf00      	nop
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b082      	sub	sp, #8
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c9c4:	78fa      	ldrb	r2, [r7, #3]
 800c9c6:	6879      	ldr	r1, [r7, #4]
 800c9c8:	4613      	mov	r3, r2
 800c9ca:	00db      	lsls	r3, r3, #3
 800c9cc:	4413      	add	r3, r2
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	440b      	add	r3, r1
 800c9d2:	3320      	adds	r3, #32
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	78fb      	ldrb	r3, [r7, #3]
 800c9d8:	4619      	mov	r1, r3
 800c9da:	f7fe fc1c 	bl	800b216 <USBD_LL_DataInStage>
}
 800c9de:	bf00      	nop
 800c9e0:	3708      	adds	r7, #8
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b082      	sub	sp, #8
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7fe fd56 	bl	800b4a6 <USBD_LL_SOF>
}
 800c9fa:	bf00      	nop
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b084      	sub	sp, #16
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	79db      	ldrb	r3, [r3, #7]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d102      	bne.n	800ca1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ca16:	2300      	movs	r3, #0
 800ca18:	73fb      	strb	r3, [r7, #15]
 800ca1a:	e008      	b.n	800ca2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	79db      	ldrb	r3, [r3, #7]
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d102      	bne.n	800ca2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ca24:	2301      	movs	r3, #1
 800ca26:	73fb      	strb	r3, [r7, #15]
 800ca28:	e001      	b.n	800ca2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ca2a:	f7f6 fbe5 	bl	80031f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca34:	7bfa      	ldrb	r2, [r7, #15]
 800ca36:	4611      	mov	r1, r2
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7fe fcf0 	bl	800b41e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7fe fc98 	bl	800b37a <USBD_LL_Reset>
}
 800ca4a:	bf00      	nop
 800ca4c:	3710      	adds	r7, #16
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
	...

0800ca54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fe fceb 	bl	800b43e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	6812      	ldr	r2, [r2, #0]
 800ca76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ca7a:	f043 0301 	orr.w	r3, r3, #1
 800ca7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	7adb      	ldrb	r3, [r3, #11]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d005      	beq.n	800ca94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca88:	4b04      	ldr	r3, [pc, #16]	@ (800ca9c <HAL_PCD_SuspendCallback+0x48>)
 800ca8a:	691b      	ldr	r3, [r3, #16]
 800ca8c:	4a03      	ldr	r2, [pc, #12]	@ (800ca9c <HAL_PCD_SuspendCallback+0x48>)
 800ca8e:	f043 0306 	orr.w	r3, r3, #6
 800ca92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca94:	bf00      	nop
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	e000ed00 	.word	0xe000ed00

0800caa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800caae:	4618      	mov	r0, r3
 800cab0:	f7fe fce1 	bl	800b476 <USBD_LL_Resume>
}
 800cab4:	bf00      	nop
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	460b      	mov	r3, r1
 800cac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cace:	78fa      	ldrb	r2, [r7, #3]
 800cad0:	4611      	mov	r1, r2
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fe fd39 	bl	800b54a <USBD_LL_IsoOUTIncomplete>
}
 800cad8:	bf00      	nop
 800cada:	3708      	adds	r7, #8
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	460b      	mov	r3, r1
 800caea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800caf2:	78fa      	ldrb	r2, [r7, #3]
 800caf4:	4611      	mov	r1, r2
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fe fcf5 	bl	800b4e6 <USBD_LL_IsoINIncomplete>
}
 800cafc:	bf00      	nop
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fe fd4b 	bl	800b5ae <USBD_LL_DevConnected>
}
 800cb18:	bf00      	nop
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fe fd48 	bl	800b5c4 <USBD_LL_DevDisconnected>
}
 800cb34:	bf00      	nop
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d13c      	bne.n	800cbc6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cb4c:	4a20      	ldr	r2, [pc, #128]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a1e      	ldr	r2, [pc, #120]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cb58:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cb5c:	4b1c      	ldr	r3, [pc, #112]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cb5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cb62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cb64:	4b1a      	ldr	r3, [pc, #104]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cb66:	2204      	movs	r2, #4
 800cb68:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cb6a:	4b19      	ldr	r3, [pc, #100]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cb6c:	2202      	movs	r2, #2
 800cb6e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cb70:	4b17      	ldr	r3, [pc, #92]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cb72:	2200      	movs	r2, #0
 800cb74:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb76:	4b16      	ldr	r3, [pc, #88]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cb78:	2202      	movs	r2, #2
 800cb7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cb7c:	4b14      	ldr	r3, [pc, #80]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cb82:	4b13      	ldr	r3, [pc, #76]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cb88:	4b11      	ldr	r3, [pc, #68]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cb8e:	4b10      	ldr	r3, [pc, #64]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cb90:	2200      	movs	r2, #0
 800cb92:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cb94:	4b0e      	ldr	r3, [pc, #56]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cb96:	2200      	movs	r2, #0
 800cb98:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cb9a:	480d      	ldr	r0, [pc, #52]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cb9c:	f7f9 f810 	bl	8005bc0 <HAL_PCD_Init>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cba6:	f7f6 fb27 	bl	80031f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cbaa:	2180      	movs	r1, #128	@ 0x80
 800cbac:	4808      	ldr	r0, [pc, #32]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cbae:	f7fa fa3c 	bl	800702a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cbb2:	2240      	movs	r2, #64	@ 0x40
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	4806      	ldr	r0, [pc, #24]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cbb8:	f7fa f9f0 	bl	8006f9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cbbc:	2280      	movs	r2, #128	@ 0x80
 800cbbe:	2101      	movs	r1, #1
 800cbc0:	4803      	ldr	r0, [pc, #12]	@ (800cbd0 <USBD_LL_Init+0x94>)
 800cbc2:	f7fa f9eb 	bl	8006f9c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cbc6:	2300      	movs	r3, #0
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3708      	adds	r7, #8
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	20001ba4 	.word	0x20001ba4

0800cbd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7f9 f8f7 	bl	8005dde <HAL_PCD_Start>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbf4:	7bfb      	ldrb	r3, [r7, #15]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 f942 	bl	800ce80 <USBD_Get_USB_Status>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc00:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b084      	sub	sp, #16
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	4608      	mov	r0, r1
 800cc14:	4611      	mov	r1, r2
 800cc16:	461a      	mov	r2, r3
 800cc18:	4603      	mov	r3, r0
 800cc1a:	70fb      	strb	r3, [r7, #3]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	70bb      	strb	r3, [r7, #2]
 800cc20:	4613      	mov	r3, r2
 800cc22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc24:	2300      	movs	r3, #0
 800cc26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cc32:	78bb      	ldrb	r3, [r7, #2]
 800cc34:	883a      	ldrh	r2, [r7, #0]
 800cc36:	78f9      	ldrb	r1, [r7, #3]
 800cc38:	f7f9 fdcb 	bl	80067d2 <HAL_PCD_EP_Open>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc40:	7bfb      	ldrb	r3, [r7, #15]
 800cc42:	4618      	mov	r0, r3
 800cc44:	f000 f91c 	bl	800ce80 <USBD_Get_USB_Status>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b084      	sub	sp, #16
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	460b      	mov	r3, r1
 800cc60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc62:	2300      	movs	r3, #0
 800cc64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc66:	2300      	movs	r3, #0
 800cc68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cc70:	78fa      	ldrb	r2, [r7, #3]
 800cc72:	4611      	mov	r1, r2
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7f9 fe16 	bl	80068a6 <HAL_PCD_EP_Close>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
 800cc80:	4618      	mov	r0, r3
 800cc82:	f000 f8fd 	bl	800ce80 <USBD_Get_USB_Status>
 800cc86:	4603      	mov	r3, r0
 800cc88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca0:	2300      	movs	r3, #0
 800cca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ccae:	78fa      	ldrb	r2, [r7, #3]
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7f9 fece 	bl	8006a54 <HAL_PCD_EP_SetStall>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f000 f8de 	bl	800ce80 <USBD_Get_USB_Status>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b084      	sub	sp, #16
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	460b      	mov	r3, r1
 800ccdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccde:	2300      	movs	r3, #0
 800cce0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ccec:	78fa      	ldrb	r2, [r7, #3]
 800ccee:	4611      	mov	r1, r2
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7f9 ff12 	bl	8006b1a <HAL_PCD_EP_ClrStall>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 f8bf 	bl	800ce80 <USBD_Get_USB_Status>
 800cd02:	4603      	mov	r3, r0
 800cd04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd06:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3710      	adds	r7, #16
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	460b      	mov	r3, r1
 800cd1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	da0b      	bge.n	800cd44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd2c:	78fb      	ldrb	r3, [r7, #3]
 800cd2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd32:	68f9      	ldr	r1, [r7, #12]
 800cd34:	4613      	mov	r3, r2
 800cd36:	00db      	lsls	r3, r3, #3
 800cd38:	4413      	add	r3, r2
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	440b      	add	r3, r1
 800cd3e:	3316      	adds	r3, #22
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	e00b      	b.n	800cd5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd44:	78fb      	ldrb	r3, [r7, #3]
 800cd46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd4a:	68f9      	ldr	r1, [r7, #12]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	00db      	lsls	r3, r3, #3
 800cd50:	4413      	add	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	440b      	add	r3, r1
 800cd56:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cd5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3714      	adds	r7, #20
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	460b      	mov	r3, r1
 800cd72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd74:	2300      	movs	r3, #0
 800cd76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cd82:	78fa      	ldrb	r2, [r7, #3]
 800cd84:	4611      	mov	r1, r2
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7f9 fcff 	bl	800678a <HAL_PCD_SetAddress>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd90:	7bfb      	ldrb	r3, [r7, #15]
 800cd92:	4618      	mov	r0, r3
 800cd94:	f000 f874 	bl	800ce80 <USBD_Get_USB_Status>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b086      	sub	sp, #24
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	60f8      	str	r0, [r7, #12]
 800cdae:	607a      	str	r2, [r7, #4]
 800cdb0:	603b      	str	r3, [r7, #0]
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cdc4:	7af9      	ldrb	r1, [r7, #11]
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	f7f9 fe09 	bl	80069e0 <HAL_PCD_EP_Transmit>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdd2:	7dfb      	ldrb	r3, [r7, #23]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f000 f853 	bl	800ce80 <USBD_Get_USB_Status>
 800cdda:	4603      	mov	r3, r0
 800cddc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdde:	7dbb      	ldrb	r3, [r7, #22]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3718      	adds	r7, #24
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	607a      	str	r2, [r7, #4]
 800cdf2:	603b      	str	r3, [r7, #0]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ce06:	7af9      	ldrb	r1, [r7, #11]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	f7f9 fd95 	bl	800693a <HAL_PCD_EP_Receive>
 800ce10:	4603      	mov	r3, r0
 800ce12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce14:	7dfb      	ldrb	r3, [r7, #23]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f000 f832 	bl	800ce80 <USBD_Get_USB_Status>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce20:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3718      	adds	r7, #24
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b082      	sub	sp, #8
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	460b      	mov	r3, r1
 800ce34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce3c:	78fa      	ldrb	r2, [r7, #3]
 800ce3e:	4611      	mov	r1, r2
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7f9 fdb5 	bl	80069b0 <HAL_PCD_EP_GetRxCount>
 800ce46:	4603      	mov	r3, r0
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce58:	4b03      	ldr	r3, [pc, #12]	@ (800ce68 <USBD_static_malloc+0x18>)
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	370c      	adds	r7, #12
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce64:	4770      	bx	lr
 800ce66:	bf00      	nop
 800ce68:	20002088 	.word	0x20002088

0800ce6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]

}
 800ce74:	bf00      	nop
 800ce76:	370c      	adds	r7, #12
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce8e:	79fb      	ldrb	r3, [r7, #7]
 800ce90:	2b03      	cmp	r3, #3
 800ce92:	d817      	bhi.n	800cec4 <USBD_Get_USB_Status+0x44>
 800ce94:	a201      	add	r2, pc, #4	@ (adr r2, 800ce9c <USBD_Get_USB_Status+0x1c>)
 800ce96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9a:	bf00      	nop
 800ce9c:	0800cead 	.word	0x0800cead
 800cea0:	0800ceb3 	.word	0x0800ceb3
 800cea4:	0800ceb9 	.word	0x0800ceb9
 800cea8:	0800cebf 	.word	0x0800cebf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	73fb      	strb	r3, [r7, #15]
    break;
 800ceb0:	e00b      	b.n	800ceca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	73fb      	strb	r3, [r7, #15]
    break;
 800ceb6:	e008      	b.n	800ceca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	73fb      	strb	r3, [r7, #15]
    break;
 800cebc:	e005      	b.n	800ceca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cebe:	2303      	movs	r3, #3
 800cec0:	73fb      	strb	r3, [r7, #15]
    break;
 800cec2:	e002      	b.n	800ceca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cec4:	2303      	movs	r3, #3
 800cec6:	73fb      	strb	r3, [r7, #15]
    break;
 800cec8:	bf00      	nop
  }
  return usb_status;
 800ceca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3714      	adds	r7, #20
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <__cvt>:
 800ced8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cedc:	ec57 6b10 	vmov	r6, r7, d0
 800cee0:	2f00      	cmp	r7, #0
 800cee2:	460c      	mov	r4, r1
 800cee4:	4619      	mov	r1, r3
 800cee6:	463b      	mov	r3, r7
 800cee8:	bfbb      	ittet	lt
 800ceea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ceee:	461f      	movlt	r7, r3
 800cef0:	2300      	movge	r3, #0
 800cef2:	232d      	movlt	r3, #45	@ 0x2d
 800cef4:	700b      	strb	r3, [r1, #0]
 800cef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cef8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cefc:	4691      	mov	r9, r2
 800cefe:	f023 0820 	bic.w	r8, r3, #32
 800cf02:	bfbc      	itt	lt
 800cf04:	4632      	movlt	r2, r6
 800cf06:	4616      	movlt	r6, r2
 800cf08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf0c:	d005      	beq.n	800cf1a <__cvt+0x42>
 800cf0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cf12:	d100      	bne.n	800cf16 <__cvt+0x3e>
 800cf14:	3401      	adds	r4, #1
 800cf16:	2102      	movs	r1, #2
 800cf18:	e000      	b.n	800cf1c <__cvt+0x44>
 800cf1a:	2103      	movs	r1, #3
 800cf1c:	ab03      	add	r3, sp, #12
 800cf1e:	9301      	str	r3, [sp, #4]
 800cf20:	ab02      	add	r3, sp, #8
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	ec47 6b10 	vmov	d0, r6, r7
 800cf28:	4653      	mov	r3, sl
 800cf2a:	4622      	mov	r2, r4
 800cf2c:	f001 f8b8 	bl	800e0a0 <_dtoa_r>
 800cf30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cf34:	4605      	mov	r5, r0
 800cf36:	d119      	bne.n	800cf6c <__cvt+0x94>
 800cf38:	f019 0f01 	tst.w	r9, #1
 800cf3c:	d00e      	beq.n	800cf5c <__cvt+0x84>
 800cf3e:	eb00 0904 	add.w	r9, r0, r4
 800cf42:	2200      	movs	r2, #0
 800cf44:	2300      	movs	r3, #0
 800cf46:	4630      	mov	r0, r6
 800cf48:	4639      	mov	r1, r7
 800cf4a:	f7f3 fdbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf4e:	b108      	cbz	r0, 800cf54 <__cvt+0x7c>
 800cf50:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf54:	2230      	movs	r2, #48	@ 0x30
 800cf56:	9b03      	ldr	r3, [sp, #12]
 800cf58:	454b      	cmp	r3, r9
 800cf5a:	d31e      	bcc.n	800cf9a <__cvt+0xc2>
 800cf5c:	9b03      	ldr	r3, [sp, #12]
 800cf5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf60:	1b5b      	subs	r3, r3, r5
 800cf62:	4628      	mov	r0, r5
 800cf64:	6013      	str	r3, [r2, #0]
 800cf66:	b004      	add	sp, #16
 800cf68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf70:	eb00 0904 	add.w	r9, r0, r4
 800cf74:	d1e5      	bne.n	800cf42 <__cvt+0x6a>
 800cf76:	7803      	ldrb	r3, [r0, #0]
 800cf78:	2b30      	cmp	r3, #48	@ 0x30
 800cf7a:	d10a      	bne.n	800cf92 <__cvt+0xba>
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2300      	movs	r3, #0
 800cf80:	4630      	mov	r0, r6
 800cf82:	4639      	mov	r1, r7
 800cf84:	f7f3 fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf88:	b918      	cbnz	r0, 800cf92 <__cvt+0xba>
 800cf8a:	f1c4 0401 	rsb	r4, r4, #1
 800cf8e:	f8ca 4000 	str.w	r4, [sl]
 800cf92:	f8da 3000 	ldr.w	r3, [sl]
 800cf96:	4499      	add	r9, r3
 800cf98:	e7d3      	b.n	800cf42 <__cvt+0x6a>
 800cf9a:	1c59      	adds	r1, r3, #1
 800cf9c:	9103      	str	r1, [sp, #12]
 800cf9e:	701a      	strb	r2, [r3, #0]
 800cfa0:	e7d9      	b.n	800cf56 <__cvt+0x7e>

0800cfa2 <__exponent>:
 800cfa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfa4:	2900      	cmp	r1, #0
 800cfa6:	bfba      	itte	lt
 800cfa8:	4249      	neglt	r1, r1
 800cfaa:	232d      	movlt	r3, #45	@ 0x2d
 800cfac:	232b      	movge	r3, #43	@ 0x2b
 800cfae:	2909      	cmp	r1, #9
 800cfb0:	7002      	strb	r2, [r0, #0]
 800cfb2:	7043      	strb	r3, [r0, #1]
 800cfb4:	dd29      	ble.n	800d00a <__exponent+0x68>
 800cfb6:	f10d 0307 	add.w	r3, sp, #7
 800cfba:	461d      	mov	r5, r3
 800cfbc:	270a      	movs	r7, #10
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	fbb1 f6f7 	udiv	r6, r1, r7
 800cfc4:	fb07 1416 	mls	r4, r7, r6, r1
 800cfc8:	3430      	adds	r4, #48	@ 0x30
 800cfca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cfce:	460c      	mov	r4, r1
 800cfd0:	2c63      	cmp	r4, #99	@ 0x63
 800cfd2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cfd6:	4631      	mov	r1, r6
 800cfd8:	dcf1      	bgt.n	800cfbe <__exponent+0x1c>
 800cfda:	3130      	adds	r1, #48	@ 0x30
 800cfdc:	1e94      	subs	r4, r2, #2
 800cfde:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cfe2:	1c41      	adds	r1, r0, #1
 800cfe4:	4623      	mov	r3, r4
 800cfe6:	42ab      	cmp	r3, r5
 800cfe8:	d30a      	bcc.n	800d000 <__exponent+0x5e>
 800cfea:	f10d 0309 	add.w	r3, sp, #9
 800cfee:	1a9b      	subs	r3, r3, r2
 800cff0:	42ac      	cmp	r4, r5
 800cff2:	bf88      	it	hi
 800cff4:	2300      	movhi	r3, #0
 800cff6:	3302      	adds	r3, #2
 800cff8:	4403      	add	r3, r0
 800cffa:	1a18      	subs	r0, r3, r0
 800cffc:	b003      	add	sp, #12
 800cffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d000:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d004:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d008:	e7ed      	b.n	800cfe6 <__exponent+0x44>
 800d00a:	2330      	movs	r3, #48	@ 0x30
 800d00c:	3130      	adds	r1, #48	@ 0x30
 800d00e:	7083      	strb	r3, [r0, #2]
 800d010:	70c1      	strb	r1, [r0, #3]
 800d012:	1d03      	adds	r3, r0, #4
 800d014:	e7f1      	b.n	800cffa <__exponent+0x58>
	...

0800d018 <_printf_float>:
 800d018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d01c:	b08d      	sub	sp, #52	@ 0x34
 800d01e:	460c      	mov	r4, r1
 800d020:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d024:	4616      	mov	r6, r2
 800d026:	461f      	mov	r7, r3
 800d028:	4605      	mov	r5, r0
 800d02a:	f000 ff23 	bl	800de74 <_localeconv_r>
 800d02e:	6803      	ldr	r3, [r0, #0]
 800d030:	9304      	str	r3, [sp, #16]
 800d032:	4618      	mov	r0, r3
 800d034:	f7f3 f91c 	bl	8000270 <strlen>
 800d038:	2300      	movs	r3, #0
 800d03a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d03c:	f8d8 3000 	ldr.w	r3, [r8]
 800d040:	9005      	str	r0, [sp, #20]
 800d042:	3307      	adds	r3, #7
 800d044:	f023 0307 	bic.w	r3, r3, #7
 800d048:	f103 0208 	add.w	r2, r3, #8
 800d04c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d050:	f8d4 b000 	ldr.w	fp, [r4]
 800d054:	f8c8 2000 	str.w	r2, [r8]
 800d058:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d05c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d060:	9307      	str	r3, [sp, #28]
 800d062:	f8cd 8018 	str.w	r8, [sp, #24]
 800d066:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d06a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d06e:	4b9c      	ldr	r3, [pc, #624]	@ (800d2e0 <_printf_float+0x2c8>)
 800d070:	f04f 32ff 	mov.w	r2, #4294967295
 800d074:	f7f3 fd5a 	bl	8000b2c <__aeabi_dcmpun>
 800d078:	bb70      	cbnz	r0, 800d0d8 <_printf_float+0xc0>
 800d07a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d07e:	4b98      	ldr	r3, [pc, #608]	@ (800d2e0 <_printf_float+0x2c8>)
 800d080:	f04f 32ff 	mov.w	r2, #4294967295
 800d084:	f7f3 fd34 	bl	8000af0 <__aeabi_dcmple>
 800d088:	bb30      	cbnz	r0, 800d0d8 <_printf_float+0xc0>
 800d08a:	2200      	movs	r2, #0
 800d08c:	2300      	movs	r3, #0
 800d08e:	4640      	mov	r0, r8
 800d090:	4649      	mov	r1, r9
 800d092:	f7f3 fd23 	bl	8000adc <__aeabi_dcmplt>
 800d096:	b110      	cbz	r0, 800d09e <_printf_float+0x86>
 800d098:	232d      	movs	r3, #45	@ 0x2d
 800d09a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d09e:	4a91      	ldr	r2, [pc, #580]	@ (800d2e4 <_printf_float+0x2cc>)
 800d0a0:	4b91      	ldr	r3, [pc, #580]	@ (800d2e8 <_printf_float+0x2d0>)
 800d0a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d0a6:	bf94      	ite	ls
 800d0a8:	4690      	movls	r8, r2
 800d0aa:	4698      	movhi	r8, r3
 800d0ac:	2303      	movs	r3, #3
 800d0ae:	6123      	str	r3, [r4, #16]
 800d0b0:	f02b 0304 	bic.w	r3, fp, #4
 800d0b4:	6023      	str	r3, [r4, #0]
 800d0b6:	f04f 0900 	mov.w	r9, #0
 800d0ba:	9700      	str	r7, [sp, #0]
 800d0bc:	4633      	mov	r3, r6
 800d0be:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	f000 f9d2 	bl	800d46c <_printf_common>
 800d0c8:	3001      	adds	r0, #1
 800d0ca:	f040 808d 	bne.w	800d1e8 <_printf_float+0x1d0>
 800d0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d2:	b00d      	add	sp, #52	@ 0x34
 800d0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d8:	4642      	mov	r2, r8
 800d0da:	464b      	mov	r3, r9
 800d0dc:	4640      	mov	r0, r8
 800d0de:	4649      	mov	r1, r9
 800d0e0:	f7f3 fd24 	bl	8000b2c <__aeabi_dcmpun>
 800d0e4:	b140      	cbz	r0, 800d0f8 <_printf_float+0xe0>
 800d0e6:	464b      	mov	r3, r9
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	bfbc      	itt	lt
 800d0ec:	232d      	movlt	r3, #45	@ 0x2d
 800d0ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d0f2:	4a7e      	ldr	r2, [pc, #504]	@ (800d2ec <_printf_float+0x2d4>)
 800d0f4:	4b7e      	ldr	r3, [pc, #504]	@ (800d2f0 <_printf_float+0x2d8>)
 800d0f6:	e7d4      	b.n	800d0a2 <_printf_float+0x8a>
 800d0f8:	6863      	ldr	r3, [r4, #4]
 800d0fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d0fe:	9206      	str	r2, [sp, #24]
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	d13b      	bne.n	800d17c <_printf_float+0x164>
 800d104:	2306      	movs	r3, #6
 800d106:	6063      	str	r3, [r4, #4]
 800d108:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d10c:	2300      	movs	r3, #0
 800d10e:	6022      	str	r2, [r4, #0]
 800d110:	9303      	str	r3, [sp, #12]
 800d112:	ab0a      	add	r3, sp, #40	@ 0x28
 800d114:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d118:	ab09      	add	r3, sp, #36	@ 0x24
 800d11a:	9300      	str	r3, [sp, #0]
 800d11c:	6861      	ldr	r1, [r4, #4]
 800d11e:	ec49 8b10 	vmov	d0, r8, r9
 800d122:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d126:	4628      	mov	r0, r5
 800d128:	f7ff fed6 	bl	800ced8 <__cvt>
 800d12c:	9b06      	ldr	r3, [sp, #24]
 800d12e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d130:	2b47      	cmp	r3, #71	@ 0x47
 800d132:	4680      	mov	r8, r0
 800d134:	d129      	bne.n	800d18a <_printf_float+0x172>
 800d136:	1cc8      	adds	r0, r1, #3
 800d138:	db02      	blt.n	800d140 <_printf_float+0x128>
 800d13a:	6863      	ldr	r3, [r4, #4]
 800d13c:	4299      	cmp	r1, r3
 800d13e:	dd41      	ble.n	800d1c4 <_printf_float+0x1ac>
 800d140:	f1aa 0a02 	sub.w	sl, sl, #2
 800d144:	fa5f fa8a 	uxtb.w	sl, sl
 800d148:	3901      	subs	r1, #1
 800d14a:	4652      	mov	r2, sl
 800d14c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d150:	9109      	str	r1, [sp, #36]	@ 0x24
 800d152:	f7ff ff26 	bl	800cfa2 <__exponent>
 800d156:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d158:	1813      	adds	r3, r2, r0
 800d15a:	2a01      	cmp	r2, #1
 800d15c:	4681      	mov	r9, r0
 800d15e:	6123      	str	r3, [r4, #16]
 800d160:	dc02      	bgt.n	800d168 <_printf_float+0x150>
 800d162:	6822      	ldr	r2, [r4, #0]
 800d164:	07d2      	lsls	r2, r2, #31
 800d166:	d501      	bpl.n	800d16c <_printf_float+0x154>
 800d168:	3301      	adds	r3, #1
 800d16a:	6123      	str	r3, [r4, #16]
 800d16c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d170:	2b00      	cmp	r3, #0
 800d172:	d0a2      	beq.n	800d0ba <_printf_float+0xa2>
 800d174:	232d      	movs	r3, #45	@ 0x2d
 800d176:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d17a:	e79e      	b.n	800d0ba <_printf_float+0xa2>
 800d17c:	9a06      	ldr	r2, [sp, #24]
 800d17e:	2a47      	cmp	r2, #71	@ 0x47
 800d180:	d1c2      	bne.n	800d108 <_printf_float+0xf0>
 800d182:	2b00      	cmp	r3, #0
 800d184:	d1c0      	bne.n	800d108 <_printf_float+0xf0>
 800d186:	2301      	movs	r3, #1
 800d188:	e7bd      	b.n	800d106 <_printf_float+0xee>
 800d18a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d18e:	d9db      	bls.n	800d148 <_printf_float+0x130>
 800d190:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d194:	d118      	bne.n	800d1c8 <_printf_float+0x1b0>
 800d196:	2900      	cmp	r1, #0
 800d198:	6863      	ldr	r3, [r4, #4]
 800d19a:	dd0b      	ble.n	800d1b4 <_printf_float+0x19c>
 800d19c:	6121      	str	r1, [r4, #16]
 800d19e:	b913      	cbnz	r3, 800d1a6 <_printf_float+0x18e>
 800d1a0:	6822      	ldr	r2, [r4, #0]
 800d1a2:	07d0      	lsls	r0, r2, #31
 800d1a4:	d502      	bpl.n	800d1ac <_printf_float+0x194>
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	440b      	add	r3, r1
 800d1aa:	6123      	str	r3, [r4, #16]
 800d1ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d1ae:	f04f 0900 	mov.w	r9, #0
 800d1b2:	e7db      	b.n	800d16c <_printf_float+0x154>
 800d1b4:	b913      	cbnz	r3, 800d1bc <_printf_float+0x1a4>
 800d1b6:	6822      	ldr	r2, [r4, #0]
 800d1b8:	07d2      	lsls	r2, r2, #31
 800d1ba:	d501      	bpl.n	800d1c0 <_printf_float+0x1a8>
 800d1bc:	3302      	adds	r3, #2
 800d1be:	e7f4      	b.n	800d1aa <_printf_float+0x192>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e7f2      	b.n	800d1aa <_printf_float+0x192>
 800d1c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d1c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1ca:	4299      	cmp	r1, r3
 800d1cc:	db05      	blt.n	800d1da <_printf_float+0x1c2>
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	6121      	str	r1, [r4, #16]
 800d1d2:	07d8      	lsls	r0, r3, #31
 800d1d4:	d5ea      	bpl.n	800d1ac <_printf_float+0x194>
 800d1d6:	1c4b      	adds	r3, r1, #1
 800d1d8:	e7e7      	b.n	800d1aa <_printf_float+0x192>
 800d1da:	2900      	cmp	r1, #0
 800d1dc:	bfd4      	ite	le
 800d1de:	f1c1 0202 	rsble	r2, r1, #2
 800d1e2:	2201      	movgt	r2, #1
 800d1e4:	4413      	add	r3, r2
 800d1e6:	e7e0      	b.n	800d1aa <_printf_float+0x192>
 800d1e8:	6823      	ldr	r3, [r4, #0]
 800d1ea:	055a      	lsls	r2, r3, #21
 800d1ec:	d407      	bmi.n	800d1fe <_printf_float+0x1e6>
 800d1ee:	6923      	ldr	r3, [r4, #16]
 800d1f0:	4642      	mov	r2, r8
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	47b8      	blx	r7
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	d12b      	bne.n	800d254 <_printf_float+0x23c>
 800d1fc:	e767      	b.n	800d0ce <_printf_float+0xb6>
 800d1fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d202:	f240 80dd 	bls.w	800d3c0 <_printf_float+0x3a8>
 800d206:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d20a:	2200      	movs	r2, #0
 800d20c:	2300      	movs	r3, #0
 800d20e:	f7f3 fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d212:	2800      	cmp	r0, #0
 800d214:	d033      	beq.n	800d27e <_printf_float+0x266>
 800d216:	4a37      	ldr	r2, [pc, #220]	@ (800d2f4 <_printf_float+0x2dc>)
 800d218:	2301      	movs	r3, #1
 800d21a:	4631      	mov	r1, r6
 800d21c:	4628      	mov	r0, r5
 800d21e:	47b8      	blx	r7
 800d220:	3001      	adds	r0, #1
 800d222:	f43f af54 	beq.w	800d0ce <_printf_float+0xb6>
 800d226:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d22a:	4543      	cmp	r3, r8
 800d22c:	db02      	blt.n	800d234 <_printf_float+0x21c>
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	07d8      	lsls	r0, r3, #31
 800d232:	d50f      	bpl.n	800d254 <_printf_float+0x23c>
 800d234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d238:	4631      	mov	r1, r6
 800d23a:	4628      	mov	r0, r5
 800d23c:	47b8      	blx	r7
 800d23e:	3001      	adds	r0, #1
 800d240:	f43f af45 	beq.w	800d0ce <_printf_float+0xb6>
 800d244:	f04f 0900 	mov.w	r9, #0
 800d248:	f108 38ff 	add.w	r8, r8, #4294967295
 800d24c:	f104 0a1a 	add.w	sl, r4, #26
 800d250:	45c8      	cmp	r8, r9
 800d252:	dc09      	bgt.n	800d268 <_printf_float+0x250>
 800d254:	6823      	ldr	r3, [r4, #0]
 800d256:	079b      	lsls	r3, r3, #30
 800d258:	f100 8103 	bmi.w	800d462 <_printf_float+0x44a>
 800d25c:	68e0      	ldr	r0, [r4, #12]
 800d25e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d260:	4298      	cmp	r0, r3
 800d262:	bfb8      	it	lt
 800d264:	4618      	movlt	r0, r3
 800d266:	e734      	b.n	800d0d2 <_printf_float+0xba>
 800d268:	2301      	movs	r3, #1
 800d26a:	4652      	mov	r2, sl
 800d26c:	4631      	mov	r1, r6
 800d26e:	4628      	mov	r0, r5
 800d270:	47b8      	blx	r7
 800d272:	3001      	adds	r0, #1
 800d274:	f43f af2b 	beq.w	800d0ce <_printf_float+0xb6>
 800d278:	f109 0901 	add.w	r9, r9, #1
 800d27c:	e7e8      	b.n	800d250 <_printf_float+0x238>
 800d27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d280:	2b00      	cmp	r3, #0
 800d282:	dc39      	bgt.n	800d2f8 <_printf_float+0x2e0>
 800d284:	4a1b      	ldr	r2, [pc, #108]	@ (800d2f4 <_printf_float+0x2dc>)
 800d286:	2301      	movs	r3, #1
 800d288:	4631      	mov	r1, r6
 800d28a:	4628      	mov	r0, r5
 800d28c:	47b8      	blx	r7
 800d28e:	3001      	adds	r0, #1
 800d290:	f43f af1d 	beq.w	800d0ce <_printf_float+0xb6>
 800d294:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d298:	ea59 0303 	orrs.w	r3, r9, r3
 800d29c:	d102      	bne.n	800d2a4 <_printf_float+0x28c>
 800d29e:	6823      	ldr	r3, [r4, #0]
 800d2a0:	07d9      	lsls	r1, r3, #31
 800d2a2:	d5d7      	bpl.n	800d254 <_printf_float+0x23c>
 800d2a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2a8:	4631      	mov	r1, r6
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	47b8      	blx	r7
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	f43f af0d 	beq.w	800d0ce <_printf_float+0xb6>
 800d2b4:	f04f 0a00 	mov.w	sl, #0
 800d2b8:	f104 0b1a 	add.w	fp, r4, #26
 800d2bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2be:	425b      	negs	r3, r3
 800d2c0:	4553      	cmp	r3, sl
 800d2c2:	dc01      	bgt.n	800d2c8 <_printf_float+0x2b0>
 800d2c4:	464b      	mov	r3, r9
 800d2c6:	e793      	b.n	800d1f0 <_printf_float+0x1d8>
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	465a      	mov	r2, fp
 800d2cc:	4631      	mov	r1, r6
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	47b8      	blx	r7
 800d2d2:	3001      	adds	r0, #1
 800d2d4:	f43f aefb 	beq.w	800d0ce <_printf_float+0xb6>
 800d2d8:	f10a 0a01 	add.w	sl, sl, #1
 800d2dc:	e7ee      	b.n	800d2bc <_printf_float+0x2a4>
 800d2de:	bf00      	nop
 800d2e0:	7fefffff 	.word	0x7fefffff
 800d2e4:	08012bd0 	.word	0x08012bd0
 800d2e8:	08012bd4 	.word	0x08012bd4
 800d2ec:	08012bd8 	.word	0x08012bd8
 800d2f0:	08012bdc 	.word	0x08012bdc
 800d2f4:	08012be0 	.word	0x08012be0
 800d2f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d2fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d2fe:	4553      	cmp	r3, sl
 800d300:	bfa8      	it	ge
 800d302:	4653      	movge	r3, sl
 800d304:	2b00      	cmp	r3, #0
 800d306:	4699      	mov	r9, r3
 800d308:	dc36      	bgt.n	800d378 <_printf_float+0x360>
 800d30a:	f04f 0b00 	mov.w	fp, #0
 800d30e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d312:	f104 021a 	add.w	r2, r4, #26
 800d316:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d318:	9306      	str	r3, [sp, #24]
 800d31a:	eba3 0309 	sub.w	r3, r3, r9
 800d31e:	455b      	cmp	r3, fp
 800d320:	dc31      	bgt.n	800d386 <_printf_float+0x36e>
 800d322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d324:	459a      	cmp	sl, r3
 800d326:	dc3a      	bgt.n	800d39e <_printf_float+0x386>
 800d328:	6823      	ldr	r3, [r4, #0]
 800d32a:	07da      	lsls	r2, r3, #31
 800d32c:	d437      	bmi.n	800d39e <_printf_float+0x386>
 800d32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d330:	ebaa 0903 	sub.w	r9, sl, r3
 800d334:	9b06      	ldr	r3, [sp, #24]
 800d336:	ebaa 0303 	sub.w	r3, sl, r3
 800d33a:	4599      	cmp	r9, r3
 800d33c:	bfa8      	it	ge
 800d33e:	4699      	movge	r9, r3
 800d340:	f1b9 0f00 	cmp.w	r9, #0
 800d344:	dc33      	bgt.n	800d3ae <_printf_float+0x396>
 800d346:	f04f 0800 	mov.w	r8, #0
 800d34a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d34e:	f104 0b1a 	add.w	fp, r4, #26
 800d352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d354:	ebaa 0303 	sub.w	r3, sl, r3
 800d358:	eba3 0309 	sub.w	r3, r3, r9
 800d35c:	4543      	cmp	r3, r8
 800d35e:	f77f af79 	ble.w	800d254 <_printf_float+0x23c>
 800d362:	2301      	movs	r3, #1
 800d364:	465a      	mov	r2, fp
 800d366:	4631      	mov	r1, r6
 800d368:	4628      	mov	r0, r5
 800d36a:	47b8      	blx	r7
 800d36c:	3001      	adds	r0, #1
 800d36e:	f43f aeae 	beq.w	800d0ce <_printf_float+0xb6>
 800d372:	f108 0801 	add.w	r8, r8, #1
 800d376:	e7ec      	b.n	800d352 <_printf_float+0x33a>
 800d378:	4642      	mov	r2, r8
 800d37a:	4631      	mov	r1, r6
 800d37c:	4628      	mov	r0, r5
 800d37e:	47b8      	blx	r7
 800d380:	3001      	adds	r0, #1
 800d382:	d1c2      	bne.n	800d30a <_printf_float+0x2f2>
 800d384:	e6a3      	b.n	800d0ce <_printf_float+0xb6>
 800d386:	2301      	movs	r3, #1
 800d388:	4631      	mov	r1, r6
 800d38a:	4628      	mov	r0, r5
 800d38c:	9206      	str	r2, [sp, #24]
 800d38e:	47b8      	blx	r7
 800d390:	3001      	adds	r0, #1
 800d392:	f43f ae9c 	beq.w	800d0ce <_printf_float+0xb6>
 800d396:	9a06      	ldr	r2, [sp, #24]
 800d398:	f10b 0b01 	add.w	fp, fp, #1
 800d39c:	e7bb      	b.n	800d316 <_printf_float+0x2fe>
 800d39e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3a2:	4631      	mov	r1, r6
 800d3a4:	4628      	mov	r0, r5
 800d3a6:	47b8      	blx	r7
 800d3a8:	3001      	adds	r0, #1
 800d3aa:	d1c0      	bne.n	800d32e <_printf_float+0x316>
 800d3ac:	e68f      	b.n	800d0ce <_printf_float+0xb6>
 800d3ae:	9a06      	ldr	r2, [sp, #24]
 800d3b0:	464b      	mov	r3, r9
 800d3b2:	4442      	add	r2, r8
 800d3b4:	4631      	mov	r1, r6
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	47b8      	blx	r7
 800d3ba:	3001      	adds	r0, #1
 800d3bc:	d1c3      	bne.n	800d346 <_printf_float+0x32e>
 800d3be:	e686      	b.n	800d0ce <_printf_float+0xb6>
 800d3c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d3c4:	f1ba 0f01 	cmp.w	sl, #1
 800d3c8:	dc01      	bgt.n	800d3ce <_printf_float+0x3b6>
 800d3ca:	07db      	lsls	r3, r3, #31
 800d3cc:	d536      	bpl.n	800d43c <_printf_float+0x424>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	4642      	mov	r2, r8
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	47b8      	blx	r7
 800d3d8:	3001      	adds	r0, #1
 800d3da:	f43f ae78 	beq.w	800d0ce <_printf_float+0xb6>
 800d3de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	47b8      	blx	r7
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	f43f ae70 	beq.w	800d0ce <_printf_float+0xb6>
 800d3ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3fa:	f7f3 fb65 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3fe:	b9c0      	cbnz	r0, 800d432 <_printf_float+0x41a>
 800d400:	4653      	mov	r3, sl
 800d402:	f108 0201 	add.w	r2, r8, #1
 800d406:	4631      	mov	r1, r6
 800d408:	4628      	mov	r0, r5
 800d40a:	47b8      	blx	r7
 800d40c:	3001      	adds	r0, #1
 800d40e:	d10c      	bne.n	800d42a <_printf_float+0x412>
 800d410:	e65d      	b.n	800d0ce <_printf_float+0xb6>
 800d412:	2301      	movs	r3, #1
 800d414:	465a      	mov	r2, fp
 800d416:	4631      	mov	r1, r6
 800d418:	4628      	mov	r0, r5
 800d41a:	47b8      	blx	r7
 800d41c:	3001      	adds	r0, #1
 800d41e:	f43f ae56 	beq.w	800d0ce <_printf_float+0xb6>
 800d422:	f108 0801 	add.w	r8, r8, #1
 800d426:	45d0      	cmp	r8, sl
 800d428:	dbf3      	blt.n	800d412 <_printf_float+0x3fa>
 800d42a:	464b      	mov	r3, r9
 800d42c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d430:	e6df      	b.n	800d1f2 <_printf_float+0x1da>
 800d432:	f04f 0800 	mov.w	r8, #0
 800d436:	f104 0b1a 	add.w	fp, r4, #26
 800d43a:	e7f4      	b.n	800d426 <_printf_float+0x40e>
 800d43c:	2301      	movs	r3, #1
 800d43e:	4642      	mov	r2, r8
 800d440:	e7e1      	b.n	800d406 <_printf_float+0x3ee>
 800d442:	2301      	movs	r3, #1
 800d444:	464a      	mov	r2, r9
 800d446:	4631      	mov	r1, r6
 800d448:	4628      	mov	r0, r5
 800d44a:	47b8      	blx	r7
 800d44c:	3001      	adds	r0, #1
 800d44e:	f43f ae3e 	beq.w	800d0ce <_printf_float+0xb6>
 800d452:	f108 0801 	add.w	r8, r8, #1
 800d456:	68e3      	ldr	r3, [r4, #12]
 800d458:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d45a:	1a5b      	subs	r3, r3, r1
 800d45c:	4543      	cmp	r3, r8
 800d45e:	dcf0      	bgt.n	800d442 <_printf_float+0x42a>
 800d460:	e6fc      	b.n	800d25c <_printf_float+0x244>
 800d462:	f04f 0800 	mov.w	r8, #0
 800d466:	f104 0919 	add.w	r9, r4, #25
 800d46a:	e7f4      	b.n	800d456 <_printf_float+0x43e>

0800d46c <_printf_common>:
 800d46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d470:	4616      	mov	r6, r2
 800d472:	4698      	mov	r8, r3
 800d474:	688a      	ldr	r2, [r1, #8]
 800d476:	690b      	ldr	r3, [r1, #16]
 800d478:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d47c:	4293      	cmp	r3, r2
 800d47e:	bfb8      	it	lt
 800d480:	4613      	movlt	r3, r2
 800d482:	6033      	str	r3, [r6, #0]
 800d484:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d488:	4607      	mov	r7, r0
 800d48a:	460c      	mov	r4, r1
 800d48c:	b10a      	cbz	r2, 800d492 <_printf_common+0x26>
 800d48e:	3301      	adds	r3, #1
 800d490:	6033      	str	r3, [r6, #0]
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	0699      	lsls	r1, r3, #26
 800d496:	bf42      	ittt	mi
 800d498:	6833      	ldrmi	r3, [r6, #0]
 800d49a:	3302      	addmi	r3, #2
 800d49c:	6033      	strmi	r3, [r6, #0]
 800d49e:	6825      	ldr	r5, [r4, #0]
 800d4a0:	f015 0506 	ands.w	r5, r5, #6
 800d4a4:	d106      	bne.n	800d4b4 <_printf_common+0x48>
 800d4a6:	f104 0a19 	add.w	sl, r4, #25
 800d4aa:	68e3      	ldr	r3, [r4, #12]
 800d4ac:	6832      	ldr	r2, [r6, #0]
 800d4ae:	1a9b      	subs	r3, r3, r2
 800d4b0:	42ab      	cmp	r3, r5
 800d4b2:	dc26      	bgt.n	800d502 <_printf_common+0x96>
 800d4b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4b8:	6822      	ldr	r2, [r4, #0]
 800d4ba:	3b00      	subs	r3, #0
 800d4bc:	bf18      	it	ne
 800d4be:	2301      	movne	r3, #1
 800d4c0:	0692      	lsls	r2, r2, #26
 800d4c2:	d42b      	bmi.n	800d51c <_printf_common+0xb0>
 800d4c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4c8:	4641      	mov	r1, r8
 800d4ca:	4638      	mov	r0, r7
 800d4cc:	47c8      	blx	r9
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	d01e      	beq.n	800d510 <_printf_common+0xa4>
 800d4d2:	6823      	ldr	r3, [r4, #0]
 800d4d4:	6922      	ldr	r2, [r4, #16]
 800d4d6:	f003 0306 	and.w	r3, r3, #6
 800d4da:	2b04      	cmp	r3, #4
 800d4dc:	bf02      	ittt	eq
 800d4de:	68e5      	ldreq	r5, [r4, #12]
 800d4e0:	6833      	ldreq	r3, [r6, #0]
 800d4e2:	1aed      	subeq	r5, r5, r3
 800d4e4:	68a3      	ldr	r3, [r4, #8]
 800d4e6:	bf0c      	ite	eq
 800d4e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4ec:	2500      	movne	r5, #0
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	bfc4      	itt	gt
 800d4f2:	1a9b      	subgt	r3, r3, r2
 800d4f4:	18ed      	addgt	r5, r5, r3
 800d4f6:	2600      	movs	r6, #0
 800d4f8:	341a      	adds	r4, #26
 800d4fa:	42b5      	cmp	r5, r6
 800d4fc:	d11a      	bne.n	800d534 <_printf_common+0xc8>
 800d4fe:	2000      	movs	r0, #0
 800d500:	e008      	b.n	800d514 <_printf_common+0xa8>
 800d502:	2301      	movs	r3, #1
 800d504:	4652      	mov	r2, sl
 800d506:	4641      	mov	r1, r8
 800d508:	4638      	mov	r0, r7
 800d50a:	47c8      	blx	r9
 800d50c:	3001      	adds	r0, #1
 800d50e:	d103      	bne.n	800d518 <_printf_common+0xac>
 800d510:	f04f 30ff 	mov.w	r0, #4294967295
 800d514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d518:	3501      	adds	r5, #1
 800d51a:	e7c6      	b.n	800d4aa <_printf_common+0x3e>
 800d51c:	18e1      	adds	r1, r4, r3
 800d51e:	1c5a      	adds	r2, r3, #1
 800d520:	2030      	movs	r0, #48	@ 0x30
 800d522:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d526:	4422      	add	r2, r4
 800d528:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d52c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d530:	3302      	adds	r3, #2
 800d532:	e7c7      	b.n	800d4c4 <_printf_common+0x58>
 800d534:	2301      	movs	r3, #1
 800d536:	4622      	mov	r2, r4
 800d538:	4641      	mov	r1, r8
 800d53a:	4638      	mov	r0, r7
 800d53c:	47c8      	blx	r9
 800d53e:	3001      	adds	r0, #1
 800d540:	d0e6      	beq.n	800d510 <_printf_common+0xa4>
 800d542:	3601      	adds	r6, #1
 800d544:	e7d9      	b.n	800d4fa <_printf_common+0x8e>
	...

0800d548 <_printf_i>:
 800d548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d54c:	7e0f      	ldrb	r7, [r1, #24]
 800d54e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d550:	2f78      	cmp	r7, #120	@ 0x78
 800d552:	4691      	mov	r9, r2
 800d554:	4680      	mov	r8, r0
 800d556:	460c      	mov	r4, r1
 800d558:	469a      	mov	sl, r3
 800d55a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d55e:	d807      	bhi.n	800d570 <_printf_i+0x28>
 800d560:	2f62      	cmp	r7, #98	@ 0x62
 800d562:	d80a      	bhi.n	800d57a <_printf_i+0x32>
 800d564:	2f00      	cmp	r7, #0
 800d566:	f000 80d2 	beq.w	800d70e <_printf_i+0x1c6>
 800d56a:	2f58      	cmp	r7, #88	@ 0x58
 800d56c:	f000 80b9 	beq.w	800d6e2 <_printf_i+0x19a>
 800d570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d574:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d578:	e03a      	b.n	800d5f0 <_printf_i+0xa8>
 800d57a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d57e:	2b15      	cmp	r3, #21
 800d580:	d8f6      	bhi.n	800d570 <_printf_i+0x28>
 800d582:	a101      	add	r1, pc, #4	@ (adr r1, 800d588 <_printf_i+0x40>)
 800d584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d588:	0800d5e1 	.word	0x0800d5e1
 800d58c:	0800d5f5 	.word	0x0800d5f5
 800d590:	0800d571 	.word	0x0800d571
 800d594:	0800d571 	.word	0x0800d571
 800d598:	0800d571 	.word	0x0800d571
 800d59c:	0800d571 	.word	0x0800d571
 800d5a0:	0800d5f5 	.word	0x0800d5f5
 800d5a4:	0800d571 	.word	0x0800d571
 800d5a8:	0800d571 	.word	0x0800d571
 800d5ac:	0800d571 	.word	0x0800d571
 800d5b0:	0800d571 	.word	0x0800d571
 800d5b4:	0800d6f5 	.word	0x0800d6f5
 800d5b8:	0800d61f 	.word	0x0800d61f
 800d5bc:	0800d6af 	.word	0x0800d6af
 800d5c0:	0800d571 	.word	0x0800d571
 800d5c4:	0800d571 	.word	0x0800d571
 800d5c8:	0800d717 	.word	0x0800d717
 800d5cc:	0800d571 	.word	0x0800d571
 800d5d0:	0800d61f 	.word	0x0800d61f
 800d5d4:	0800d571 	.word	0x0800d571
 800d5d8:	0800d571 	.word	0x0800d571
 800d5dc:	0800d6b7 	.word	0x0800d6b7
 800d5e0:	6833      	ldr	r3, [r6, #0]
 800d5e2:	1d1a      	adds	r2, r3, #4
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	6032      	str	r2, [r6, #0]
 800d5e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e09d      	b.n	800d730 <_printf_i+0x1e8>
 800d5f4:	6833      	ldr	r3, [r6, #0]
 800d5f6:	6820      	ldr	r0, [r4, #0]
 800d5f8:	1d19      	adds	r1, r3, #4
 800d5fa:	6031      	str	r1, [r6, #0]
 800d5fc:	0606      	lsls	r6, r0, #24
 800d5fe:	d501      	bpl.n	800d604 <_printf_i+0xbc>
 800d600:	681d      	ldr	r5, [r3, #0]
 800d602:	e003      	b.n	800d60c <_printf_i+0xc4>
 800d604:	0645      	lsls	r5, r0, #25
 800d606:	d5fb      	bpl.n	800d600 <_printf_i+0xb8>
 800d608:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d60c:	2d00      	cmp	r5, #0
 800d60e:	da03      	bge.n	800d618 <_printf_i+0xd0>
 800d610:	232d      	movs	r3, #45	@ 0x2d
 800d612:	426d      	negs	r5, r5
 800d614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d618:	4859      	ldr	r0, [pc, #356]	@ (800d780 <_printf_i+0x238>)
 800d61a:	230a      	movs	r3, #10
 800d61c:	e011      	b.n	800d642 <_printf_i+0xfa>
 800d61e:	6821      	ldr	r1, [r4, #0]
 800d620:	6833      	ldr	r3, [r6, #0]
 800d622:	0608      	lsls	r0, r1, #24
 800d624:	f853 5b04 	ldr.w	r5, [r3], #4
 800d628:	d402      	bmi.n	800d630 <_printf_i+0xe8>
 800d62a:	0649      	lsls	r1, r1, #25
 800d62c:	bf48      	it	mi
 800d62e:	b2ad      	uxthmi	r5, r5
 800d630:	2f6f      	cmp	r7, #111	@ 0x6f
 800d632:	4853      	ldr	r0, [pc, #332]	@ (800d780 <_printf_i+0x238>)
 800d634:	6033      	str	r3, [r6, #0]
 800d636:	bf14      	ite	ne
 800d638:	230a      	movne	r3, #10
 800d63a:	2308      	moveq	r3, #8
 800d63c:	2100      	movs	r1, #0
 800d63e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d642:	6866      	ldr	r6, [r4, #4]
 800d644:	60a6      	str	r6, [r4, #8]
 800d646:	2e00      	cmp	r6, #0
 800d648:	bfa2      	ittt	ge
 800d64a:	6821      	ldrge	r1, [r4, #0]
 800d64c:	f021 0104 	bicge.w	r1, r1, #4
 800d650:	6021      	strge	r1, [r4, #0]
 800d652:	b90d      	cbnz	r5, 800d658 <_printf_i+0x110>
 800d654:	2e00      	cmp	r6, #0
 800d656:	d04b      	beq.n	800d6f0 <_printf_i+0x1a8>
 800d658:	4616      	mov	r6, r2
 800d65a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d65e:	fb03 5711 	mls	r7, r3, r1, r5
 800d662:	5dc7      	ldrb	r7, [r0, r7]
 800d664:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d668:	462f      	mov	r7, r5
 800d66a:	42bb      	cmp	r3, r7
 800d66c:	460d      	mov	r5, r1
 800d66e:	d9f4      	bls.n	800d65a <_printf_i+0x112>
 800d670:	2b08      	cmp	r3, #8
 800d672:	d10b      	bne.n	800d68c <_printf_i+0x144>
 800d674:	6823      	ldr	r3, [r4, #0]
 800d676:	07df      	lsls	r7, r3, #31
 800d678:	d508      	bpl.n	800d68c <_printf_i+0x144>
 800d67a:	6923      	ldr	r3, [r4, #16]
 800d67c:	6861      	ldr	r1, [r4, #4]
 800d67e:	4299      	cmp	r1, r3
 800d680:	bfde      	ittt	le
 800d682:	2330      	movle	r3, #48	@ 0x30
 800d684:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d688:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d68c:	1b92      	subs	r2, r2, r6
 800d68e:	6122      	str	r2, [r4, #16]
 800d690:	f8cd a000 	str.w	sl, [sp]
 800d694:	464b      	mov	r3, r9
 800d696:	aa03      	add	r2, sp, #12
 800d698:	4621      	mov	r1, r4
 800d69a:	4640      	mov	r0, r8
 800d69c:	f7ff fee6 	bl	800d46c <_printf_common>
 800d6a0:	3001      	adds	r0, #1
 800d6a2:	d14a      	bne.n	800d73a <_printf_i+0x1f2>
 800d6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a8:	b004      	add	sp, #16
 800d6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ae:	6823      	ldr	r3, [r4, #0]
 800d6b0:	f043 0320 	orr.w	r3, r3, #32
 800d6b4:	6023      	str	r3, [r4, #0]
 800d6b6:	4833      	ldr	r0, [pc, #204]	@ (800d784 <_printf_i+0x23c>)
 800d6b8:	2778      	movs	r7, #120	@ 0x78
 800d6ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6be:	6823      	ldr	r3, [r4, #0]
 800d6c0:	6831      	ldr	r1, [r6, #0]
 800d6c2:	061f      	lsls	r7, r3, #24
 800d6c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800d6c8:	d402      	bmi.n	800d6d0 <_printf_i+0x188>
 800d6ca:	065f      	lsls	r7, r3, #25
 800d6cc:	bf48      	it	mi
 800d6ce:	b2ad      	uxthmi	r5, r5
 800d6d0:	6031      	str	r1, [r6, #0]
 800d6d2:	07d9      	lsls	r1, r3, #31
 800d6d4:	bf44      	itt	mi
 800d6d6:	f043 0320 	orrmi.w	r3, r3, #32
 800d6da:	6023      	strmi	r3, [r4, #0]
 800d6dc:	b11d      	cbz	r5, 800d6e6 <_printf_i+0x19e>
 800d6de:	2310      	movs	r3, #16
 800d6e0:	e7ac      	b.n	800d63c <_printf_i+0xf4>
 800d6e2:	4827      	ldr	r0, [pc, #156]	@ (800d780 <_printf_i+0x238>)
 800d6e4:	e7e9      	b.n	800d6ba <_printf_i+0x172>
 800d6e6:	6823      	ldr	r3, [r4, #0]
 800d6e8:	f023 0320 	bic.w	r3, r3, #32
 800d6ec:	6023      	str	r3, [r4, #0]
 800d6ee:	e7f6      	b.n	800d6de <_printf_i+0x196>
 800d6f0:	4616      	mov	r6, r2
 800d6f2:	e7bd      	b.n	800d670 <_printf_i+0x128>
 800d6f4:	6833      	ldr	r3, [r6, #0]
 800d6f6:	6825      	ldr	r5, [r4, #0]
 800d6f8:	6961      	ldr	r1, [r4, #20]
 800d6fa:	1d18      	adds	r0, r3, #4
 800d6fc:	6030      	str	r0, [r6, #0]
 800d6fe:	062e      	lsls	r6, r5, #24
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	d501      	bpl.n	800d708 <_printf_i+0x1c0>
 800d704:	6019      	str	r1, [r3, #0]
 800d706:	e002      	b.n	800d70e <_printf_i+0x1c6>
 800d708:	0668      	lsls	r0, r5, #25
 800d70a:	d5fb      	bpl.n	800d704 <_printf_i+0x1bc>
 800d70c:	8019      	strh	r1, [r3, #0]
 800d70e:	2300      	movs	r3, #0
 800d710:	6123      	str	r3, [r4, #16]
 800d712:	4616      	mov	r6, r2
 800d714:	e7bc      	b.n	800d690 <_printf_i+0x148>
 800d716:	6833      	ldr	r3, [r6, #0]
 800d718:	1d1a      	adds	r2, r3, #4
 800d71a:	6032      	str	r2, [r6, #0]
 800d71c:	681e      	ldr	r6, [r3, #0]
 800d71e:	6862      	ldr	r2, [r4, #4]
 800d720:	2100      	movs	r1, #0
 800d722:	4630      	mov	r0, r6
 800d724:	f7f2 fd54 	bl	80001d0 <memchr>
 800d728:	b108      	cbz	r0, 800d72e <_printf_i+0x1e6>
 800d72a:	1b80      	subs	r0, r0, r6
 800d72c:	6060      	str	r0, [r4, #4]
 800d72e:	6863      	ldr	r3, [r4, #4]
 800d730:	6123      	str	r3, [r4, #16]
 800d732:	2300      	movs	r3, #0
 800d734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d738:	e7aa      	b.n	800d690 <_printf_i+0x148>
 800d73a:	6923      	ldr	r3, [r4, #16]
 800d73c:	4632      	mov	r2, r6
 800d73e:	4649      	mov	r1, r9
 800d740:	4640      	mov	r0, r8
 800d742:	47d0      	blx	sl
 800d744:	3001      	adds	r0, #1
 800d746:	d0ad      	beq.n	800d6a4 <_printf_i+0x15c>
 800d748:	6823      	ldr	r3, [r4, #0]
 800d74a:	079b      	lsls	r3, r3, #30
 800d74c:	d413      	bmi.n	800d776 <_printf_i+0x22e>
 800d74e:	68e0      	ldr	r0, [r4, #12]
 800d750:	9b03      	ldr	r3, [sp, #12]
 800d752:	4298      	cmp	r0, r3
 800d754:	bfb8      	it	lt
 800d756:	4618      	movlt	r0, r3
 800d758:	e7a6      	b.n	800d6a8 <_printf_i+0x160>
 800d75a:	2301      	movs	r3, #1
 800d75c:	4632      	mov	r2, r6
 800d75e:	4649      	mov	r1, r9
 800d760:	4640      	mov	r0, r8
 800d762:	47d0      	blx	sl
 800d764:	3001      	adds	r0, #1
 800d766:	d09d      	beq.n	800d6a4 <_printf_i+0x15c>
 800d768:	3501      	adds	r5, #1
 800d76a:	68e3      	ldr	r3, [r4, #12]
 800d76c:	9903      	ldr	r1, [sp, #12]
 800d76e:	1a5b      	subs	r3, r3, r1
 800d770:	42ab      	cmp	r3, r5
 800d772:	dcf2      	bgt.n	800d75a <_printf_i+0x212>
 800d774:	e7eb      	b.n	800d74e <_printf_i+0x206>
 800d776:	2500      	movs	r5, #0
 800d778:	f104 0619 	add.w	r6, r4, #25
 800d77c:	e7f5      	b.n	800d76a <_printf_i+0x222>
 800d77e:	bf00      	nop
 800d780:	08012be2 	.word	0x08012be2
 800d784:	08012bf3 	.word	0x08012bf3

0800d788 <_scanf_float>:
 800d788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d78c:	b087      	sub	sp, #28
 800d78e:	4617      	mov	r7, r2
 800d790:	9303      	str	r3, [sp, #12]
 800d792:	688b      	ldr	r3, [r1, #8]
 800d794:	1e5a      	subs	r2, r3, #1
 800d796:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d79a:	bf81      	itttt	hi
 800d79c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d7a0:	eb03 0b05 	addhi.w	fp, r3, r5
 800d7a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d7a8:	608b      	strhi	r3, [r1, #8]
 800d7aa:	680b      	ldr	r3, [r1, #0]
 800d7ac:	460a      	mov	r2, r1
 800d7ae:	f04f 0500 	mov.w	r5, #0
 800d7b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d7b6:	f842 3b1c 	str.w	r3, [r2], #28
 800d7ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d7be:	4680      	mov	r8, r0
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	bf98      	it	ls
 800d7c4:	f04f 0b00 	movls.w	fp, #0
 800d7c8:	9201      	str	r2, [sp, #4]
 800d7ca:	4616      	mov	r6, r2
 800d7cc:	46aa      	mov	sl, r5
 800d7ce:	46a9      	mov	r9, r5
 800d7d0:	9502      	str	r5, [sp, #8]
 800d7d2:	68a2      	ldr	r2, [r4, #8]
 800d7d4:	b152      	cbz	r2, 800d7ec <_scanf_float+0x64>
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	2b4e      	cmp	r3, #78	@ 0x4e
 800d7dc:	d864      	bhi.n	800d8a8 <_scanf_float+0x120>
 800d7de:	2b40      	cmp	r3, #64	@ 0x40
 800d7e0:	d83c      	bhi.n	800d85c <_scanf_float+0xd4>
 800d7e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d7e6:	b2c8      	uxtb	r0, r1
 800d7e8:	280e      	cmp	r0, #14
 800d7ea:	d93a      	bls.n	800d862 <_scanf_float+0xda>
 800d7ec:	f1b9 0f00 	cmp.w	r9, #0
 800d7f0:	d003      	beq.n	800d7fa <_scanf_float+0x72>
 800d7f2:	6823      	ldr	r3, [r4, #0]
 800d7f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d7f8:	6023      	str	r3, [r4, #0]
 800d7fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d7fe:	f1ba 0f01 	cmp.w	sl, #1
 800d802:	f200 8117 	bhi.w	800da34 <_scanf_float+0x2ac>
 800d806:	9b01      	ldr	r3, [sp, #4]
 800d808:	429e      	cmp	r6, r3
 800d80a:	f200 8108 	bhi.w	800da1e <_scanf_float+0x296>
 800d80e:	2001      	movs	r0, #1
 800d810:	b007      	add	sp, #28
 800d812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d816:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d81a:	2a0d      	cmp	r2, #13
 800d81c:	d8e6      	bhi.n	800d7ec <_scanf_float+0x64>
 800d81e:	a101      	add	r1, pc, #4	@ (adr r1, 800d824 <_scanf_float+0x9c>)
 800d820:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d824:	0800d96b 	.word	0x0800d96b
 800d828:	0800d7ed 	.word	0x0800d7ed
 800d82c:	0800d7ed 	.word	0x0800d7ed
 800d830:	0800d7ed 	.word	0x0800d7ed
 800d834:	0800d9cb 	.word	0x0800d9cb
 800d838:	0800d9a3 	.word	0x0800d9a3
 800d83c:	0800d7ed 	.word	0x0800d7ed
 800d840:	0800d7ed 	.word	0x0800d7ed
 800d844:	0800d979 	.word	0x0800d979
 800d848:	0800d7ed 	.word	0x0800d7ed
 800d84c:	0800d7ed 	.word	0x0800d7ed
 800d850:	0800d7ed 	.word	0x0800d7ed
 800d854:	0800d7ed 	.word	0x0800d7ed
 800d858:	0800d931 	.word	0x0800d931
 800d85c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d860:	e7db      	b.n	800d81a <_scanf_float+0x92>
 800d862:	290e      	cmp	r1, #14
 800d864:	d8c2      	bhi.n	800d7ec <_scanf_float+0x64>
 800d866:	a001      	add	r0, pc, #4	@ (adr r0, 800d86c <_scanf_float+0xe4>)
 800d868:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d86c:	0800d921 	.word	0x0800d921
 800d870:	0800d7ed 	.word	0x0800d7ed
 800d874:	0800d921 	.word	0x0800d921
 800d878:	0800d9b7 	.word	0x0800d9b7
 800d87c:	0800d7ed 	.word	0x0800d7ed
 800d880:	0800d8c9 	.word	0x0800d8c9
 800d884:	0800d907 	.word	0x0800d907
 800d888:	0800d907 	.word	0x0800d907
 800d88c:	0800d907 	.word	0x0800d907
 800d890:	0800d907 	.word	0x0800d907
 800d894:	0800d907 	.word	0x0800d907
 800d898:	0800d907 	.word	0x0800d907
 800d89c:	0800d907 	.word	0x0800d907
 800d8a0:	0800d907 	.word	0x0800d907
 800d8a4:	0800d907 	.word	0x0800d907
 800d8a8:	2b6e      	cmp	r3, #110	@ 0x6e
 800d8aa:	d809      	bhi.n	800d8c0 <_scanf_float+0x138>
 800d8ac:	2b60      	cmp	r3, #96	@ 0x60
 800d8ae:	d8b2      	bhi.n	800d816 <_scanf_float+0x8e>
 800d8b0:	2b54      	cmp	r3, #84	@ 0x54
 800d8b2:	d07b      	beq.n	800d9ac <_scanf_float+0x224>
 800d8b4:	2b59      	cmp	r3, #89	@ 0x59
 800d8b6:	d199      	bne.n	800d7ec <_scanf_float+0x64>
 800d8b8:	2d07      	cmp	r5, #7
 800d8ba:	d197      	bne.n	800d7ec <_scanf_float+0x64>
 800d8bc:	2508      	movs	r5, #8
 800d8be:	e02c      	b.n	800d91a <_scanf_float+0x192>
 800d8c0:	2b74      	cmp	r3, #116	@ 0x74
 800d8c2:	d073      	beq.n	800d9ac <_scanf_float+0x224>
 800d8c4:	2b79      	cmp	r3, #121	@ 0x79
 800d8c6:	e7f6      	b.n	800d8b6 <_scanf_float+0x12e>
 800d8c8:	6821      	ldr	r1, [r4, #0]
 800d8ca:	05c8      	lsls	r0, r1, #23
 800d8cc:	d51b      	bpl.n	800d906 <_scanf_float+0x17e>
 800d8ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d8d2:	6021      	str	r1, [r4, #0]
 800d8d4:	f109 0901 	add.w	r9, r9, #1
 800d8d8:	f1bb 0f00 	cmp.w	fp, #0
 800d8dc:	d003      	beq.n	800d8e6 <_scanf_float+0x15e>
 800d8de:	3201      	adds	r2, #1
 800d8e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d8e4:	60a2      	str	r2, [r4, #8]
 800d8e6:	68a3      	ldr	r3, [r4, #8]
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	60a3      	str	r3, [r4, #8]
 800d8ec:	6923      	ldr	r3, [r4, #16]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	6123      	str	r3, [r4, #16]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	607b      	str	r3, [r7, #4]
 800d8fa:	f340 8087 	ble.w	800da0c <_scanf_float+0x284>
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	3301      	adds	r3, #1
 800d902:	603b      	str	r3, [r7, #0]
 800d904:	e765      	b.n	800d7d2 <_scanf_float+0x4a>
 800d906:	eb1a 0105 	adds.w	r1, sl, r5
 800d90a:	f47f af6f 	bne.w	800d7ec <_scanf_float+0x64>
 800d90e:	6822      	ldr	r2, [r4, #0]
 800d910:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d914:	6022      	str	r2, [r4, #0]
 800d916:	460d      	mov	r5, r1
 800d918:	468a      	mov	sl, r1
 800d91a:	f806 3b01 	strb.w	r3, [r6], #1
 800d91e:	e7e2      	b.n	800d8e6 <_scanf_float+0x15e>
 800d920:	6822      	ldr	r2, [r4, #0]
 800d922:	0610      	lsls	r0, r2, #24
 800d924:	f57f af62 	bpl.w	800d7ec <_scanf_float+0x64>
 800d928:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d92c:	6022      	str	r2, [r4, #0]
 800d92e:	e7f4      	b.n	800d91a <_scanf_float+0x192>
 800d930:	f1ba 0f00 	cmp.w	sl, #0
 800d934:	d10e      	bne.n	800d954 <_scanf_float+0x1cc>
 800d936:	f1b9 0f00 	cmp.w	r9, #0
 800d93a:	d10e      	bne.n	800d95a <_scanf_float+0x1d2>
 800d93c:	6822      	ldr	r2, [r4, #0]
 800d93e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d942:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d946:	d108      	bne.n	800d95a <_scanf_float+0x1d2>
 800d948:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d94c:	6022      	str	r2, [r4, #0]
 800d94e:	f04f 0a01 	mov.w	sl, #1
 800d952:	e7e2      	b.n	800d91a <_scanf_float+0x192>
 800d954:	f1ba 0f02 	cmp.w	sl, #2
 800d958:	d055      	beq.n	800da06 <_scanf_float+0x27e>
 800d95a:	2d01      	cmp	r5, #1
 800d95c:	d002      	beq.n	800d964 <_scanf_float+0x1dc>
 800d95e:	2d04      	cmp	r5, #4
 800d960:	f47f af44 	bne.w	800d7ec <_scanf_float+0x64>
 800d964:	3501      	adds	r5, #1
 800d966:	b2ed      	uxtb	r5, r5
 800d968:	e7d7      	b.n	800d91a <_scanf_float+0x192>
 800d96a:	f1ba 0f01 	cmp.w	sl, #1
 800d96e:	f47f af3d 	bne.w	800d7ec <_scanf_float+0x64>
 800d972:	f04f 0a02 	mov.w	sl, #2
 800d976:	e7d0      	b.n	800d91a <_scanf_float+0x192>
 800d978:	b97d      	cbnz	r5, 800d99a <_scanf_float+0x212>
 800d97a:	f1b9 0f00 	cmp.w	r9, #0
 800d97e:	f47f af38 	bne.w	800d7f2 <_scanf_float+0x6a>
 800d982:	6822      	ldr	r2, [r4, #0]
 800d984:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d988:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d98c:	f040 8108 	bne.w	800dba0 <_scanf_float+0x418>
 800d990:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d994:	6022      	str	r2, [r4, #0]
 800d996:	2501      	movs	r5, #1
 800d998:	e7bf      	b.n	800d91a <_scanf_float+0x192>
 800d99a:	2d03      	cmp	r5, #3
 800d99c:	d0e2      	beq.n	800d964 <_scanf_float+0x1dc>
 800d99e:	2d05      	cmp	r5, #5
 800d9a0:	e7de      	b.n	800d960 <_scanf_float+0x1d8>
 800d9a2:	2d02      	cmp	r5, #2
 800d9a4:	f47f af22 	bne.w	800d7ec <_scanf_float+0x64>
 800d9a8:	2503      	movs	r5, #3
 800d9aa:	e7b6      	b.n	800d91a <_scanf_float+0x192>
 800d9ac:	2d06      	cmp	r5, #6
 800d9ae:	f47f af1d 	bne.w	800d7ec <_scanf_float+0x64>
 800d9b2:	2507      	movs	r5, #7
 800d9b4:	e7b1      	b.n	800d91a <_scanf_float+0x192>
 800d9b6:	6822      	ldr	r2, [r4, #0]
 800d9b8:	0591      	lsls	r1, r2, #22
 800d9ba:	f57f af17 	bpl.w	800d7ec <_scanf_float+0x64>
 800d9be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d9c2:	6022      	str	r2, [r4, #0]
 800d9c4:	f8cd 9008 	str.w	r9, [sp, #8]
 800d9c8:	e7a7      	b.n	800d91a <_scanf_float+0x192>
 800d9ca:	6822      	ldr	r2, [r4, #0]
 800d9cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d9d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d9d4:	d006      	beq.n	800d9e4 <_scanf_float+0x25c>
 800d9d6:	0550      	lsls	r0, r2, #21
 800d9d8:	f57f af08 	bpl.w	800d7ec <_scanf_float+0x64>
 800d9dc:	f1b9 0f00 	cmp.w	r9, #0
 800d9e0:	f000 80de 	beq.w	800dba0 <_scanf_float+0x418>
 800d9e4:	0591      	lsls	r1, r2, #22
 800d9e6:	bf58      	it	pl
 800d9e8:	9902      	ldrpl	r1, [sp, #8]
 800d9ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d9ee:	bf58      	it	pl
 800d9f0:	eba9 0101 	subpl.w	r1, r9, r1
 800d9f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d9f8:	bf58      	it	pl
 800d9fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d9fe:	6022      	str	r2, [r4, #0]
 800da00:	f04f 0900 	mov.w	r9, #0
 800da04:	e789      	b.n	800d91a <_scanf_float+0x192>
 800da06:	f04f 0a03 	mov.w	sl, #3
 800da0a:	e786      	b.n	800d91a <_scanf_float+0x192>
 800da0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800da10:	4639      	mov	r1, r7
 800da12:	4640      	mov	r0, r8
 800da14:	4798      	blx	r3
 800da16:	2800      	cmp	r0, #0
 800da18:	f43f aedb 	beq.w	800d7d2 <_scanf_float+0x4a>
 800da1c:	e6e6      	b.n	800d7ec <_scanf_float+0x64>
 800da1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da26:	463a      	mov	r2, r7
 800da28:	4640      	mov	r0, r8
 800da2a:	4798      	blx	r3
 800da2c:	6923      	ldr	r3, [r4, #16]
 800da2e:	3b01      	subs	r3, #1
 800da30:	6123      	str	r3, [r4, #16]
 800da32:	e6e8      	b.n	800d806 <_scanf_float+0x7e>
 800da34:	1e6b      	subs	r3, r5, #1
 800da36:	2b06      	cmp	r3, #6
 800da38:	d824      	bhi.n	800da84 <_scanf_float+0x2fc>
 800da3a:	2d02      	cmp	r5, #2
 800da3c:	d836      	bhi.n	800daac <_scanf_float+0x324>
 800da3e:	9b01      	ldr	r3, [sp, #4]
 800da40:	429e      	cmp	r6, r3
 800da42:	f67f aee4 	bls.w	800d80e <_scanf_float+0x86>
 800da46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da4e:	463a      	mov	r2, r7
 800da50:	4640      	mov	r0, r8
 800da52:	4798      	blx	r3
 800da54:	6923      	ldr	r3, [r4, #16]
 800da56:	3b01      	subs	r3, #1
 800da58:	6123      	str	r3, [r4, #16]
 800da5a:	e7f0      	b.n	800da3e <_scanf_float+0x2b6>
 800da5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da60:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800da64:	463a      	mov	r2, r7
 800da66:	4640      	mov	r0, r8
 800da68:	4798      	blx	r3
 800da6a:	6923      	ldr	r3, [r4, #16]
 800da6c:	3b01      	subs	r3, #1
 800da6e:	6123      	str	r3, [r4, #16]
 800da70:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da74:	fa5f fa8a 	uxtb.w	sl, sl
 800da78:	f1ba 0f02 	cmp.w	sl, #2
 800da7c:	d1ee      	bne.n	800da5c <_scanf_float+0x2d4>
 800da7e:	3d03      	subs	r5, #3
 800da80:	b2ed      	uxtb	r5, r5
 800da82:	1b76      	subs	r6, r6, r5
 800da84:	6823      	ldr	r3, [r4, #0]
 800da86:	05da      	lsls	r2, r3, #23
 800da88:	d530      	bpl.n	800daec <_scanf_float+0x364>
 800da8a:	055b      	lsls	r3, r3, #21
 800da8c:	d511      	bpl.n	800dab2 <_scanf_float+0x32a>
 800da8e:	9b01      	ldr	r3, [sp, #4]
 800da90:	429e      	cmp	r6, r3
 800da92:	f67f aebc 	bls.w	800d80e <_scanf_float+0x86>
 800da96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800da9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da9e:	463a      	mov	r2, r7
 800daa0:	4640      	mov	r0, r8
 800daa2:	4798      	blx	r3
 800daa4:	6923      	ldr	r3, [r4, #16]
 800daa6:	3b01      	subs	r3, #1
 800daa8:	6123      	str	r3, [r4, #16]
 800daaa:	e7f0      	b.n	800da8e <_scanf_float+0x306>
 800daac:	46aa      	mov	sl, r5
 800daae:	46b3      	mov	fp, r6
 800dab0:	e7de      	b.n	800da70 <_scanf_float+0x2e8>
 800dab2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dab6:	6923      	ldr	r3, [r4, #16]
 800dab8:	2965      	cmp	r1, #101	@ 0x65
 800daba:	f103 33ff 	add.w	r3, r3, #4294967295
 800dabe:	f106 35ff 	add.w	r5, r6, #4294967295
 800dac2:	6123      	str	r3, [r4, #16]
 800dac4:	d00c      	beq.n	800dae0 <_scanf_float+0x358>
 800dac6:	2945      	cmp	r1, #69	@ 0x45
 800dac8:	d00a      	beq.n	800dae0 <_scanf_float+0x358>
 800daca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dace:	463a      	mov	r2, r7
 800dad0:	4640      	mov	r0, r8
 800dad2:	4798      	blx	r3
 800dad4:	6923      	ldr	r3, [r4, #16]
 800dad6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dada:	3b01      	subs	r3, #1
 800dadc:	1eb5      	subs	r5, r6, #2
 800dade:	6123      	str	r3, [r4, #16]
 800dae0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dae4:	463a      	mov	r2, r7
 800dae6:	4640      	mov	r0, r8
 800dae8:	4798      	blx	r3
 800daea:	462e      	mov	r6, r5
 800daec:	6822      	ldr	r2, [r4, #0]
 800daee:	f012 0210 	ands.w	r2, r2, #16
 800daf2:	d001      	beq.n	800daf8 <_scanf_float+0x370>
 800daf4:	2000      	movs	r0, #0
 800daf6:	e68b      	b.n	800d810 <_scanf_float+0x88>
 800daf8:	7032      	strb	r2, [r6, #0]
 800dafa:	6823      	ldr	r3, [r4, #0]
 800dafc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800db00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db04:	d11c      	bne.n	800db40 <_scanf_float+0x3b8>
 800db06:	9b02      	ldr	r3, [sp, #8]
 800db08:	454b      	cmp	r3, r9
 800db0a:	eba3 0209 	sub.w	r2, r3, r9
 800db0e:	d123      	bne.n	800db58 <_scanf_float+0x3d0>
 800db10:	9901      	ldr	r1, [sp, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	4640      	mov	r0, r8
 800db16:	f002 fc3b 	bl	8010390 <_strtod_r>
 800db1a:	9b03      	ldr	r3, [sp, #12]
 800db1c:	6821      	ldr	r1, [r4, #0]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f011 0f02 	tst.w	r1, #2
 800db24:	ec57 6b10 	vmov	r6, r7, d0
 800db28:	f103 0204 	add.w	r2, r3, #4
 800db2c:	d01f      	beq.n	800db6e <_scanf_float+0x3e6>
 800db2e:	9903      	ldr	r1, [sp, #12]
 800db30:	600a      	str	r2, [r1, #0]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	e9c3 6700 	strd	r6, r7, [r3]
 800db38:	68e3      	ldr	r3, [r4, #12]
 800db3a:	3301      	adds	r3, #1
 800db3c:	60e3      	str	r3, [r4, #12]
 800db3e:	e7d9      	b.n	800daf4 <_scanf_float+0x36c>
 800db40:	9b04      	ldr	r3, [sp, #16]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d0e4      	beq.n	800db10 <_scanf_float+0x388>
 800db46:	9905      	ldr	r1, [sp, #20]
 800db48:	230a      	movs	r3, #10
 800db4a:	3101      	adds	r1, #1
 800db4c:	4640      	mov	r0, r8
 800db4e:	f002 fc9f 	bl	8010490 <_strtol_r>
 800db52:	9b04      	ldr	r3, [sp, #16]
 800db54:	9e05      	ldr	r6, [sp, #20]
 800db56:	1ac2      	subs	r2, r0, r3
 800db58:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800db5c:	429e      	cmp	r6, r3
 800db5e:	bf28      	it	cs
 800db60:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800db64:	4910      	ldr	r1, [pc, #64]	@ (800dba8 <_scanf_float+0x420>)
 800db66:	4630      	mov	r0, r6
 800db68:	f000 f918 	bl	800dd9c <siprintf>
 800db6c:	e7d0      	b.n	800db10 <_scanf_float+0x388>
 800db6e:	f011 0f04 	tst.w	r1, #4
 800db72:	9903      	ldr	r1, [sp, #12]
 800db74:	600a      	str	r2, [r1, #0]
 800db76:	d1dc      	bne.n	800db32 <_scanf_float+0x3aa>
 800db78:	681d      	ldr	r5, [r3, #0]
 800db7a:	4632      	mov	r2, r6
 800db7c:	463b      	mov	r3, r7
 800db7e:	4630      	mov	r0, r6
 800db80:	4639      	mov	r1, r7
 800db82:	f7f2 ffd3 	bl	8000b2c <__aeabi_dcmpun>
 800db86:	b128      	cbz	r0, 800db94 <_scanf_float+0x40c>
 800db88:	4808      	ldr	r0, [pc, #32]	@ (800dbac <_scanf_float+0x424>)
 800db8a:	f000 f9f9 	bl	800df80 <nanf>
 800db8e:	ed85 0a00 	vstr	s0, [r5]
 800db92:	e7d1      	b.n	800db38 <_scanf_float+0x3b0>
 800db94:	4630      	mov	r0, r6
 800db96:	4639      	mov	r1, r7
 800db98:	f7f3 f826 	bl	8000be8 <__aeabi_d2f>
 800db9c:	6028      	str	r0, [r5, #0]
 800db9e:	e7cb      	b.n	800db38 <_scanf_float+0x3b0>
 800dba0:	f04f 0900 	mov.w	r9, #0
 800dba4:	e629      	b.n	800d7fa <_scanf_float+0x72>
 800dba6:	bf00      	nop
 800dba8:	08012c04 	.word	0x08012c04
 800dbac:	08012f9d 	.word	0x08012f9d

0800dbb0 <std>:
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	b510      	push	{r4, lr}
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	e9c0 3300 	strd	r3, r3, [r0]
 800dbba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbbe:	6083      	str	r3, [r0, #8]
 800dbc0:	8181      	strh	r1, [r0, #12]
 800dbc2:	6643      	str	r3, [r0, #100]	@ 0x64
 800dbc4:	81c2      	strh	r2, [r0, #14]
 800dbc6:	6183      	str	r3, [r0, #24]
 800dbc8:	4619      	mov	r1, r3
 800dbca:	2208      	movs	r2, #8
 800dbcc:	305c      	adds	r0, #92	@ 0x5c
 800dbce:	f000 f948 	bl	800de62 <memset>
 800dbd2:	4b0d      	ldr	r3, [pc, #52]	@ (800dc08 <std+0x58>)
 800dbd4:	6263      	str	r3, [r4, #36]	@ 0x24
 800dbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800dc0c <std+0x5c>)
 800dbd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dbda:	4b0d      	ldr	r3, [pc, #52]	@ (800dc10 <std+0x60>)
 800dbdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dbde:	4b0d      	ldr	r3, [pc, #52]	@ (800dc14 <std+0x64>)
 800dbe0:	6323      	str	r3, [r4, #48]	@ 0x30
 800dbe2:	4b0d      	ldr	r3, [pc, #52]	@ (800dc18 <std+0x68>)
 800dbe4:	6224      	str	r4, [r4, #32]
 800dbe6:	429c      	cmp	r4, r3
 800dbe8:	d006      	beq.n	800dbf8 <std+0x48>
 800dbea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dbee:	4294      	cmp	r4, r2
 800dbf0:	d002      	beq.n	800dbf8 <std+0x48>
 800dbf2:	33d0      	adds	r3, #208	@ 0xd0
 800dbf4:	429c      	cmp	r4, r3
 800dbf6:	d105      	bne.n	800dc04 <std+0x54>
 800dbf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dbfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc00:	f000 b9ac 	b.w	800df5c <__retarget_lock_init_recursive>
 800dc04:	bd10      	pop	{r4, pc}
 800dc06:	bf00      	nop
 800dc08:	0800dddd 	.word	0x0800dddd
 800dc0c:	0800ddff 	.word	0x0800ddff
 800dc10:	0800de37 	.word	0x0800de37
 800dc14:	0800de5b 	.word	0x0800de5b
 800dc18:	200022a8 	.word	0x200022a8

0800dc1c <stdio_exit_handler>:
 800dc1c:	4a02      	ldr	r2, [pc, #8]	@ (800dc28 <stdio_exit_handler+0xc>)
 800dc1e:	4903      	ldr	r1, [pc, #12]	@ (800dc2c <stdio_exit_handler+0x10>)
 800dc20:	4803      	ldr	r0, [pc, #12]	@ (800dc30 <stdio_exit_handler+0x14>)
 800dc22:	f000 b869 	b.w	800dcf8 <_fwalk_sglue>
 800dc26:	bf00      	nop
 800dc28:	20000138 	.word	0x20000138
 800dc2c:	0801084d 	.word	0x0801084d
 800dc30:	20000148 	.word	0x20000148

0800dc34 <cleanup_stdio>:
 800dc34:	6841      	ldr	r1, [r0, #4]
 800dc36:	4b0c      	ldr	r3, [pc, #48]	@ (800dc68 <cleanup_stdio+0x34>)
 800dc38:	4299      	cmp	r1, r3
 800dc3a:	b510      	push	{r4, lr}
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	d001      	beq.n	800dc44 <cleanup_stdio+0x10>
 800dc40:	f002 fe04 	bl	801084c <_fflush_r>
 800dc44:	68a1      	ldr	r1, [r4, #8]
 800dc46:	4b09      	ldr	r3, [pc, #36]	@ (800dc6c <cleanup_stdio+0x38>)
 800dc48:	4299      	cmp	r1, r3
 800dc4a:	d002      	beq.n	800dc52 <cleanup_stdio+0x1e>
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f002 fdfd 	bl	801084c <_fflush_r>
 800dc52:	68e1      	ldr	r1, [r4, #12]
 800dc54:	4b06      	ldr	r3, [pc, #24]	@ (800dc70 <cleanup_stdio+0x3c>)
 800dc56:	4299      	cmp	r1, r3
 800dc58:	d004      	beq.n	800dc64 <cleanup_stdio+0x30>
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc60:	f002 bdf4 	b.w	801084c <_fflush_r>
 800dc64:	bd10      	pop	{r4, pc}
 800dc66:	bf00      	nop
 800dc68:	200022a8 	.word	0x200022a8
 800dc6c:	20002310 	.word	0x20002310
 800dc70:	20002378 	.word	0x20002378

0800dc74 <global_stdio_init.part.0>:
 800dc74:	b510      	push	{r4, lr}
 800dc76:	4b0b      	ldr	r3, [pc, #44]	@ (800dca4 <global_stdio_init.part.0+0x30>)
 800dc78:	4c0b      	ldr	r4, [pc, #44]	@ (800dca8 <global_stdio_init.part.0+0x34>)
 800dc7a:	4a0c      	ldr	r2, [pc, #48]	@ (800dcac <global_stdio_init.part.0+0x38>)
 800dc7c:	601a      	str	r2, [r3, #0]
 800dc7e:	4620      	mov	r0, r4
 800dc80:	2200      	movs	r2, #0
 800dc82:	2104      	movs	r1, #4
 800dc84:	f7ff ff94 	bl	800dbb0 <std>
 800dc88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	2109      	movs	r1, #9
 800dc90:	f7ff ff8e 	bl	800dbb0 <std>
 800dc94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dc98:	2202      	movs	r2, #2
 800dc9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc9e:	2112      	movs	r1, #18
 800dca0:	f7ff bf86 	b.w	800dbb0 <std>
 800dca4:	200023e0 	.word	0x200023e0
 800dca8:	200022a8 	.word	0x200022a8
 800dcac:	0800dc1d 	.word	0x0800dc1d

0800dcb0 <__sfp_lock_acquire>:
 800dcb0:	4801      	ldr	r0, [pc, #4]	@ (800dcb8 <__sfp_lock_acquire+0x8>)
 800dcb2:	f000 b954 	b.w	800df5e <__retarget_lock_acquire_recursive>
 800dcb6:	bf00      	nop
 800dcb8:	200023e9 	.word	0x200023e9

0800dcbc <__sfp_lock_release>:
 800dcbc:	4801      	ldr	r0, [pc, #4]	@ (800dcc4 <__sfp_lock_release+0x8>)
 800dcbe:	f000 b94f 	b.w	800df60 <__retarget_lock_release_recursive>
 800dcc2:	bf00      	nop
 800dcc4:	200023e9 	.word	0x200023e9

0800dcc8 <__sinit>:
 800dcc8:	b510      	push	{r4, lr}
 800dcca:	4604      	mov	r4, r0
 800dccc:	f7ff fff0 	bl	800dcb0 <__sfp_lock_acquire>
 800dcd0:	6a23      	ldr	r3, [r4, #32]
 800dcd2:	b11b      	cbz	r3, 800dcdc <__sinit+0x14>
 800dcd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcd8:	f7ff bff0 	b.w	800dcbc <__sfp_lock_release>
 800dcdc:	4b04      	ldr	r3, [pc, #16]	@ (800dcf0 <__sinit+0x28>)
 800dcde:	6223      	str	r3, [r4, #32]
 800dce0:	4b04      	ldr	r3, [pc, #16]	@ (800dcf4 <__sinit+0x2c>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d1f5      	bne.n	800dcd4 <__sinit+0xc>
 800dce8:	f7ff ffc4 	bl	800dc74 <global_stdio_init.part.0>
 800dcec:	e7f2      	b.n	800dcd4 <__sinit+0xc>
 800dcee:	bf00      	nop
 800dcf0:	0800dc35 	.word	0x0800dc35
 800dcf4:	200023e0 	.word	0x200023e0

0800dcf8 <_fwalk_sglue>:
 800dcf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcfc:	4607      	mov	r7, r0
 800dcfe:	4688      	mov	r8, r1
 800dd00:	4614      	mov	r4, r2
 800dd02:	2600      	movs	r6, #0
 800dd04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd08:	f1b9 0901 	subs.w	r9, r9, #1
 800dd0c:	d505      	bpl.n	800dd1a <_fwalk_sglue+0x22>
 800dd0e:	6824      	ldr	r4, [r4, #0]
 800dd10:	2c00      	cmp	r4, #0
 800dd12:	d1f7      	bne.n	800dd04 <_fwalk_sglue+0xc>
 800dd14:	4630      	mov	r0, r6
 800dd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd1a:	89ab      	ldrh	r3, [r5, #12]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d907      	bls.n	800dd30 <_fwalk_sglue+0x38>
 800dd20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd24:	3301      	adds	r3, #1
 800dd26:	d003      	beq.n	800dd30 <_fwalk_sglue+0x38>
 800dd28:	4629      	mov	r1, r5
 800dd2a:	4638      	mov	r0, r7
 800dd2c:	47c0      	blx	r8
 800dd2e:	4306      	orrs	r6, r0
 800dd30:	3568      	adds	r5, #104	@ 0x68
 800dd32:	e7e9      	b.n	800dd08 <_fwalk_sglue+0x10>

0800dd34 <sniprintf>:
 800dd34:	b40c      	push	{r2, r3}
 800dd36:	b530      	push	{r4, r5, lr}
 800dd38:	4b17      	ldr	r3, [pc, #92]	@ (800dd98 <sniprintf+0x64>)
 800dd3a:	1e0c      	subs	r4, r1, #0
 800dd3c:	681d      	ldr	r5, [r3, #0]
 800dd3e:	b09d      	sub	sp, #116	@ 0x74
 800dd40:	da08      	bge.n	800dd54 <sniprintf+0x20>
 800dd42:	238b      	movs	r3, #139	@ 0x8b
 800dd44:	602b      	str	r3, [r5, #0]
 800dd46:	f04f 30ff 	mov.w	r0, #4294967295
 800dd4a:	b01d      	add	sp, #116	@ 0x74
 800dd4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd50:	b002      	add	sp, #8
 800dd52:	4770      	bx	lr
 800dd54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dd58:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dd5c:	bf14      	ite	ne
 800dd5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dd62:	4623      	moveq	r3, r4
 800dd64:	9304      	str	r3, [sp, #16]
 800dd66:	9307      	str	r3, [sp, #28]
 800dd68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd6c:	9002      	str	r0, [sp, #8]
 800dd6e:	9006      	str	r0, [sp, #24]
 800dd70:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dd74:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dd76:	ab21      	add	r3, sp, #132	@ 0x84
 800dd78:	a902      	add	r1, sp, #8
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	9301      	str	r3, [sp, #4]
 800dd7e:	f002 fbe5 	bl	801054c <_svfiprintf_r>
 800dd82:	1c43      	adds	r3, r0, #1
 800dd84:	bfbc      	itt	lt
 800dd86:	238b      	movlt	r3, #139	@ 0x8b
 800dd88:	602b      	strlt	r3, [r5, #0]
 800dd8a:	2c00      	cmp	r4, #0
 800dd8c:	d0dd      	beq.n	800dd4a <sniprintf+0x16>
 800dd8e:	9b02      	ldr	r3, [sp, #8]
 800dd90:	2200      	movs	r2, #0
 800dd92:	701a      	strb	r2, [r3, #0]
 800dd94:	e7d9      	b.n	800dd4a <sniprintf+0x16>
 800dd96:	bf00      	nop
 800dd98:	20000144 	.word	0x20000144

0800dd9c <siprintf>:
 800dd9c:	b40e      	push	{r1, r2, r3}
 800dd9e:	b500      	push	{lr}
 800dda0:	b09c      	sub	sp, #112	@ 0x70
 800dda2:	ab1d      	add	r3, sp, #116	@ 0x74
 800dda4:	9002      	str	r0, [sp, #8]
 800dda6:	9006      	str	r0, [sp, #24]
 800dda8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ddac:	4809      	ldr	r0, [pc, #36]	@ (800ddd4 <siprintf+0x38>)
 800ddae:	9107      	str	r1, [sp, #28]
 800ddb0:	9104      	str	r1, [sp, #16]
 800ddb2:	4909      	ldr	r1, [pc, #36]	@ (800ddd8 <siprintf+0x3c>)
 800ddb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddb8:	9105      	str	r1, [sp, #20]
 800ddba:	6800      	ldr	r0, [r0, #0]
 800ddbc:	9301      	str	r3, [sp, #4]
 800ddbe:	a902      	add	r1, sp, #8
 800ddc0:	f002 fbc4 	bl	801054c <_svfiprintf_r>
 800ddc4:	9b02      	ldr	r3, [sp, #8]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	701a      	strb	r2, [r3, #0]
 800ddca:	b01c      	add	sp, #112	@ 0x70
 800ddcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddd0:	b003      	add	sp, #12
 800ddd2:	4770      	bx	lr
 800ddd4:	20000144 	.word	0x20000144
 800ddd8:	ffff0208 	.word	0xffff0208

0800dddc <__sread>:
 800dddc:	b510      	push	{r4, lr}
 800ddde:	460c      	mov	r4, r1
 800dde0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dde4:	f000 f86c 	bl	800dec0 <_read_r>
 800dde8:	2800      	cmp	r0, #0
 800ddea:	bfab      	itete	ge
 800ddec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ddee:	89a3      	ldrhlt	r3, [r4, #12]
 800ddf0:	181b      	addge	r3, r3, r0
 800ddf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ddf6:	bfac      	ite	ge
 800ddf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ddfa:	81a3      	strhlt	r3, [r4, #12]
 800ddfc:	bd10      	pop	{r4, pc}

0800ddfe <__swrite>:
 800ddfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de02:	461f      	mov	r7, r3
 800de04:	898b      	ldrh	r3, [r1, #12]
 800de06:	05db      	lsls	r3, r3, #23
 800de08:	4605      	mov	r5, r0
 800de0a:	460c      	mov	r4, r1
 800de0c:	4616      	mov	r6, r2
 800de0e:	d505      	bpl.n	800de1c <__swrite+0x1e>
 800de10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de14:	2302      	movs	r3, #2
 800de16:	2200      	movs	r2, #0
 800de18:	f000 f840 	bl	800de9c <_lseek_r>
 800de1c:	89a3      	ldrh	r3, [r4, #12]
 800de1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de26:	81a3      	strh	r3, [r4, #12]
 800de28:	4632      	mov	r2, r6
 800de2a:	463b      	mov	r3, r7
 800de2c:	4628      	mov	r0, r5
 800de2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de32:	f000 b857 	b.w	800dee4 <_write_r>

0800de36 <__sseek>:
 800de36:	b510      	push	{r4, lr}
 800de38:	460c      	mov	r4, r1
 800de3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de3e:	f000 f82d 	bl	800de9c <_lseek_r>
 800de42:	1c43      	adds	r3, r0, #1
 800de44:	89a3      	ldrh	r3, [r4, #12]
 800de46:	bf15      	itete	ne
 800de48:	6560      	strne	r0, [r4, #84]	@ 0x54
 800de4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800de4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800de52:	81a3      	strheq	r3, [r4, #12]
 800de54:	bf18      	it	ne
 800de56:	81a3      	strhne	r3, [r4, #12]
 800de58:	bd10      	pop	{r4, pc}

0800de5a <__sclose>:
 800de5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de5e:	f000 b80d 	b.w	800de7c <_close_r>

0800de62 <memset>:
 800de62:	4402      	add	r2, r0
 800de64:	4603      	mov	r3, r0
 800de66:	4293      	cmp	r3, r2
 800de68:	d100      	bne.n	800de6c <memset+0xa>
 800de6a:	4770      	bx	lr
 800de6c:	f803 1b01 	strb.w	r1, [r3], #1
 800de70:	e7f9      	b.n	800de66 <memset+0x4>
	...

0800de74 <_localeconv_r>:
 800de74:	4800      	ldr	r0, [pc, #0]	@ (800de78 <_localeconv_r+0x4>)
 800de76:	4770      	bx	lr
 800de78:	20000284 	.word	0x20000284

0800de7c <_close_r>:
 800de7c:	b538      	push	{r3, r4, r5, lr}
 800de7e:	4d06      	ldr	r5, [pc, #24]	@ (800de98 <_close_r+0x1c>)
 800de80:	2300      	movs	r3, #0
 800de82:	4604      	mov	r4, r0
 800de84:	4608      	mov	r0, r1
 800de86:	602b      	str	r3, [r5, #0]
 800de88:	f7f5 fc00 	bl	800368c <_close>
 800de8c:	1c43      	adds	r3, r0, #1
 800de8e:	d102      	bne.n	800de96 <_close_r+0x1a>
 800de90:	682b      	ldr	r3, [r5, #0]
 800de92:	b103      	cbz	r3, 800de96 <_close_r+0x1a>
 800de94:	6023      	str	r3, [r4, #0]
 800de96:	bd38      	pop	{r3, r4, r5, pc}
 800de98:	200023e4 	.word	0x200023e4

0800de9c <_lseek_r>:
 800de9c:	b538      	push	{r3, r4, r5, lr}
 800de9e:	4d07      	ldr	r5, [pc, #28]	@ (800debc <_lseek_r+0x20>)
 800dea0:	4604      	mov	r4, r0
 800dea2:	4608      	mov	r0, r1
 800dea4:	4611      	mov	r1, r2
 800dea6:	2200      	movs	r2, #0
 800dea8:	602a      	str	r2, [r5, #0]
 800deaa:	461a      	mov	r2, r3
 800deac:	f7f5 fc15 	bl	80036da <_lseek>
 800deb0:	1c43      	adds	r3, r0, #1
 800deb2:	d102      	bne.n	800deba <_lseek_r+0x1e>
 800deb4:	682b      	ldr	r3, [r5, #0]
 800deb6:	b103      	cbz	r3, 800deba <_lseek_r+0x1e>
 800deb8:	6023      	str	r3, [r4, #0]
 800deba:	bd38      	pop	{r3, r4, r5, pc}
 800debc:	200023e4 	.word	0x200023e4

0800dec0 <_read_r>:
 800dec0:	b538      	push	{r3, r4, r5, lr}
 800dec2:	4d07      	ldr	r5, [pc, #28]	@ (800dee0 <_read_r+0x20>)
 800dec4:	4604      	mov	r4, r0
 800dec6:	4608      	mov	r0, r1
 800dec8:	4611      	mov	r1, r2
 800deca:	2200      	movs	r2, #0
 800decc:	602a      	str	r2, [r5, #0]
 800dece:	461a      	mov	r2, r3
 800ded0:	f7f5 fba3 	bl	800361a <_read>
 800ded4:	1c43      	adds	r3, r0, #1
 800ded6:	d102      	bne.n	800dede <_read_r+0x1e>
 800ded8:	682b      	ldr	r3, [r5, #0]
 800deda:	b103      	cbz	r3, 800dede <_read_r+0x1e>
 800dedc:	6023      	str	r3, [r4, #0]
 800dede:	bd38      	pop	{r3, r4, r5, pc}
 800dee0:	200023e4 	.word	0x200023e4

0800dee4 <_write_r>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	4d07      	ldr	r5, [pc, #28]	@ (800df04 <_write_r+0x20>)
 800dee8:	4604      	mov	r4, r0
 800deea:	4608      	mov	r0, r1
 800deec:	4611      	mov	r1, r2
 800deee:	2200      	movs	r2, #0
 800def0:	602a      	str	r2, [r5, #0]
 800def2:	461a      	mov	r2, r3
 800def4:	f7f5 fbae 	bl	8003654 <_write>
 800def8:	1c43      	adds	r3, r0, #1
 800defa:	d102      	bne.n	800df02 <_write_r+0x1e>
 800defc:	682b      	ldr	r3, [r5, #0]
 800defe:	b103      	cbz	r3, 800df02 <_write_r+0x1e>
 800df00:	6023      	str	r3, [r4, #0]
 800df02:	bd38      	pop	{r3, r4, r5, pc}
 800df04:	200023e4 	.word	0x200023e4

0800df08 <__errno>:
 800df08:	4b01      	ldr	r3, [pc, #4]	@ (800df10 <__errno+0x8>)
 800df0a:	6818      	ldr	r0, [r3, #0]
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	20000144 	.word	0x20000144

0800df14 <__libc_init_array>:
 800df14:	b570      	push	{r4, r5, r6, lr}
 800df16:	4d0d      	ldr	r5, [pc, #52]	@ (800df4c <__libc_init_array+0x38>)
 800df18:	4c0d      	ldr	r4, [pc, #52]	@ (800df50 <__libc_init_array+0x3c>)
 800df1a:	1b64      	subs	r4, r4, r5
 800df1c:	10a4      	asrs	r4, r4, #2
 800df1e:	2600      	movs	r6, #0
 800df20:	42a6      	cmp	r6, r4
 800df22:	d109      	bne.n	800df38 <__libc_init_array+0x24>
 800df24:	4d0b      	ldr	r5, [pc, #44]	@ (800df54 <__libc_init_array+0x40>)
 800df26:	4c0c      	ldr	r4, [pc, #48]	@ (800df58 <__libc_init_array+0x44>)
 800df28:	f004 fd56 	bl	80129d8 <_init>
 800df2c:	1b64      	subs	r4, r4, r5
 800df2e:	10a4      	asrs	r4, r4, #2
 800df30:	2600      	movs	r6, #0
 800df32:	42a6      	cmp	r6, r4
 800df34:	d105      	bne.n	800df42 <__libc_init_array+0x2e>
 800df36:	bd70      	pop	{r4, r5, r6, pc}
 800df38:	f855 3b04 	ldr.w	r3, [r5], #4
 800df3c:	4798      	blx	r3
 800df3e:	3601      	adds	r6, #1
 800df40:	e7ee      	b.n	800df20 <__libc_init_array+0xc>
 800df42:	f855 3b04 	ldr.w	r3, [r5], #4
 800df46:	4798      	blx	r3
 800df48:	3601      	adds	r6, #1
 800df4a:	e7f2      	b.n	800df32 <__libc_init_array+0x1e>
 800df4c:	080131e0 	.word	0x080131e0
 800df50:	080131e0 	.word	0x080131e0
 800df54:	080131e0 	.word	0x080131e0
 800df58:	080131e4 	.word	0x080131e4

0800df5c <__retarget_lock_init_recursive>:
 800df5c:	4770      	bx	lr

0800df5e <__retarget_lock_acquire_recursive>:
 800df5e:	4770      	bx	lr

0800df60 <__retarget_lock_release_recursive>:
 800df60:	4770      	bx	lr

0800df62 <memcpy>:
 800df62:	440a      	add	r2, r1
 800df64:	4291      	cmp	r1, r2
 800df66:	f100 33ff 	add.w	r3, r0, #4294967295
 800df6a:	d100      	bne.n	800df6e <memcpy+0xc>
 800df6c:	4770      	bx	lr
 800df6e:	b510      	push	{r4, lr}
 800df70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df78:	4291      	cmp	r1, r2
 800df7a:	d1f9      	bne.n	800df70 <memcpy+0xe>
 800df7c:	bd10      	pop	{r4, pc}
	...

0800df80 <nanf>:
 800df80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800df88 <nanf+0x8>
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	7fc00000 	.word	0x7fc00000

0800df8c <quorem>:
 800df8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df90:	6903      	ldr	r3, [r0, #16]
 800df92:	690c      	ldr	r4, [r1, #16]
 800df94:	42a3      	cmp	r3, r4
 800df96:	4607      	mov	r7, r0
 800df98:	db7e      	blt.n	800e098 <quorem+0x10c>
 800df9a:	3c01      	subs	r4, #1
 800df9c:	f101 0814 	add.w	r8, r1, #20
 800dfa0:	00a3      	lsls	r3, r4, #2
 800dfa2:	f100 0514 	add.w	r5, r0, #20
 800dfa6:	9300      	str	r3, [sp, #0]
 800dfa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dfac:	9301      	str	r3, [sp, #4]
 800dfae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dfb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dfbe:	fbb2 f6f3 	udiv	r6, r2, r3
 800dfc2:	d32e      	bcc.n	800e022 <quorem+0x96>
 800dfc4:	f04f 0a00 	mov.w	sl, #0
 800dfc8:	46c4      	mov	ip, r8
 800dfca:	46ae      	mov	lr, r5
 800dfcc:	46d3      	mov	fp, sl
 800dfce:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dfd2:	b298      	uxth	r0, r3
 800dfd4:	fb06 a000 	mla	r0, r6, r0, sl
 800dfd8:	0c02      	lsrs	r2, r0, #16
 800dfda:	0c1b      	lsrs	r3, r3, #16
 800dfdc:	fb06 2303 	mla	r3, r6, r3, r2
 800dfe0:	f8de 2000 	ldr.w	r2, [lr]
 800dfe4:	b280      	uxth	r0, r0
 800dfe6:	b292      	uxth	r2, r2
 800dfe8:	1a12      	subs	r2, r2, r0
 800dfea:	445a      	add	r2, fp
 800dfec:	f8de 0000 	ldr.w	r0, [lr]
 800dff0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dffa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dffe:	b292      	uxth	r2, r2
 800e000:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e004:	45e1      	cmp	r9, ip
 800e006:	f84e 2b04 	str.w	r2, [lr], #4
 800e00a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e00e:	d2de      	bcs.n	800dfce <quorem+0x42>
 800e010:	9b00      	ldr	r3, [sp, #0]
 800e012:	58eb      	ldr	r3, [r5, r3]
 800e014:	b92b      	cbnz	r3, 800e022 <quorem+0x96>
 800e016:	9b01      	ldr	r3, [sp, #4]
 800e018:	3b04      	subs	r3, #4
 800e01a:	429d      	cmp	r5, r3
 800e01c:	461a      	mov	r2, r3
 800e01e:	d32f      	bcc.n	800e080 <quorem+0xf4>
 800e020:	613c      	str	r4, [r7, #16]
 800e022:	4638      	mov	r0, r7
 800e024:	f001 f9c4 	bl	800f3b0 <__mcmp>
 800e028:	2800      	cmp	r0, #0
 800e02a:	db25      	blt.n	800e078 <quorem+0xec>
 800e02c:	4629      	mov	r1, r5
 800e02e:	2000      	movs	r0, #0
 800e030:	f858 2b04 	ldr.w	r2, [r8], #4
 800e034:	f8d1 c000 	ldr.w	ip, [r1]
 800e038:	fa1f fe82 	uxth.w	lr, r2
 800e03c:	fa1f f38c 	uxth.w	r3, ip
 800e040:	eba3 030e 	sub.w	r3, r3, lr
 800e044:	4403      	add	r3, r0
 800e046:	0c12      	lsrs	r2, r2, #16
 800e048:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e04c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e050:	b29b      	uxth	r3, r3
 800e052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e056:	45c1      	cmp	r9, r8
 800e058:	f841 3b04 	str.w	r3, [r1], #4
 800e05c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e060:	d2e6      	bcs.n	800e030 <quorem+0xa4>
 800e062:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e066:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e06a:	b922      	cbnz	r2, 800e076 <quorem+0xea>
 800e06c:	3b04      	subs	r3, #4
 800e06e:	429d      	cmp	r5, r3
 800e070:	461a      	mov	r2, r3
 800e072:	d30b      	bcc.n	800e08c <quorem+0x100>
 800e074:	613c      	str	r4, [r7, #16]
 800e076:	3601      	adds	r6, #1
 800e078:	4630      	mov	r0, r6
 800e07a:	b003      	add	sp, #12
 800e07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e080:	6812      	ldr	r2, [r2, #0]
 800e082:	3b04      	subs	r3, #4
 800e084:	2a00      	cmp	r2, #0
 800e086:	d1cb      	bne.n	800e020 <quorem+0x94>
 800e088:	3c01      	subs	r4, #1
 800e08a:	e7c6      	b.n	800e01a <quorem+0x8e>
 800e08c:	6812      	ldr	r2, [r2, #0]
 800e08e:	3b04      	subs	r3, #4
 800e090:	2a00      	cmp	r2, #0
 800e092:	d1ef      	bne.n	800e074 <quorem+0xe8>
 800e094:	3c01      	subs	r4, #1
 800e096:	e7ea      	b.n	800e06e <quorem+0xe2>
 800e098:	2000      	movs	r0, #0
 800e09a:	e7ee      	b.n	800e07a <quorem+0xee>
 800e09c:	0000      	movs	r0, r0
	...

0800e0a0 <_dtoa_r>:
 800e0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a4:	69c7      	ldr	r7, [r0, #28]
 800e0a6:	b099      	sub	sp, #100	@ 0x64
 800e0a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e0ac:	ec55 4b10 	vmov	r4, r5, d0
 800e0b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e0b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800e0b4:	4683      	mov	fp, r0
 800e0b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800e0b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e0ba:	b97f      	cbnz	r7, 800e0dc <_dtoa_r+0x3c>
 800e0bc:	2010      	movs	r0, #16
 800e0be:	f000 fdfd 	bl	800ecbc <malloc>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	f8cb 001c 	str.w	r0, [fp, #28]
 800e0c8:	b920      	cbnz	r0, 800e0d4 <_dtoa_r+0x34>
 800e0ca:	4ba7      	ldr	r3, [pc, #668]	@ (800e368 <_dtoa_r+0x2c8>)
 800e0cc:	21ef      	movs	r1, #239	@ 0xef
 800e0ce:	48a7      	ldr	r0, [pc, #668]	@ (800e36c <_dtoa_r+0x2cc>)
 800e0d0:	f002 fc2a 	bl	8010928 <__assert_func>
 800e0d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e0d8:	6007      	str	r7, [r0, #0]
 800e0da:	60c7      	str	r7, [r0, #12]
 800e0dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e0e0:	6819      	ldr	r1, [r3, #0]
 800e0e2:	b159      	cbz	r1, 800e0fc <_dtoa_r+0x5c>
 800e0e4:	685a      	ldr	r2, [r3, #4]
 800e0e6:	604a      	str	r2, [r1, #4]
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	4093      	lsls	r3, r2
 800e0ec:	608b      	str	r3, [r1, #8]
 800e0ee:	4658      	mov	r0, fp
 800e0f0:	f000 feda 	bl	800eea8 <_Bfree>
 800e0f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	601a      	str	r2, [r3, #0]
 800e0fc:	1e2b      	subs	r3, r5, #0
 800e0fe:	bfb9      	ittee	lt
 800e100:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e104:	9303      	strlt	r3, [sp, #12]
 800e106:	2300      	movge	r3, #0
 800e108:	6033      	strge	r3, [r6, #0]
 800e10a:	9f03      	ldr	r7, [sp, #12]
 800e10c:	4b98      	ldr	r3, [pc, #608]	@ (800e370 <_dtoa_r+0x2d0>)
 800e10e:	bfbc      	itt	lt
 800e110:	2201      	movlt	r2, #1
 800e112:	6032      	strlt	r2, [r6, #0]
 800e114:	43bb      	bics	r3, r7
 800e116:	d112      	bne.n	800e13e <_dtoa_r+0x9e>
 800e118:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e11a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e11e:	6013      	str	r3, [r2, #0]
 800e120:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e124:	4323      	orrs	r3, r4
 800e126:	f000 854d 	beq.w	800ebc4 <_dtoa_r+0xb24>
 800e12a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e12c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e384 <_dtoa_r+0x2e4>
 800e130:	2b00      	cmp	r3, #0
 800e132:	f000 854f 	beq.w	800ebd4 <_dtoa_r+0xb34>
 800e136:	f10a 0303 	add.w	r3, sl, #3
 800e13a:	f000 bd49 	b.w	800ebd0 <_dtoa_r+0xb30>
 800e13e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e142:	2200      	movs	r2, #0
 800e144:	ec51 0b17 	vmov	r0, r1, d7
 800e148:	2300      	movs	r3, #0
 800e14a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e14e:	f7f2 fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e152:	4680      	mov	r8, r0
 800e154:	b158      	cbz	r0, 800e16e <_dtoa_r+0xce>
 800e156:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e158:	2301      	movs	r3, #1
 800e15a:	6013      	str	r3, [r2, #0]
 800e15c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e15e:	b113      	cbz	r3, 800e166 <_dtoa_r+0xc6>
 800e160:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e162:	4b84      	ldr	r3, [pc, #528]	@ (800e374 <_dtoa_r+0x2d4>)
 800e164:	6013      	str	r3, [r2, #0]
 800e166:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e388 <_dtoa_r+0x2e8>
 800e16a:	f000 bd33 	b.w	800ebd4 <_dtoa_r+0xb34>
 800e16e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e172:	aa16      	add	r2, sp, #88	@ 0x58
 800e174:	a917      	add	r1, sp, #92	@ 0x5c
 800e176:	4658      	mov	r0, fp
 800e178:	f001 fa3a 	bl	800f5f0 <__d2b>
 800e17c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e180:	4681      	mov	r9, r0
 800e182:	2e00      	cmp	r6, #0
 800e184:	d077      	beq.n	800e276 <_dtoa_r+0x1d6>
 800e186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e188:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e18c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e194:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e198:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e19c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	4b74      	ldr	r3, [pc, #464]	@ (800e378 <_dtoa_r+0x2d8>)
 800e1a6:	f7f2 f86f 	bl	8000288 <__aeabi_dsub>
 800e1aa:	a369      	add	r3, pc, #420	@ (adr r3, 800e350 <_dtoa_r+0x2b0>)
 800e1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b0:	f7f2 fa22 	bl	80005f8 <__aeabi_dmul>
 800e1b4:	a368      	add	r3, pc, #416	@ (adr r3, 800e358 <_dtoa_r+0x2b8>)
 800e1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ba:	f7f2 f867 	bl	800028c <__adddf3>
 800e1be:	4604      	mov	r4, r0
 800e1c0:	4630      	mov	r0, r6
 800e1c2:	460d      	mov	r5, r1
 800e1c4:	f7f2 f9ae 	bl	8000524 <__aeabi_i2d>
 800e1c8:	a365      	add	r3, pc, #404	@ (adr r3, 800e360 <_dtoa_r+0x2c0>)
 800e1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ce:	f7f2 fa13 	bl	80005f8 <__aeabi_dmul>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	4629      	mov	r1, r5
 800e1da:	f7f2 f857 	bl	800028c <__adddf3>
 800e1de:	4604      	mov	r4, r0
 800e1e0:	460d      	mov	r5, r1
 800e1e2:	f7f2 fcb9 	bl	8000b58 <__aeabi_d2iz>
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	4607      	mov	r7, r0
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	f7f2 fc74 	bl	8000adc <__aeabi_dcmplt>
 800e1f4:	b140      	cbz	r0, 800e208 <_dtoa_r+0x168>
 800e1f6:	4638      	mov	r0, r7
 800e1f8:	f7f2 f994 	bl	8000524 <__aeabi_i2d>
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	462b      	mov	r3, r5
 800e200:	f7f2 fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 800e204:	b900      	cbnz	r0, 800e208 <_dtoa_r+0x168>
 800e206:	3f01      	subs	r7, #1
 800e208:	2f16      	cmp	r7, #22
 800e20a:	d851      	bhi.n	800e2b0 <_dtoa_r+0x210>
 800e20c:	4b5b      	ldr	r3, [pc, #364]	@ (800e37c <_dtoa_r+0x2dc>)
 800e20e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e21a:	f7f2 fc5f 	bl	8000adc <__aeabi_dcmplt>
 800e21e:	2800      	cmp	r0, #0
 800e220:	d048      	beq.n	800e2b4 <_dtoa_r+0x214>
 800e222:	3f01      	subs	r7, #1
 800e224:	2300      	movs	r3, #0
 800e226:	9312      	str	r3, [sp, #72]	@ 0x48
 800e228:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e22a:	1b9b      	subs	r3, r3, r6
 800e22c:	1e5a      	subs	r2, r3, #1
 800e22e:	bf44      	itt	mi
 800e230:	f1c3 0801 	rsbmi	r8, r3, #1
 800e234:	2300      	movmi	r3, #0
 800e236:	9208      	str	r2, [sp, #32]
 800e238:	bf54      	ite	pl
 800e23a:	f04f 0800 	movpl.w	r8, #0
 800e23e:	9308      	strmi	r3, [sp, #32]
 800e240:	2f00      	cmp	r7, #0
 800e242:	db39      	blt.n	800e2b8 <_dtoa_r+0x218>
 800e244:	9b08      	ldr	r3, [sp, #32]
 800e246:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e248:	443b      	add	r3, r7
 800e24a:	9308      	str	r3, [sp, #32]
 800e24c:	2300      	movs	r3, #0
 800e24e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e252:	2b09      	cmp	r3, #9
 800e254:	d864      	bhi.n	800e320 <_dtoa_r+0x280>
 800e256:	2b05      	cmp	r3, #5
 800e258:	bfc4      	itt	gt
 800e25a:	3b04      	subgt	r3, #4
 800e25c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e260:	f1a3 0302 	sub.w	r3, r3, #2
 800e264:	bfcc      	ite	gt
 800e266:	2400      	movgt	r4, #0
 800e268:	2401      	movle	r4, #1
 800e26a:	2b03      	cmp	r3, #3
 800e26c:	d863      	bhi.n	800e336 <_dtoa_r+0x296>
 800e26e:	e8df f003 	tbb	[pc, r3]
 800e272:	372a      	.short	0x372a
 800e274:	5535      	.short	0x5535
 800e276:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e27a:	441e      	add	r6, r3
 800e27c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e280:	2b20      	cmp	r3, #32
 800e282:	bfc1      	itttt	gt
 800e284:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e288:	409f      	lslgt	r7, r3
 800e28a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e28e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e292:	bfd6      	itet	le
 800e294:	f1c3 0320 	rsble	r3, r3, #32
 800e298:	ea47 0003 	orrgt.w	r0, r7, r3
 800e29c:	fa04 f003 	lslle.w	r0, r4, r3
 800e2a0:	f7f2 f930 	bl	8000504 <__aeabi_ui2d>
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e2aa:	3e01      	subs	r6, #1
 800e2ac:	9214      	str	r2, [sp, #80]	@ 0x50
 800e2ae:	e777      	b.n	800e1a0 <_dtoa_r+0x100>
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e7b8      	b.n	800e226 <_dtoa_r+0x186>
 800e2b4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e2b6:	e7b7      	b.n	800e228 <_dtoa_r+0x188>
 800e2b8:	427b      	negs	r3, r7
 800e2ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2bc:	2300      	movs	r3, #0
 800e2be:	eba8 0807 	sub.w	r8, r8, r7
 800e2c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e2c4:	e7c4      	b.n	800e250 <_dtoa_r+0x1b0>
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e2ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	dc35      	bgt.n	800e33c <_dtoa_r+0x29c>
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	9307      	str	r3, [sp, #28]
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e2da:	e00b      	b.n	800e2f4 <_dtoa_r+0x254>
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e7f3      	b.n	800e2c8 <_dtoa_r+0x228>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e2e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2e6:	18fb      	adds	r3, r7, r3
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	9307      	str	r3, [sp, #28]
 800e2f0:	bfb8      	it	lt
 800e2f2:	2301      	movlt	r3, #1
 800e2f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e2f8:	2100      	movs	r1, #0
 800e2fa:	2204      	movs	r2, #4
 800e2fc:	f102 0514 	add.w	r5, r2, #20
 800e300:	429d      	cmp	r5, r3
 800e302:	d91f      	bls.n	800e344 <_dtoa_r+0x2a4>
 800e304:	6041      	str	r1, [r0, #4]
 800e306:	4658      	mov	r0, fp
 800e308:	f000 fd8e 	bl	800ee28 <_Balloc>
 800e30c:	4682      	mov	sl, r0
 800e30e:	2800      	cmp	r0, #0
 800e310:	d13c      	bne.n	800e38c <_dtoa_r+0x2ec>
 800e312:	4b1b      	ldr	r3, [pc, #108]	@ (800e380 <_dtoa_r+0x2e0>)
 800e314:	4602      	mov	r2, r0
 800e316:	f240 11af 	movw	r1, #431	@ 0x1af
 800e31a:	e6d8      	b.n	800e0ce <_dtoa_r+0x2e>
 800e31c:	2301      	movs	r3, #1
 800e31e:	e7e0      	b.n	800e2e2 <_dtoa_r+0x242>
 800e320:	2401      	movs	r4, #1
 800e322:	2300      	movs	r3, #0
 800e324:	9309      	str	r3, [sp, #36]	@ 0x24
 800e326:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e328:	f04f 33ff 	mov.w	r3, #4294967295
 800e32c:	9300      	str	r3, [sp, #0]
 800e32e:	9307      	str	r3, [sp, #28]
 800e330:	2200      	movs	r2, #0
 800e332:	2312      	movs	r3, #18
 800e334:	e7d0      	b.n	800e2d8 <_dtoa_r+0x238>
 800e336:	2301      	movs	r3, #1
 800e338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e33a:	e7f5      	b.n	800e328 <_dtoa_r+0x288>
 800e33c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e33e:	9300      	str	r3, [sp, #0]
 800e340:	9307      	str	r3, [sp, #28]
 800e342:	e7d7      	b.n	800e2f4 <_dtoa_r+0x254>
 800e344:	3101      	adds	r1, #1
 800e346:	0052      	lsls	r2, r2, #1
 800e348:	e7d8      	b.n	800e2fc <_dtoa_r+0x25c>
 800e34a:	bf00      	nop
 800e34c:	f3af 8000 	nop.w
 800e350:	636f4361 	.word	0x636f4361
 800e354:	3fd287a7 	.word	0x3fd287a7
 800e358:	8b60c8b3 	.word	0x8b60c8b3
 800e35c:	3fc68a28 	.word	0x3fc68a28
 800e360:	509f79fb 	.word	0x509f79fb
 800e364:	3fd34413 	.word	0x3fd34413
 800e368:	08012c16 	.word	0x08012c16
 800e36c:	08012c2d 	.word	0x08012c2d
 800e370:	7ff00000 	.word	0x7ff00000
 800e374:	08012be1 	.word	0x08012be1
 800e378:	3ff80000 	.word	0x3ff80000
 800e37c:	08012d28 	.word	0x08012d28
 800e380:	08012c85 	.word	0x08012c85
 800e384:	08012c12 	.word	0x08012c12
 800e388:	08012be0 	.word	0x08012be0
 800e38c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e390:	6018      	str	r0, [r3, #0]
 800e392:	9b07      	ldr	r3, [sp, #28]
 800e394:	2b0e      	cmp	r3, #14
 800e396:	f200 80a4 	bhi.w	800e4e2 <_dtoa_r+0x442>
 800e39a:	2c00      	cmp	r4, #0
 800e39c:	f000 80a1 	beq.w	800e4e2 <_dtoa_r+0x442>
 800e3a0:	2f00      	cmp	r7, #0
 800e3a2:	dd33      	ble.n	800e40c <_dtoa_r+0x36c>
 800e3a4:	4bad      	ldr	r3, [pc, #692]	@ (800e65c <_dtoa_r+0x5bc>)
 800e3a6:	f007 020f 	and.w	r2, r7, #15
 800e3aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3ae:	ed93 7b00 	vldr	d7, [r3]
 800e3b2:	05f8      	lsls	r0, r7, #23
 800e3b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e3b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e3bc:	d516      	bpl.n	800e3ec <_dtoa_r+0x34c>
 800e3be:	4ba8      	ldr	r3, [pc, #672]	@ (800e660 <_dtoa_r+0x5c0>)
 800e3c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e3c8:	f7f2 fa40 	bl	800084c <__aeabi_ddiv>
 800e3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3d0:	f004 040f 	and.w	r4, r4, #15
 800e3d4:	2603      	movs	r6, #3
 800e3d6:	4da2      	ldr	r5, [pc, #648]	@ (800e660 <_dtoa_r+0x5c0>)
 800e3d8:	b954      	cbnz	r4, 800e3f0 <_dtoa_r+0x350>
 800e3da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3e2:	f7f2 fa33 	bl	800084c <__aeabi_ddiv>
 800e3e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3ea:	e028      	b.n	800e43e <_dtoa_r+0x39e>
 800e3ec:	2602      	movs	r6, #2
 800e3ee:	e7f2      	b.n	800e3d6 <_dtoa_r+0x336>
 800e3f0:	07e1      	lsls	r1, r4, #31
 800e3f2:	d508      	bpl.n	800e406 <_dtoa_r+0x366>
 800e3f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e3fc:	f7f2 f8fc 	bl	80005f8 <__aeabi_dmul>
 800e400:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e404:	3601      	adds	r6, #1
 800e406:	1064      	asrs	r4, r4, #1
 800e408:	3508      	adds	r5, #8
 800e40a:	e7e5      	b.n	800e3d8 <_dtoa_r+0x338>
 800e40c:	f000 80d2 	beq.w	800e5b4 <_dtoa_r+0x514>
 800e410:	427c      	negs	r4, r7
 800e412:	4b92      	ldr	r3, [pc, #584]	@ (800e65c <_dtoa_r+0x5bc>)
 800e414:	4d92      	ldr	r5, [pc, #584]	@ (800e660 <_dtoa_r+0x5c0>)
 800e416:	f004 020f 	and.w	r2, r4, #15
 800e41a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e422:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e426:	f7f2 f8e7 	bl	80005f8 <__aeabi_dmul>
 800e42a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e42e:	1124      	asrs	r4, r4, #4
 800e430:	2300      	movs	r3, #0
 800e432:	2602      	movs	r6, #2
 800e434:	2c00      	cmp	r4, #0
 800e436:	f040 80b2 	bne.w	800e59e <_dtoa_r+0x4fe>
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d1d3      	bne.n	800e3e6 <_dtoa_r+0x346>
 800e43e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e440:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e444:	2b00      	cmp	r3, #0
 800e446:	f000 80b7 	beq.w	800e5b8 <_dtoa_r+0x518>
 800e44a:	4b86      	ldr	r3, [pc, #536]	@ (800e664 <_dtoa_r+0x5c4>)
 800e44c:	2200      	movs	r2, #0
 800e44e:	4620      	mov	r0, r4
 800e450:	4629      	mov	r1, r5
 800e452:	f7f2 fb43 	bl	8000adc <__aeabi_dcmplt>
 800e456:	2800      	cmp	r0, #0
 800e458:	f000 80ae 	beq.w	800e5b8 <_dtoa_r+0x518>
 800e45c:	9b07      	ldr	r3, [sp, #28]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	f000 80aa 	beq.w	800e5b8 <_dtoa_r+0x518>
 800e464:	9b00      	ldr	r3, [sp, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	dd37      	ble.n	800e4da <_dtoa_r+0x43a>
 800e46a:	1e7b      	subs	r3, r7, #1
 800e46c:	9304      	str	r3, [sp, #16]
 800e46e:	4620      	mov	r0, r4
 800e470:	4b7d      	ldr	r3, [pc, #500]	@ (800e668 <_dtoa_r+0x5c8>)
 800e472:	2200      	movs	r2, #0
 800e474:	4629      	mov	r1, r5
 800e476:	f7f2 f8bf 	bl	80005f8 <__aeabi_dmul>
 800e47a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e47e:	9c00      	ldr	r4, [sp, #0]
 800e480:	3601      	adds	r6, #1
 800e482:	4630      	mov	r0, r6
 800e484:	f7f2 f84e 	bl	8000524 <__aeabi_i2d>
 800e488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e48c:	f7f2 f8b4 	bl	80005f8 <__aeabi_dmul>
 800e490:	4b76      	ldr	r3, [pc, #472]	@ (800e66c <_dtoa_r+0x5cc>)
 800e492:	2200      	movs	r2, #0
 800e494:	f7f1 fefa 	bl	800028c <__adddf3>
 800e498:	4605      	mov	r5, r0
 800e49a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e49e:	2c00      	cmp	r4, #0
 800e4a0:	f040 808d 	bne.w	800e5be <_dtoa_r+0x51e>
 800e4a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4a8:	4b71      	ldr	r3, [pc, #452]	@ (800e670 <_dtoa_r+0x5d0>)
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f7f1 feec 	bl	8000288 <__aeabi_dsub>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e4b8:	462a      	mov	r2, r5
 800e4ba:	4633      	mov	r3, r6
 800e4bc:	f7f2 fb2c 	bl	8000b18 <__aeabi_dcmpgt>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	f040 828b 	bne.w	800e9dc <_dtoa_r+0x93c>
 800e4c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4ca:	462a      	mov	r2, r5
 800e4cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e4d0:	f7f2 fb04 	bl	8000adc <__aeabi_dcmplt>
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	f040 8128 	bne.w	800e72a <_dtoa_r+0x68a>
 800e4da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e4de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e4e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f2c0 815a 	blt.w	800e79e <_dtoa_r+0x6fe>
 800e4ea:	2f0e      	cmp	r7, #14
 800e4ec:	f300 8157 	bgt.w	800e79e <_dtoa_r+0x6fe>
 800e4f0:	4b5a      	ldr	r3, [pc, #360]	@ (800e65c <_dtoa_r+0x5bc>)
 800e4f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e4f6:	ed93 7b00 	vldr	d7, [r3]
 800e4fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	ed8d 7b00 	vstr	d7, [sp]
 800e502:	da03      	bge.n	800e50c <_dtoa_r+0x46c>
 800e504:	9b07      	ldr	r3, [sp, #28]
 800e506:	2b00      	cmp	r3, #0
 800e508:	f340 8101 	ble.w	800e70e <_dtoa_r+0x66e>
 800e50c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e510:	4656      	mov	r6, sl
 800e512:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e516:	4620      	mov	r0, r4
 800e518:	4629      	mov	r1, r5
 800e51a:	f7f2 f997 	bl	800084c <__aeabi_ddiv>
 800e51e:	f7f2 fb1b 	bl	8000b58 <__aeabi_d2iz>
 800e522:	4680      	mov	r8, r0
 800e524:	f7f1 fffe 	bl	8000524 <__aeabi_i2d>
 800e528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e52c:	f7f2 f864 	bl	80005f8 <__aeabi_dmul>
 800e530:	4602      	mov	r2, r0
 800e532:	460b      	mov	r3, r1
 800e534:	4620      	mov	r0, r4
 800e536:	4629      	mov	r1, r5
 800e538:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e53c:	f7f1 fea4 	bl	8000288 <__aeabi_dsub>
 800e540:	f806 4b01 	strb.w	r4, [r6], #1
 800e544:	9d07      	ldr	r5, [sp, #28]
 800e546:	eba6 040a 	sub.w	r4, r6, sl
 800e54a:	42a5      	cmp	r5, r4
 800e54c:	4602      	mov	r2, r0
 800e54e:	460b      	mov	r3, r1
 800e550:	f040 8117 	bne.w	800e782 <_dtoa_r+0x6e2>
 800e554:	f7f1 fe9a 	bl	800028c <__adddf3>
 800e558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e55c:	4604      	mov	r4, r0
 800e55e:	460d      	mov	r5, r1
 800e560:	f7f2 fada 	bl	8000b18 <__aeabi_dcmpgt>
 800e564:	2800      	cmp	r0, #0
 800e566:	f040 80f9 	bne.w	800e75c <_dtoa_r+0x6bc>
 800e56a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e56e:	4620      	mov	r0, r4
 800e570:	4629      	mov	r1, r5
 800e572:	f7f2 faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e576:	b118      	cbz	r0, 800e580 <_dtoa_r+0x4e0>
 800e578:	f018 0f01 	tst.w	r8, #1
 800e57c:	f040 80ee 	bne.w	800e75c <_dtoa_r+0x6bc>
 800e580:	4649      	mov	r1, r9
 800e582:	4658      	mov	r0, fp
 800e584:	f000 fc90 	bl	800eea8 <_Bfree>
 800e588:	2300      	movs	r3, #0
 800e58a:	7033      	strb	r3, [r6, #0]
 800e58c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e58e:	3701      	adds	r7, #1
 800e590:	601f      	str	r7, [r3, #0]
 800e592:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e594:	2b00      	cmp	r3, #0
 800e596:	f000 831d 	beq.w	800ebd4 <_dtoa_r+0xb34>
 800e59a:	601e      	str	r6, [r3, #0]
 800e59c:	e31a      	b.n	800ebd4 <_dtoa_r+0xb34>
 800e59e:	07e2      	lsls	r2, r4, #31
 800e5a0:	d505      	bpl.n	800e5ae <_dtoa_r+0x50e>
 800e5a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e5a6:	f7f2 f827 	bl	80005f8 <__aeabi_dmul>
 800e5aa:	3601      	adds	r6, #1
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	1064      	asrs	r4, r4, #1
 800e5b0:	3508      	adds	r5, #8
 800e5b2:	e73f      	b.n	800e434 <_dtoa_r+0x394>
 800e5b4:	2602      	movs	r6, #2
 800e5b6:	e742      	b.n	800e43e <_dtoa_r+0x39e>
 800e5b8:	9c07      	ldr	r4, [sp, #28]
 800e5ba:	9704      	str	r7, [sp, #16]
 800e5bc:	e761      	b.n	800e482 <_dtoa_r+0x3e2>
 800e5be:	4b27      	ldr	r3, [pc, #156]	@ (800e65c <_dtoa_r+0x5bc>)
 800e5c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e5c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e5c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e5ca:	4454      	add	r4, sl
 800e5cc:	2900      	cmp	r1, #0
 800e5ce:	d053      	beq.n	800e678 <_dtoa_r+0x5d8>
 800e5d0:	4928      	ldr	r1, [pc, #160]	@ (800e674 <_dtoa_r+0x5d4>)
 800e5d2:	2000      	movs	r0, #0
 800e5d4:	f7f2 f93a 	bl	800084c <__aeabi_ddiv>
 800e5d8:	4633      	mov	r3, r6
 800e5da:	462a      	mov	r2, r5
 800e5dc:	f7f1 fe54 	bl	8000288 <__aeabi_dsub>
 800e5e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e5e4:	4656      	mov	r6, sl
 800e5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5ea:	f7f2 fab5 	bl	8000b58 <__aeabi_d2iz>
 800e5ee:	4605      	mov	r5, r0
 800e5f0:	f7f1 ff98 	bl	8000524 <__aeabi_i2d>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5fc:	f7f1 fe44 	bl	8000288 <__aeabi_dsub>
 800e600:	3530      	adds	r5, #48	@ 0x30
 800e602:	4602      	mov	r2, r0
 800e604:	460b      	mov	r3, r1
 800e606:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e60a:	f806 5b01 	strb.w	r5, [r6], #1
 800e60e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e612:	f7f2 fa63 	bl	8000adc <__aeabi_dcmplt>
 800e616:	2800      	cmp	r0, #0
 800e618:	d171      	bne.n	800e6fe <_dtoa_r+0x65e>
 800e61a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e61e:	4911      	ldr	r1, [pc, #68]	@ (800e664 <_dtoa_r+0x5c4>)
 800e620:	2000      	movs	r0, #0
 800e622:	f7f1 fe31 	bl	8000288 <__aeabi_dsub>
 800e626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e62a:	f7f2 fa57 	bl	8000adc <__aeabi_dcmplt>
 800e62e:	2800      	cmp	r0, #0
 800e630:	f040 8095 	bne.w	800e75e <_dtoa_r+0x6be>
 800e634:	42a6      	cmp	r6, r4
 800e636:	f43f af50 	beq.w	800e4da <_dtoa_r+0x43a>
 800e63a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e63e:	4b0a      	ldr	r3, [pc, #40]	@ (800e668 <_dtoa_r+0x5c8>)
 800e640:	2200      	movs	r2, #0
 800e642:	f7f1 ffd9 	bl	80005f8 <__aeabi_dmul>
 800e646:	4b08      	ldr	r3, [pc, #32]	@ (800e668 <_dtoa_r+0x5c8>)
 800e648:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e64c:	2200      	movs	r2, #0
 800e64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e652:	f7f1 ffd1 	bl	80005f8 <__aeabi_dmul>
 800e656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e65a:	e7c4      	b.n	800e5e6 <_dtoa_r+0x546>
 800e65c:	08012d28 	.word	0x08012d28
 800e660:	08012d00 	.word	0x08012d00
 800e664:	3ff00000 	.word	0x3ff00000
 800e668:	40240000 	.word	0x40240000
 800e66c:	401c0000 	.word	0x401c0000
 800e670:	40140000 	.word	0x40140000
 800e674:	3fe00000 	.word	0x3fe00000
 800e678:	4631      	mov	r1, r6
 800e67a:	4628      	mov	r0, r5
 800e67c:	f7f1 ffbc 	bl	80005f8 <__aeabi_dmul>
 800e680:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e684:	9415      	str	r4, [sp, #84]	@ 0x54
 800e686:	4656      	mov	r6, sl
 800e688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e68c:	f7f2 fa64 	bl	8000b58 <__aeabi_d2iz>
 800e690:	4605      	mov	r5, r0
 800e692:	f7f1 ff47 	bl	8000524 <__aeabi_i2d>
 800e696:	4602      	mov	r2, r0
 800e698:	460b      	mov	r3, r1
 800e69a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e69e:	f7f1 fdf3 	bl	8000288 <__aeabi_dsub>
 800e6a2:	3530      	adds	r5, #48	@ 0x30
 800e6a4:	f806 5b01 	strb.w	r5, [r6], #1
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	42a6      	cmp	r6, r4
 800e6ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e6b2:	f04f 0200 	mov.w	r2, #0
 800e6b6:	d124      	bne.n	800e702 <_dtoa_r+0x662>
 800e6b8:	4bac      	ldr	r3, [pc, #688]	@ (800e96c <_dtoa_r+0x8cc>)
 800e6ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e6be:	f7f1 fde5 	bl	800028c <__adddf3>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	460b      	mov	r3, r1
 800e6c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6ca:	f7f2 fa25 	bl	8000b18 <__aeabi_dcmpgt>
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d145      	bne.n	800e75e <_dtoa_r+0x6be>
 800e6d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e6d6:	49a5      	ldr	r1, [pc, #660]	@ (800e96c <_dtoa_r+0x8cc>)
 800e6d8:	2000      	movs	r0, #0
 800e6da:	f7f1 fdd5 	bl	8000288 <__aeabi_dsub>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6e6:	f7f2 f9f9 	bl	8000adc <__aeabi_dcmplt>
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	f43f aef5 	beq.w	800e4da <_dtoa_r+0x43a>
 800e6f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e6f2:	1e73      	subs	r3, r6, #1
 800e6f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e6f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e6fa:	2b30      	cmp	r3, #48	@ 0x30
 800e6fc:	d0f8      	beq.n	800e6f0 <_dtoa_r+0x650>
 800e6fe:	9f04      	ldr	r7, [sp, #16]
 800e700:	e73e      	b.n	800e580 <_dtoa_r+0x4e0>
 800e702:	4b9b      	ldr	r3, [pc, #620]	@ (800e970 <_dtoa_r+0x8d0>)
 800e704:	f7f1 ff78 	bl	80005f8 <__aeabi_dmul>
 800e708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e70c:	e7bc      	b.n	800e688 <_dtoa_r+0x5e8>
 800e70e:	d10c      	bne.n	800e72a <_dtoa_r+0x68a>
 800e710:	4b98      	ldr	r3, [pc, #608]	@ (800e974 <_dtoa_r+0x8d4>)
 800e712:	2200      	movs	r2, #0
 800e714:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e718:	f7f1 ff6e 	bl	80005f8 <__aeabi_dmul>
 800e71c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e720:	f7f2 f9f0 	bl	8000b04 <__aeabi_dcmpge>
 800e724:	2800      	cmp	r0, #0
 800e726:	f000 8157 	beq.w	800e9d8 <_dtoa_r+0x938>
 800e72a:	2400      	movs	r4, #0
 800e72c:	4625      	mov	r5, r4
 800e72e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e730:	43db      	mvns	r3, r3
 800e732:	9304      	str	r3, [sp, #16]
 800e734:	4656      	mov	r6, sl
 800e736:	2700      	movs	r7, #0
 800e738:	4621      	mov	r1, r4
 800e73a:	4658      	mov	r0, fp
 800e73c:	f000 fbb4 	bl	800eea8 <_Bfree>
 800e740:	2d00      	cmp	r5, #0
 800e742:	d0dc      	beq.n	800e6fe <_dtoa_r+0x65e>
 800e744:	b12f      	cbz	r7, 800e752 <_dtoa_r+0x6b2>
 800e746:	42af      	cmp	r7, r5
 800e748:	d003      	beq.n	800e752 <_dtoa_r+0x6b2>
 800e74a:	4639      	mov	r1, r7
 800e74c:	4658      	mov	r0, fp
 800e74e:	f000 fbab 	bl	800eea8 <_Bfree>
 800e752:	4629      	mov	r1, r5
 800e754:	4658      	mov	r0, fp
 800e756:	f000 fba7 	bl	800eea8 <_Bfree>
 800e75a:	e7d0      	b.n	800e6fe <_dtoa_r+0x65e>
 800e75c:	9704      	str	r7, [sp, #16]
 800e75e:	4633      	mov	r3, r6
 800e760:	461e      	mov	r6, r3
 800e762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e766:	2a39      	cmp	r2, #57	@ 0x39
 800e768:	d107      	bne.n	800e77a <_dtoa_r+0x6da>
 800e76a:	459a      	cmp	sl, r3
 800e76c:	d1f8      	bne.n	800e760 <_dtoa_r+0x6c0>
 800e76e:	9a04      	ldr	r2, [sp, #16]
 800e770:	3201      	adds	r2, #1
 800e772:	9204      	str	r2, [sp, #16]
 800e774:	2230      	movs	r2, #48	@ 0x30
 800e776:	f88a 2000 	strb.w	r2, [sl]
 800e77a:	781a      	ldrb	r2, [r3, #0]
 800e77c:	3201      	adds	r2, #1
 800e77e:	701a      	strb	r2, [r3, #0]
 800e780:	e7bd      	b.n	800e6fe <_dtoa_r+0x65e>
 800e782:	4b7b      	ldr	r3, [pc, #492]	@ (800e970 <_dtoa_r+0x8d0>)
 800e784:	2200      	movs	r2, #0
 800e786:	f7f1 ff37 	bl	80005f8 <__aeabi_dmul>
 800e78a:	2200      	movs	r2, #0
 800e78c:	2300      	movs	r3, #0
 800e78e:	4604      	mov	r4, r0
 800e790:	460d      	mov	r5, r1
 800e792:	f7f2 f999 	bl	8000ac8 <__aeabi_dcmpeq>
 800e796:	2800      	cmp	r0, #0
 800e798:	f43f aebb 	beq.w	800e512 <_dtoa_r+0x472>
 800e79c:	e6f0      	b.n	800e580 <_dtoa_r+0x4e0>
 800e79e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e7a0:	2a00      	cmp	r2, #0
 800e7a2:	f000 80db 	beq.w	800e95c <_dtoa_r+0x8bc>
 800e7a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7a8:	2a01      	cmp	r2, #1
 800e7aa:	f300 80bf 	bgt.w	800e92c <_dtoa_r+0x88c>
 800e7ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e7b0:	2a00      	cmp	r2, #0
 800e7b2:	f000 80b7 	beq.w	800e924 <_dtoa_r+0x884>
 800e7b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e7ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e7bc:	4646      	mov	r6, r8
 800e7be:	9a08      	ldr	r2, [sp, #32]
 800e7c0:	2101      	movs	r1, #1
 800e7c2:	441a      	add	r2, r3
 800e7c4:	4658      	mov	r0, fp
 800e7c6:	4498      	add	r8, r3
 800e7c8:	9208      	str	r2, [sp, #32]
 800e7ca:	f000 fc6b 	bl	800f0a4 <__i2b>
 800e7ce:	4605      	mov	r5, r0
 800e7d0:	b15e      	cbz	r6, 800e7ea <_dtoa_r+0x74a>
 800e7d2:	9b08      	ldr	r3, [sp, #32]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	dd08      	ble.n	800e7ea <_dtoa_r+0x74a>
 800e7d8:	42b3      	cmp	r3, r6
 800e7da:	9a08      	ldr	r2, [sp, #32]
 800e7dc:	bfa8      	it	ge
 800e7de:	4633      	movge	r3, r6
 800e7e0:	eba8 0803 	sub.w	r8, r8, r3
 800e7e4:	1af6      	subs	r6, r6, r3
 800e7e6:	1ad3      	subs	r3, r2, r3
 800e7e8:	9308      	str	r3, [sp, #32]
 800e7ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7ec:	b1f3      	cbz	r3, 800e82c <_dtoa_r+0x78c>
 800e7ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f000 80b7 	beq.w	800e964 <_dtoa_r+0x8c4>
 800e7f6:	b18c      	cbz	r4, 800e81c <_dtoa_r+0x77c>
 800e7f8:	4629      	mov	r1, r5
 800e7fa:	4622      	mov	r2, r4
 800e7fc:	4658      	mov	r0, fp
 800e7fe:	f000 fd11 	bl	800f224 <__pow5mult>
 800e802:	464a      	mov	r2, r9
 800e804:	4601      	mov	r1, r0
 800e806:	4605      	mov	r5, r0
 800e808:	4658      	mov	r0, fp
 800e80a:	f000 fc61 	bl	800f0d0 <__multiply>
 800e80e:	4649      	mov	r1, r9
 800e810:	9004      	str	r0, [sp, #16]
 800e812:	4658      	mov	r0, fp
 800e814:	f000 fb48 	bl	800eea8 <_Bfree>
 800e818:	9b04      	ldr	r3, [sp, #16]
 800e81a:	4699      	mov	r9, r3
 800e81c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e81e:	1b1a      	subs	r2, r3, r4
 800e820:	d004      	beq.n	800e82c <_dtoa_r+0x78c>
 800e822:	4649      	mov	r1, r9
 800e824:	4658      	mov	r0, fp
 800e826:	f000 fcfd 	bl	800f224 <__pow5mult>
 800e82a:	4681      	mov	r9, r0
 800e82c:	2101      	movs	r1, #1
 800e82e:	4658      	mov	r0, fp
 800e830:	f000 fc38 	bl	800f0a4 <__i2b>
 800e834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e836:	4604      	mov	r4, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f000 81cf 	beq.w	800ebdc <_dtoa_r+0xb3c>
 800e83e:	461a      	mov	r2, r3
 800e840:	4601      	mov	r1, r0
 800e842:	4658      	mov	r0, fp
 800e844:	f000 fcee 	bl	800f224 <__pow5mult>
 800e848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	4604      	mov	r4, r0
 800e84e:	f300 8095 	bgt.w	800e97c <_dtoa_r+0x8dc>
 800e852:	9b02      	ldr	r3, [sp, #8]
 800e854:	2b00      	cmp	r3, #0
 800e856:	f040 8087 	bne.w	800e968 <_dtoa_r+0x8c8>
 800e85a:	9b03      	ldr	r3, [sp, #12]
 800e85c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e860:	2b00      	cmp	r3, #0
 800e862:	f040 8089 	bne.w	800e978 <_dtoa_r+0x8d8>
 800e866:	9b03      	ldr	r3, [sp, #12]
 800e868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e86c:	0d1b      	lsrs	r3, r3, #20
 800e86e:	051b      	lsls	r3, r3, #20
 800e870:	b12b      	cbz	r3, 800e87e <_dtoa_r+0x7de>
 800e872:	9b08      	ldr	r3, [sp, #32]
 800e874:	3301      	adds	r3, #1
 800e876:	9308      	str	r3, [sp, #32]
 800e878:	f108 0801 	add.w	r8, r8, #1
 800e87c:	2301      	movs	r3, #1
 800e87e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e882:	2b00      	cmp	r3, #0
 800e884:	f000 81b0 	beq.w	800ebe8 <_dtoa_r+0xb48>
 800e888:	6923      	ldr	r3, [r4, #16]
 800e88a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e88e:	6918      	ldr	r0, [r3, #16]
 800e890:	f000 fbbc 	bl	800f00c <__hi0bits>
 800e894:	f1c0 0020 	rsb	r0, r0, #32
 800e898:	9b08      	ldr	r3, [sp, #32]
 800e89a:	4418      	add	r0, r3
 800e89c:	f010 001f 	ands.w	r0, r0, #31
 800e8a0:	d077      	beq.n	800e992 <_dtoa_r+0x8f2>
 800e8a2:	f1c0 0320 	rsb	r3, r0, #32
 800e8a6:	2b04      	cmp	r3, #4
 800e8a8:	dd6b      	ble.n	800e982 <_dtoa_r+0x8e2>
 800e8aa:	9b08      	ldr	r3, [sp, #32]
 800e8ac:	f1c0 001c 	rsb	r0, r0, #28
 800e8b0:	4403      	add	r3, r0
 800e8b2:	4480      	add	r8, r0
 800e8b4:	4406      	add	r6, r0
 800e8b6:	9308      	str	r3, [sp, #32]
 800e8b8:	f1b8 0f00 	cmp.w	r8, #0
 800e8bc:	dd05      	ble.n	800e8ca <_dtoa_r+0x82a>
 800e8be:	4649      	mov	r1, r9
 800e8c0:	4642      	mov	r2, r8
 800e8c2:	4658      	mov	r0, fp
 800e8c4:	f000 fd08 	bl	800f2d8 <__lshift>
 800e8c8:	4681      	mov	r9, r0
 800e8ca:	9b08      	ldr	r3, [sp, #32]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	dd05      	ble.n	800e8dc <_dtoa_r+0x83c>
 800e8d0:	4621      	mov	r1, r4
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	4658      	mov	r0, fp
 800e8d6:	f000 fcff 	bl	800f2d8 <__lshift>
 800e8da:	4604      	mov	r4, r0
 800e8dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d059      	beq.n	800e996 <_dtoa_r+0x8f6>
 800e8e2:	4621      	mov	r1, r4
 800e8e4:	4648      	mov	r0, r9
 800e8e6:	f000 fd63 	bl	800f3b0 <__mcmp>
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	da53      	bge.n	800e996 <_dtoa_r+0x8f6>
 800e8ee:	1e7b      	subs	r3, r7, #1
 800e8f0:	9304      	str	r3, [sp, #16]
 800e8f2:	4649      	mov	r1, r9
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	220a      	movs	r2, #10
 800e8f8:	4658      	mov	r0, fp
 800e8fa:	f000 faf7 	bl	800eeec <__multadd>
 800e8fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e900:	4681      	mov	r9, r0
 800e902:	2b00      	cmp	r3, #0
 800e904:	f000 8172 	beq.w	800ebec <_dtoa_r+0xb4c>
 800e908:	2300      	movs	r3, #0
 800e90a:	4629      	mov	r1, r5
 800e90c:	220a      	movs	r2, #10
 800e90e:	4658      	mov	r0, fp
 800e910:	f000 faec 	bl	800eeec <__multadd>
 800e914:	9b00      	ldr	r3, [sp, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	4605      	mov	r5, r0
 800e91a:	dc67      	bgt.n	800e9ec <_dtoa_r+0x94c>
 800e91c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e91e:	2b02      	cmp	r3, #2
 800e920:	dc41      	bgt.n	800e9a6 <_dtoa_r+0x906>
 800e922:	e063      	b.n	800e9ec <_dtoa_r+0x94c>
 800e924:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e926:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e92a:	e746      	b.n	800e7ba <_dtoa_r+0x71a>
 800e92c:	9b07      	ldr	r3, [sp, #28]
 800e92e:	1e5c      	subs	r4, r3, #1
 800e930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e932:	42a3      	cmp	r3, r4
 800e934:	bfbf      	itttt	lt
 800e936:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e938:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e93a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e93c:	1ae3      	sublt	r3, r4, r3
 800e93e:	bfb4      	ite	lt
 800e940:	18d2      	addlt	r2, r2, r3
 800e942:	1b1c      	subge	r4, r3, r4
 800e944:	9b07      	ldr	r3, [sp, #28]
 800e946:	bfbc      	itt	lt
 800e948:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e94a:	2400      	movlt	r4, #0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	bfb5      	itete	lt
 800e950:	eba8 0603 	sublt.w	r6, r8, r3
 800e954:	9b07      	ldrge	r3, [sp, #28]
 800e956:	2300      	movlt	r3, #0
 800e958:	4646      	movge	r6, r8
 800e95a:	e730      	b.n	800e7be <_dtoa_r+0x71e>
 800e95c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e95e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e960:	4646      	mov	r6, r8
 800e962:	e735      	b.n	800e7d0 <_dtoa_r+0x730>
 800e964:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e966:	e75c      	b.n	800e822 <_dtoa_r+0x782>
 800e968:	2300      	movs	r3, #0
 800e96a:	e788      	b.n	800e87e <_dtoa_r+0x7de>
 800e96c:	3fe00000 	.word	0x3fe00000
 800e970:	40240000 	.word	0x40240000
 800e974:	40140000 	.word	0x40140000
 800e978:	9b02      	ldr	r3, [sp, #8]
 800e97a:	e780      	b.n	800e87e <_dtoa_r+0x7de>
 800e97c:	2300      	movs	r3, #0
 800e97e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e980:	e782      	b.n	800e888 <_dtoa_r+0x7e8>
 800e982:	d099      	beq.n	800e8b8 <_dtoa_r+0x818>
 800e984:	9a08      	ldr	r2, [sp, #32]
 800e986:	331c      	adds	r3, #28
 800e988:	441a      	add	r2, r3
 800e98a:	4498      	add	r8, r3
 800e98c:	441e      	add	r6, r3
 800e98e:	9208      	str	r2, [sp, #32]
 800e990:	e792      	b.n	800e8b8 <_dtoa_r+0x818>
 800e992:	4603      	mov	r3, r0
 800e994:	e7f6      	b.n	800e984 <_dtoa_r+0x8e4>
 800e996:	9b07      	ldr	r3, [sp, #28]
 800e998:	9704      	str	r7, [sp, #16]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	dc20      	bgt.n	800e9e0 <_dtoa_r+0x940>
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9a2:	2b02      	cmp	r3, #2
 800e9a4:	dd1e      	ble.n	800e9e4 <_dtoa_r+0x944>
 800e9a6:	9b00      	ldr	r3, [sp, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f47f aec0 	bne.w	800e72e <_dtoa_r+0x68e>
 800e9ae:	4621      	mov	r1, r4
 800e9b0:	2205      	movs	r2, #5
 800e9b2:	4658      	mov	r0, fp
 800e9b4:	f000 fa9a 	bl	800eeec <__multadd>
 800e9b8:	4601      	mov	r1, r0
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	4648      	mov	r0, r9
 800e9be:	f000 fcf7 	bl	800f3b0 <__mcmp>
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	f77f aeb3 	ble.w	800e72e <_dtoa_r+0x68e>
 800e9c8:	4656      	mov	r6, sl
 800e9ca:	2331      	movs	r3, #49	@ 0x31
 800e9cc:	f806 3b01 	strb.w	r3, [r6], #1
 800e9d0:	9b04      	ldr	r3, [sp, #16]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	9304      	str	r3, [sp, #16]
 800e9d6:	e6ae      	b.n	800e736 <_dtoa_r+0x696>
 800e9d8:	9c07      	ldr	r4, [sp, #28]
 800e9da:	9704      	str	r7, [sp, #16]
 800e9dc:	4625      	mov	r5, r4
 800e9de:	e7f3      	b.n	800e9c8 <_dtoa_r+0x928>
 800e9e0:	9b07      	ldr	r3, [sp, #28]
 800e9e2:	9300      	str	r3, [sp, #0]
 800e9e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	f000 8104 	beq.w	800ebf4 <_dtoa_r+0xb54>
 800e9ec:	2e00      	cmp	r6, #0
 800e9ee:	dd05      	ble.n	800e9fc <_dtoa_r+0x95c>
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	4632      	mov	r2, r6
 800e9f4:	4658      	mov	r0, fp
 800e9f6:	f000 fc6f 	bl	800f2d8 <__lshift>
 800e9fa:	4605      	mov	r5, r0
 800e9fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d05a      	beq.n	800eab8 <_dtoa_r+0xa18>
 800ea02:	6869      	ldr	r1, [r5, #4]
 800ea04:	4658      	mov	r0, fp
 800ea06:	f000 fa0f 	bl	800ee28 <_Balloc>
 800ea0a:	4606      	mov	r6, r0
 800ea0c:	b928      	cbnz	r0, 800ea1a <_dtoa_r+0x97a>
 800ea0e:	4b84      	ldr	r3, [pc, #528]	@ (800ec20 <_dtoa_r+0xb80>)
 800ea10:	4602      	mov	r2, r0
 800ea12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ea16:	f7ff bb5a 	b.w	800e0ce <_dtoa_r+0x2e>
 800ea1a:	692a      	ldr	r2, [r5, #16]
 800ea1c:	3202      	adds	r2, #2
 800ea1e:	0092      	lsls	r2, r2, #2
 800ea20:	f105 010c 	add.w	r1, r5, #12
 800ea24:	300c      	adds	r0, #12
 800ea26:	f7ff fa9c 	bl	800df62 <memcpy>
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	4631      	mov	r1, r6
 800ea2e:	4658      	mov	r0, fp
 800ea30:	f000 fc52 	bl	800f2d8 <__lshift>
 800ea34:	f10a 0301 	add.w	r3, sl, #1
 800ea38:	9307      	str	r3, [sp, #28]
 800ea3a:	9b00      	ldr	r3, [sp, #0]
 800ea3c:	4453      	add	r3, sl
 800ea3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ea40:	9b02      	ldr	r3, [sp, #8]
 800ea42:	f003 0301 	and.w	r3, r3, #1
 800ea46:	462f      	mov	r7, r5
 800ea48:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea4a:	4605      	mov	r5, r0
 800ea4c:	9b07      	ldr	r3, [sp, #28]
 800ea4e:	4621      	mov	r1, r4
 800ea50:	3b01      	subs	r3, #1
 800ea52:	4648      	mov	r0, r9
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	f7ff fa99 	bl	800df8c <quorem>
 800ea5a:	4639      	mov	r1, r7
 800ea5c:	9002      	str	r0, [sp, #8]
 800ea5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ea62:	4648      	mov	r0, r9
 800ea64:	f000 fca4 	bl	800f3b0 <__mcmp>
 800ea68:	462a      	mov	r2, r5
 800ea6a:	9008      	str	r0, [sp, #32]
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	4658      	mov	r0, fp
 800ea70:	f000 fcba 	bl	800f3e8 <__mdiff>
 800ea74:	68c2      	ldr	r2, [r0, #12]
 800ea76:	4606      	mov	r6, r0
 800ea78:	bb02      	cbnz	r2, 800eabc <_dtoa_r+0xa1c>
 800ea7a:	4601      	mov	r1, r0
 800ea7c:	4648      	mov	r0, r9
 800ea7e:	f000 fc97 	bl	800f3b0 <__mcmp>
 800ea82:	4602      	mov	r2, r0
 800ea84:	4631      	mov	r1, r6
 800ea86:	4658      	mov	r0, fp
 800ea88:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea8a:	f000 fa0d 	bl	800eea8 <_Bfree>
 800ea8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea92:	9e07      	ldr	r6, [sp, #28]
 800ea94:	ea43 0102 	orr.w	r1, r3, r2
 800ea98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea9a:	4319      	orrs	r1, r3
 800ea9c:	d110      	bne.n	800eac0 <_dtoa_r+0xa20>
 800ea9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eaa2:	d029      	beq.n	800eaf8 <_dtoa_r+0xa58>
 800eaa4:	9b08      	ldr	r3, [sp, #32]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	dd02      	ble.n	800eab0 <_dtoa_r+0xa10>
 800eaaa:	9b02      	ldr	r3, [sp, #8]
 800eaac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800eab0:	9b00      	ldr	r3, [sp, #0]
 800eab2:	f883 8000 	strb.w	r8, [r3]
 800eab6:	e63f      	b.n	800e738 <_dtoa_r+0x698>
 800eab8:	4628      	mov	r0, r5
 800eaba:	e7bb      	b.n	800ea34 <_dtoa_r+0x994>
 800eabc:	2201      	movs	r2, #1
 800eabe:	e7e1      	b.n	800ea84 <_dtoa_r+0x9e4>
 800eac0:	9b08      	ldr	r3, [sp, #32]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	db04      	blt.n	800ead0 <_dtoa_r+0xa30>
 800eac6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eac8:	430b      	orrs	r3, r1
 800eaca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eacc:	430b      	orrs	r3, r1
 800eace:	d120      	bne.n	800eb12 <_dtoa_r+0xa72>
 800ead0:	2a00      	cmp	r2, #0
 800ead2:	dded      	ble.n	800eab0 <_dtoa_r+0xa10>
 800ead4:	4649      	mov	r1, r9
 800ead6:	2201      	movs	r2, #1
 800ead8:	4658      	mov	r0, fp
 800eada:	f000 fbfd 	bl	800f2d8 <__lshift>
 800eade:	4621      	mov	r1, r4
 800eae0:	4681      	mov	r9, r0
 800eae2:	f000 fc65 	bl	800f3b0 <__mcmp>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	dc03      	bgt.n	800eaf2 <_dtoa_r+0xa52>
 800eaea:	d1e1      	bne.n	800eab0 <_dtoa_r+0xa10>
 800eaec:	f018 0f01 	tst.w	r8, #1
 800eaf0:	d0de      	beq.n	800eab0 <_dtoa_r+0xa10>
 800eaf2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eaf6:	d1d8      	bne.n	800eaaa <_dtoa_r+0xa0a>
 800eaf8:	9a00      	ldr	r2, [sp, #0]
 800eafa:	2339      	movs	r3, #57	@ 0x39
 800eafc:	7013      	strb	r3, [r2, #0]
 800eafe:	4633      	mov	r3, r6
 800eb00:	461e      	mov	r6, r3
 800eb02:	3b01      	subs	r3, #1
 800eb04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800eb08:	2a39      	cmp	r2, #57	@ 0x39
 800eb0a:	d052      	beq.n	800ebb2 <_dtoa_r+0xb12>
 800eb0c:	3201      	adds	r2, #1
 800eb0e:	701a      	strb	r2, [r3, #0]
 800eb10:	e612      	b.n	800e738 <_dtoa_r+0x698>
 800eb12:	2a00      	cmp	r2, #0
 800eb14:	dd07      	ble.n	800eb26 <_dtoa_r+0xa86>
 800eb16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eb1a:	d0ed      	beq.n	800eaf8 <_dtoa_r+0xa58>
 800eb1c:	9a00      	ldr	r2, [sp, #0]
 800eb1e:	f108 0301 	add.w	r3, r8, #1
 800eb22:	7013      	strb	r3, [r2, #0]
 800eb24:	e608      	b.n	800e738 <_dtoa_r+0x698>
 800eb26:	9b07      	ldr	r3, [sp, #28]
 800eb28:	9a07      	ldr	r2, [sp, #28]
 800eb2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800eb2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d028      	beq.n	800eb86 <_dtoa_r+0xae6>
 800eb34:	4649      	mov	r1, r9
 800eb36:	2300      	movs	r3, #0
 800eb38:	220a      	movs	r2, #10
 800eb3a:	4658      	mov	r0, fp
 800eb3c:	f000 f9d6 	bl	800eeec <__multadd>
 800eb40:	42af      	cmp	r7, r5
 800eb42:	4681      	mov	r9, r0
 800eb44:	f04f 0300 	mov.w	r3, #0
 800eb48:	f04f 020a 	mov.w	r2, #10
 800eb4c:	4639      	mov	r1, r7
 800eb4e:	4658      	mov	r0, fp
 800eb50:	d107      	bne.n	800eb62 <_dtoa_r+0xac2>
 800eb52:	f000 f9cb 	bl	800eeec <__multadd>
 800eb56:	4607      	mov	r7, r0
 800eb58:	4605      	mov	r5, r0
 800eb5a:	9b07      	ldr	r3, [sp, #28]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	9307      	str	r3, [sp, #28]
 800eb60:	e774      	b.n	800ea4c <_dtoa_r+0x9ac>
 800eb62:	f000 f9c3 	bl	800eeec <__multadd>
 800eb66:	4629      	mov	r1, r5
 800eb68:	4607      	mov	r7, r0
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	220a      	movs	r2, #10
 800eb6e:	4658      	mov	r0, fp
 800eb70:	f000 f9bc 	bl	800eeec <__multadd>
 800eb74:	4605      	mov	r5, r0
 800eb76:	e7f0      	b.n	800eb5a <_dtoa_r+0xaba>
 800eb78:	9b00      	ldr	r3, [sp, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	bfcc      	ite	gt
 800eb7e:	461e      	movgt	r6, r3
 800eb80:	2601      	movle	r6, #1
 800eb82:	4456      	add	r6, sl
 800eb84:	2700      	movs	r7, #0
 800eb86:	4649      	mov	r1, r9
 800eb88:	2201      	movs	r2, #1
 800eb8a:	4658      	mov	r0, fp
 800eb8c:	f000 fba4 	bl	800f2d8 <__lshift>
 800eb90:	4621      	mov	r1, r4
 800eb92:	4681      	mov	r9, r0
 800eb94:	f000 fc0c 	bl	800f3b0 <__mcmp>
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	dcb0      	bgt.n	800eafe <_dtoa_r+0xa5e>
 800eb9c:	d102      	bne.n	800eba4 <_dtoa_r+0xb04>
 800eb9e:	f018 0f01 	tst.w	r8, #1
 800eba2:	d1ac      	bne.n	800eafe <_dtoa_r+0xa5e>
 800eba4:	4633      	mov	r3, r6
 800eba6:	461e      	mov	r6, r3
 800eba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ebac:	2a30      	cmp	r2, #48	@ 0x30
 800ebae:	d0fa      	beq.n	800eba6 <_dtoa_r+0xb06>
 800ebb0:	e5c2      	b.n	800e738 <_dtoa_r+0x698>
 800ebb2:	459a      	cmp	sl, r3
 800ebb4:	d1a4      	bne.n	800eb00 <_dtoa_r+0xa60>
 800ebb6:	9b04      	ldr	r3, [sp, #16]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	9304      	str	r3, [sp, #16]
 800ebbc:	2331      	movs	r3, #49	@ 0x31
 800ebbe:	f88a 3000 	strb.w	r3, [sl]
 800ebc2:	e5b9      	b.n	800e738 <_dtoa_r+0x698>
 800ebc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ebc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ec24 <_dtoa_r+0xb84>
 800ebca:	b11b      	cbz	r3, 800ebd4 <_dtoa_r+0xb34>
 800ebcc:	f10a 0308 	add.w	r3, sl, #8
 800ebd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ebd2:	6013      	str	r3, [r2, #0]
 800ebd4:	4650      	mov	r0, sl
 800ebd6:	b019      	add	sp, #100	@ 0x64
 800ebd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	f77f ae37 	ble.w	800e852 <_dtoa_r+0x7b2>
 800ebe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebe8:	2001      	movs	r0, #1
 800ebea:	e655      	b.n	800e898 <_dtoa_r+0x7f8>
 800ebec:	9b00      	ldr	r3, [sp, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	f77f aed6 	ble.w	800e9a0 <_dtoa_r+0x900>
 800ebf4:	4656      	mov	r6, sl
 800ebf6:	4621      	mov	r1, r4
 800ebf8:	4648      	mov	r0, r9
 800ebfa:	f7ff f9c7 	bl	800df8c <quorem>
 800ebfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ec02:	f806 8b01 	strb.w	r8, [r6], #1
 800ec06:	9b00      	ldr	r3, [sp, #0]
 800ec08:	eba6 020a 	sub.w	r2, r6, sl
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	ddb3      	ble.n	800eb78 <_dtoa_r+0xad8>
 800ec10:	4649      	mov	r1, r9
 800ec12:	2300      	movs	r3, #0
 800ec14:	220a      	movs	r2, #10
 800ec16:	4658      	mov	r0, fp
 800ec18:	f000 f968 	bl	800eeec <__multadd>
 800ec1c:	4681      	mov	r9, r0
 800ec1e:	e7ea      	b.n	800ebf6 <_dtoa_r+0xb56>
 800ec20:	08012c85 	.word	0x08012c85
 800ec24:	08012c09 	.word	0x08012c09

0800ec28 <_free_r>:
 800ec28:	b538      	push	{r3, r4, r5, lr}
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	2900      	cmp	r1, #0
 800ec2e:	d041      	beq.n	800ecb4 <_free_r+0x8c>
 800ec30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec34:	1f0c      	subs	r4, r1, #4
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	bfb8      	it	lt
 800ec3a:	18e4      	addlt	r4, r4, r3
 800ec3c:	f000 f8e8 	bl	800ee10 <__malloc_lock>
 800ec40:	4a1d      	ldr	r2, [pc, #116]	@ (800ecb8 <_free_r+0x90>)
 800ec42:	6813      	ldr	r3, [r2, #0]
 800ec44:	b933      	cbnz	r3, 800ec54 <_free_r+0x2c>
 800ec46:	6063      	str	r3, [r4, #4]
 800ec48:	6014      	str	r4, [r2, #0]
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec50:	f000 b8e4 	b.w	800ee1c <__malloc_unlock>
 800ec54:	42a3      	cmp	r3, r4
 800ec56:	d908      	bls.n	800ec6a <_free_r+0x42>
 800ec58:	6820      	ldr	r0, [r4, #0]
 800ec5a:	1821      	adds	r1, r4, r0
 800ec5c:	428b      	cmp	r3, r1
 800ec5e:	bf01      	itttt	eq
 800ec60:	6819      	ldreq	r1, [r3, #0]
 800ec62:	685b      	ldreq	r3, [r3, #4]
 800ec64:	1809      	addeq	r1, r1, r0
 800ec66:	6021      	streq	r1, [r4, #0]
 800ec68:	e7ed      	b.n	800ec46 <_free_r+0x1e>
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	b10b      	cbz	r3, 800ec74 <_free_r+0x4c>
 800ec70:	42a3      	cmp	r3, r4
 800ec72:	d9fa      	bls.n	800ec6a <_free_r+0x42>
 800ec74:	6811      	ldr	r1, [r2, #0]
 800ec76:	1850      	adds	r0, r2, r1
 800ec78:	42a0      	cmp	r0, r4
 800ec7a:	d10b      	bne.n	800ec94 <_free_r+0x6c>
 800ec7c:	6820      	ldr	r0, [r4, #0]
 800ec7e:	4401      	add	r1, r0
 800ec80:	1850      	adds	r0, r2, r1
 800ec82:	4283      	cmp	r3, r0
 800ec84:	6011      	str	r1, [r2, #0]
 800ec86:	d1e0      	bne.n	800ec4a <_free_r+0x22>
 800ec88:	6818      	ldr	r0, [r3, #0]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	6053      	str	r3, [r2, #4]
 800ec8e:	4408      	add	r0, r1
 800ec90:	6010      	str	r0, [r2, #0]
 800ec92:	e7da      	b.n	800ec4a <_free_r+0x22>
 800ec94:	d902      	bls.n	800ec9c <_free_r+0x74>
 800ec96:	230c      	movs	r3, #12
 800ec98:	602b      	str	r3, [r5, #0]
 800ec9a:	e7d6      	b.n	800ec4a <_free_r+0x22>
 800ec9c:	6820      	ldr	r0, [r4, #0]
 800ec9e:	1821      	adds	r1, r4, r0
 800eca0:	428b      	cmp	r3, r1
 800eca2:	bf04      	itt	eq
 800eca4:	6819      	ldreq	r1, [r3, #0]
 800eca6:	685b      	ldreq	r3, [r3, #4]
 800eca8:	6063      	str	r3, [r4, #4]
 800ecaa:	bf04      	itt	eq
 800ecac:	1809      	addeq	r1, r1, r0
 800ecae:	6021      	streq	r1, [r4, #0]
 800ecb0:	6054      	str	r4, [r2, #4]
 800ecb2:	e7ca      	b.n	800ec4a <_free_r+0x22>
 800ecb4:	bd38      	pop	{r3, r4, r5, pc}
 800ecb6:	bf00      	nop
 800ecb8:	200023f0 	.word	0x200023f0

0800ecbc <malloc>:
 800ecbc:	4b02      	ldr	r3, [pc, #8]	@ (800ecc8 <malloc+0xc>)
 800ecbe:	4601      	mov	r1, r0
 800ecc0:	6818      	ldr	r0, [r3, #0]
 800ecc2:	f000 b825 	b.w	800ed10 <_malloc_r>
 800ecc6:	bf00      	nop
 800ecc8:	20000144 	.word	0x20000144

0800eccc <sbrk_aligned>:
 800eccc:	b570      	push	{r4, r5, r6, lr}
 800ecce:	4e0f      	ldr	r6, [pc, #60]	@ (800ed0c <sbrk_aligned+0x40>)
 800ecd0:	460c      	mov	r4, r1
 800ecd2:	6831      	ldr	r1, [r6, #0]
 800ecd4:	4605      	mov	r5, r0
 800ecd6:	b911      	cbnz	r1, 800ecde <sbrk_aligned+0x12>
 800ecd8:	f001 fe0c 	bl	80108f4 <_sbrk_r>
 800ecdc:	6030      	str	r0, [r6, #0]
 800ecde:	4621      	mov	r1, r4
 800ece0:	4628      	mov	r0, r5
 800ece2:	f001 fe07 	bl	80108f4 <_sbrk_r>
 800ece6:	1c43      	adds	r3, r0, #1
 800ece8:	d103      	bne.n	800ecf2 <sbrk_aligned+0x26>
 800ecea:	f04f 34ff 	mov.w	r4, #4294967295
 800ecee:	4620      	mov	r0, r4
 800ecf0:	bd70      	pop	{r4, r5, r6, pc}
 800ecf2:	1cc4      	adds	r4, r0, #3
 800ecf4:	f024 0403 	bic.w	r4, r4, #3
 800ecf8:	42a0      	cmp	r0, r4
 800ecfa:	d0f8      	beq.n	800ecee <sbrk_aligned+0x22>
 800ecfc:	1a21      	subs	r1, r4, r0
 800ecfe:	4628      	mov	r0, r5
 800ed00:	f001 fdf8 	bl	80108f4 <_sbrk_r>
 800ed04:	3001      	adds	r0, #1
 800ed06:	d1f2      	bne.n	800ecee <sbrk_aligned+0x22>
 800ed08:	e7ef      	b.n	800ecea <sbrk_aligned+0x1e>
 800ed0a:	bf00      	nop
 800ed0c:	200023ec 	.word	0x200023ec

0800ed10 <_malloc_r>:
 800ed10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed14:	1ccd      	adds	r5, r1, #3
 800ed16:	f025 0503 	bic.w	r5, r5, #3
 800ed1a:	3508      	adds	r5, #8
 800ed1c:	2d0c      	cmp	r5, #12
 800ed1e:	bf38      	it	cc
 800ed20:	250c      	movcc	r5, #12
 800ed22:	2d00      	cmp	r5, #0
 800ed24:	4606      	mov	r6, r0
 800ed26:	db01      	blt.n	800ed2c <_malloc_r+0x1c>
 800ed28:	42a9      	cmp	r1, r5
 800ed2a:	d904      	bls.n	800ed36 <_malloc_r+0x26>
 800ed2c:	230c      	movs	r3, #12
 800ed2e:	6033      	str	r3, [r6, #0]
 800ed30:	2000      	movs	r0, #0
 800ed32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ee0c <_malloc_r+0xfc>
 800ed3a:	f000 f869 	bl	800ee10 <__malloc_lock>
 800ed3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ed42:	461c      	mov	r4, r3
 800ed44:	bb44      	cbnz	r4, 800ed98 <_malloc_r+0x88>
 800ed46:	4629      	mov	r1, r5
 800ed48:	4630      	mov	r0, r6
 800ed4a:	f7ff ffbf 	bl	800eccc <sbrk_aligned>
 800ed4e:	1c43      	adds	r3, r0, #1
 800ed50:	4604      	mov	r4, r0
 800ed52:	d158      	bne.n	800ee06 <_malloc_r+0xf6>
 800ed54:	f8d8 4000 	ldr.w	r4, [r8]
 800ed58:	4627      	mov	r7, r4
 800ed5a:	2f00      	cmp	r7, #0
 800ed5c:	d143      	bne.n	800ede6 <_malloc_r+0xd6>
 800ed5e:	2c00      	cmp	r4, #0
 800ed60:	d04b      	beq.n	800edfa <_malloc_r+0xea>
 800ed62:	6823      	ldr	r3, [r4, #0]
 800ed64:	4639      	mov	r1, r7
 800ed66:	4630      	mov	r0, r6
 800ed68:	eb04 0903 	add.w	r9, r4, r3
 800ed6c:	f001 fdc2 	bl	80108f4 <_sbrk_r>
 800ed70:	4581      	cmp	r9, r0
 800ed72:	d142      	bne.n	800edfa <_malloc_r+0xea>
 800ed74:	6821      	ldr	r1, [r4, #0]
 800ed76:	1a6d      	subs	r5, r5, r1
 800ed78:	4629      	mov	r1, r5
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	f7ff ffa6 	bl	800eccc <sbrk_aligned>
 800ed80:	3001      	adds	r0, #1
 800ed82:	d03a      	beq.n	800edfa <_malloc_r+0xea>
 800ed84:	6823      	ldr	r3, [r4, #0]
 800ed86:	442b      	add	r3, r5
 800ed88:	6023      	str	r3, [r4, #0]
 800ed8a:	f8d8 3000 	ldr.w	r3, [r8]
 800ed8e:	685a      	ldr	r2, [r3, #4]
 800ed90:	bb62      	cbnz	r2, 800edec <_malloc_r+0xdc>
 800ed92:	f8c8 7000 	str.w	r7, [r8]
 800ed96:	e00f      	b.n	800edb8 <_malloc_r+0xa8>
 800ed98:	6822      	ldr	r2, [r4, #0]
 800ed9a:	1b52      	subs	r2, r2, r5
 800ed9c:	d420      	bmi.n	800ede0 <_malloc_r+0xd0>
 800ed9e:	2a0b      	cmp	r2, #11
 800eda0:	d917      	bls.n	800edd2 <_malloc_r+0xc2>
 800eda2:	1961      	adds	r1, r4, r5
 800eda4:	42a3      	cmp	r3, r4
 800eda6:	6025      	str	r5, [r4, #0]
 800eda8:	bf18      	it	ne
 800edaa:	6059      	strne	r1, [r3, #4]
 800edac:	6863      	ldr	r3, [r4, #4]
 800edae:	bf08      	it	eq
 800edb0:	f8c8 1000 	streq.w	r1, [r8]
 800edb4:	5162      	str	r2, [r4, r5]
 800edb6:	604b      	str	r3, [r1, #4]
 800edb8:	4630      	mov	r0, r6
 800edba:	f000 f82f 	bl	800ee1c <__malloc_unlock>
 800edbe:	f104 000b 	add.w	r0, r4, #11
 800edc2:	1d23      	adds	r3, r4, #4
 800edc4:	f020 0007 	bic.w	r0, r0, #7
 800edc8:	1ac2      	subs	r2, r0, r3
 800edca:	bf1c      	itt	ne
 800edcc:	1a1b      	subne	r3, r3, r0
 800edce:	50a3      	strne	r3, [r4, r2]
 800edd0:	e7af      	b.n	800ed32 <_malloc_r+0x22>
 800edd2:	6862      	ldr	r2, [r4, #4]
 800edd4:	42a3      	cmp	r3, r4
 800edd6:	bf0c      	ite	eq
 800edd8:	f8c8 2000 	streq.w	r2, [r8]
 800eddc:	605a      	strne	r2, [r3, #4]
 800edde:	e7eb      	b.n	800edb8 <_malloc_r+0xa8>
 800ede0:	4623      	mov	r3, r4
 800ede2:	6864      	ldr	r4, [r4, #4]
 800ede4:	e7ae      	b.n	800ed44 <_malloc_r+0x34>
 800ede6:	463c      	mov	r4, r7
 800ede8:	687f      	ldr	r7, [r7, #4]
 800edea:	e7b6      	b.n	800ed5a <_malloc_r+0x4a>
 800edec:	461a      	mov	r2, r3
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	42a3      	cmp	r3, r4
 800edf2:	d1fb      	bne.n	800edec <_malloc_r+0xdc>
 800edf4:	2300      	movs	r3, #0
 800edf6:	6053      	str	r3, [r2, #4]
 800edf8:	e7de      	b.n	800edb8 <_malloc_r+0xa8>
 800edfa:	230c      	movs	r3, #12
 800edfc:	6033      	str	r3, [r6, #0]
 800edfe:	4630      	mov	r0, r6
 800ee00:	f000 f80c 	bl	800ee1c <__malloc_unlock>
 800ee04:	e794      	b.n	800ed30 <_malloc_r+0x20>
 800ee06:	6005      	str	r5, [r0, #0]
 800ee08:	e7d6      	b.n	800edb8 <_malloc_r+0xa8>
 800ee0a:	bf00      	nop
 800ee0c:	200023f0 	.word	0x200023f0

0800ee10 <__malloc_lock>:
 800ee10:	4801      	ldr	r0, [pc, #4]	@ (800ee18 <__malloc_lock+0x8>)
 800ee12:	f7ff b8a4 	b.w	800df5e <__retarget_lock_acquire_recursive>
 800ee16:	bf00      	nop
 800ee18:	200023e8 	.word	0x200023e8

0800ee1c <__malloc_unlock>:
 800ee1c:	4801      	ldr	r0, [pc, #4]	@ (800ee24 <__malloc_unlock+0x8>)
 800ee1e:	f7ff b89f 	b.w	800df60 <__retarget_lock_release_recursive>
 800ee22:	bf00      	nop
 800ee24:	200023e8 	.word	0x200023e8

0800ee28 <_Balloc>:
 800ee28:	b570      	push	{r4, r5, r6, lr}
 800ee2a:	69c6      	ldr	r6, [r0, #28]
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	460d      	mov	r5, r1
 800ee30:	b976      	cbnz	r6, 800ee50 <_Balloc+0x28>
 800ee32:	2010      	movs	r0, #16
 800ee34:	f7ff ff42 	bl	800ecbc <malloc>
 800ee38:	4602      	mov	r2, r0
 800ee3a:	61e0      	str	r0, [r4, #28]
 800ee3c:	b920      	cbnz	r0, 800ee48 <_Balloc+0x20>
 800ee3e:	4b18      	ldr	r3, [pc, #96]	@ (800eea0 <_Balloc+0x78>)
 800ee40:	4818      	ldr	r0, [pc, #96]	@ (800eea4 <_Balloc+0x7c>)
 800ee42:	216b      	movs	r1, #107	@ 0x6b
 800ee44:	f001 fd70 	bl	8010928 <__assert_func>
 800ee48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee4c:	6006      	str	r6, [r0, #0]
 800ee4e:	60c6      	str	r6, [r0, #12]
 800ee50:	69e6      	ldr	r6, [r4, #28]
 800ee52:	68f3      	ldr	r3, [r6, #12]
 800ee54:	b183      	cbz	r3, 800ee78 <_Balloc+0x50>
 800ee56:	69e3      	ldr	r3, [r4, #28]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee5e:	b9b8      	cbnz	r0, 800ee90 <_Balloc+0x68>
 800ee60:	2101      	movs	r1, #1
 800ee62:	fa01 f605 	lsl.w	r6, r1, r5
 800ee66:	1d72      	adds	r2, r6, #5
 800ee68:	0092      	lsls	r2, r2, #2
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f001 fd7a 	bl	8010964 <_calloc_r>
 800ee70:	b160      	cbz	r0, 800ee8c <_Balloc+0x64>
 800ee72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ee76:	e00e      	b.n	800ee96 <_Balloc+0x6e>
 800ee78:	2221      	movs	r2, #33	@ 0x21
 800ee7a:	2104      	movs	r1, #4
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	f001 fd71 	bl	8010964 <_calloc_r>
 800ee82:	69e3      	ldr	r3, [r4, #28]
 800ee84:	60f0      	str	r0, [r6, #12]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d1e4      	bne.n	800ee56 <_Balloc+0x2e>
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	bd70      	pop	{r4, r5, r6, pc}
 800ee90:	6802      	ldr	r2, [r0, #0]
 800ee92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ee96:	2300      	movs	r3, #0
 800ee98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ee9c:	e7f7      	b.n	800ee8e <_Balloc+0x66>
 800ee9e:	bf00      	nop
 800eea0:	08012c16 	.word	0x08012c16
 800eea4:	08012c96 	.word	0x08012c96

0800eea8 <_Bfree>:
 800eea8:	b570      	push	{r4, r5, r6, lr}
 800eeaa:	69c6      	ldr	r6, [r0, #28]
 800eeac:	4605      	mov	r5, r0
 800eeae:	460c      	mov	r4, r1
 800eeb0:	b976      	cbnz	r6, 800eed0 <_Bfree+0x28>
 800eeb2:	2010      	movs	r0, #16
 800eeb4:	f7ff ff02 	bl	800ecbc <malloc>
 800eeb8:	4602      	mov	r2, r0
 800eeba:	61e8      	str	r0, [r5, #28]
 800eebc:	b920      	cbnz	r0, 800eec8 <_Bfree+0x20>
 800eebe:	4b09      	ldr	r3, [pc, #36]	@ (800eee4 <_Bfree+0x3c>)
 800eec0:	4809      	ldr	r0, [pc, #36]	@ (800eee8 <_Bfree+0x40>)
 800eec2:	218f      	movs	r1, #143	@ 0x8f
 800eec4:	f001 fd30 	bl	8010928 <__assert_func>
 800eec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eecc:	6006      	str	r6, [r0, #0]
 800eece:	60c6      	str	r6, [r0, #12]
 800eed0:	b13c      	cbz	r4, 800eee2 <_Bfree+0x3a>
 800eed2:	69eb      	ldr	r3, [r5, #28]
 800eed4:	6862      	ldr	r2, [r4, #4]
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eedc:	6021      	str	r1, [r4, #0]
 800eede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eee2:	bd70      	pop	{r4, r5, r6, pc}
 800eee4:	08012c16 	.word	0x08012c16
 800eee8:	08012c96 	.word	0x08012c96

0800eeec <__multadd>:
 800eeec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef0:	690d      	ldr	r5, [r1, #16]
 800eef2:	4607      	mov	r7, r0
 800eef4:	460c      	mov	r4, r1
 800eef6:	461e      	mov	r6, r3
 800eef8:	f101 0c14 	add.w	ip, r1, #20
 800eefc:	2000      	movs	r0, #0
 800eefe:	f8dc 3000 	ldr.w	r3, [ip]
 800ef02:	b299      	uxth	r1, r3
 800ef04:	fb02 6101 	mla	r1, r2, r1, r6
 800ef08:	0c1e      	lsrs	r6, r3, #16
 800ef0a:	0c0b      	lsrs	r3, r1, #16
 800ef0c:	fb02 3306 	mla	r3, r2, r6, r3
 800ef10:	b289      	uxth	r1, r1
 800ef12:	3001      	adds	r0, #1
 800ef14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ef18:	4285      	cmp	r5, r0
 800ef1a:	f84c 1b04 	str.w	r1, [ip], #4
 800ef1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ef22:	dcec      	bgt.n	800eefe <__multadd+0x12>
 800ef24:	b30e      	cbz	r6, 800ef6a <__multadd+0x7e>
 800ef26:	68a3      	ldr	r3, [r4, #8]
 800ef28:	42ab      	cmp	r3, r5
 800ef2a:	dc19      	bgt.n	800ef60 <__multadd+0x74>
 800ef2c:	6861      	ldr	r1, [r4, #4]
 800ef2e:	4638      	mov	r0, r7
 800ef30:	3101      	adds	r1, #1
 800ef32:	f7ff ff79 	bl	800ee28 <_Balloc>
 800ef36:	4680      	mov	r8, r0
 800ef38:	b928      	cbnz	r0, 800ef46 <__multadd+0x5a>
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ef70 <__multadd+0x84>)
 800ef3e:	480d      	ldr	r0, [pc, #52]	@ (800ef74 <__multadd+0x88>)
 800ef40:	21ba      	movs	r1, #186	@ 0xba
 800ef42:	f001 fcf1 	bl	8010928 <__assert_func>
 800ef46:	6922      	ldr	r2, [r4, #16]
 800ef48:	3202      	adds	r2, #2
 800ef4a:	f104 010c 	add.w	r1, r4, #12
 800ef4e:	0092      	lsls	r2, r2, #2
 800ef50:	300c      	adds	r0, #12
 800ef52:	f7ff f806 	bl	800df62 <memcpy>
 800ef56:	4621      	mov	r1, r4
 800ef58:	4638      	mov	r0, r7
 800ef5a:	f7ff ffa5 	bl	800eea8 <_Bfree>
 800ef5e:	4644      	mov	r4, r8
 800ef60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ef64:	3501      	adds	r5, #1
 800ef66:	615e      	str	r6, [r3, #20]
 800ef68:	6125      	str	r5, [r4, #16]
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef70:	08012c85 	.word	0x08012c85
 800ef74:	08012c96 	.word	0x08012c96

0800ef78 <__s2b>:
 800ef78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef7c:	460c      	mov	r4, r1
 800ef7e:	4615      	mov	r5, r2
 800ef80:	461f      	mov	r7, r3
 800ef82:	2209      	movs	r2, #9
 800ef84:	3308      	adds	r3, #8
 800ef86:	4606      	mov	r6, r0
 800ef88:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef8c:	2100      	movs	r1, #0
 800ef8e:	2201      	movs	r2, #1
 800ef90:	429a      	cmp	r2, r3
 800ef92:	db09      	blt.n	800efa8 <__s2b+0x30>
 800ef94:	4630      	mov	r0, r6
 800ef96:	f7ff ff47 	bl	800ee28 <_Balloc>
 800ef9a:	b940      	cbnz	r0, 800efae <__s2b+0x36>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	4b19      	ldr	r3, [pc, #100]	@ (800f004 <__s2b+0x8c>)
 800efa0:	4819      	ldr	r0, [pc, #100]	@ (800f008 <__s2b+0x90>)
 800efa2:	21d3      	movs	r1, #211	@ 0xd3
 800efa4:	f001 fcc0 	bl	8010928 <__assert_func>
 800efa8:	0052      	lsls	r2, r2, #1
 800efaa:	3101      	adds	r1, #1
 800efac:	e7f0      	b.n	800ef90 <__s2b+0x18>
 800efae:	9b08      	ldr	r3, [sp, #32]
 800efb0:	6143      	str	r3, [r0, #20]
 800efb2:	2d09      	cmp	r5, #9
 800efb4:	f04f 0301 	mov.w	r3, #1
 800efb8:	6103      	str	r3, [r0, #16]
 800efba:	dd16      	ble.n	800efea <__s2b+0x72>
 800efbc:	f104 0909 	add.w	r9, r4, #9
 800efc0:	46c8      	mov	r8, r9
 800efc2:	442c      	add	r4, r5
 800efc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800efc8:	4601      	mov	r1, r0
 800efca:	3b30      	subs	r3, #48	@ 0x30
 800efcc:	220a      	movs	r2, #10
 800efce:	4630      	mov	r0, r6
 800efd0:	f7ff ff8c 	bl	800eeec <__multadd>
 800efd4:	45a0      	cmp	r8, r4
 800efd6:	d1f5      	bne.n	800efc4 <__s2b+0x4c>
 800efd8:	f1a5 0408 	sub.w	r4, r5, #8
 800efdc:	444c      	add	r4, r9
 800efde:	1b2d      	subs	r5, r5, r4
 800efe0:	1963      	adds	r3, r4, r5
 800efe2:	42bb      	cmp	r3, r7
 800efe4:	db04      	blt.n	800eff0 <__s2b+0x78>
 800efe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efea:	340a      	adds	r4, #10
 800efec:	2509      	movs	r5, #9
 800efee:	e7f6      	b.n	800efde <__s2b+0x66>
 800eff0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eff4:	4601      	mov	r1, r0
 800eff6:	3b30      	subs	r3, #48	@ 0x30
 800eff8:	220a      	movs	r2, #10
 800effa:	4630      	mov	r0, r6
 800effc:	f7ff ff76 	bl	800eeec <__multadd>
 800f000:	e7ee      	b.n	800efe0 <__s2b+0x68>
 800f002:	bf00      	nop
 800f004:	08012c85 	.word	0x08012c85
 800f008:	08012c96 	.word	0x08012c96

0800f00c <__hi0bits>:
 800f00c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f010:	4603      	mov	r3, r0
 800f012:	bf36      	itet	cc
 800f014:	0403      	lslcc	r3, r0, #16
 800f016:	2000      	movcs	r0, #0
 800f018:	2010      	movcc	r0, #16
 800f01a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f01e:	bf3c      	itt	cc
 800f020:	021b      	lslcc	r3, r3, #8
 800f022:	3008      	addcc	r0, #8
 800f024:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f028:	bf3c      	itt	cc
 800f02a:	011b      	lslcc	r3, r3, #4
 800f02c:	3004      	addcc	r0, #4
 800f02e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f032:	bf3c      	itt	cc
 800f034:	009b      	lslcc	r3, r3, #2
 800f036:	3002      	addcc	r0, #2
 800f038:	2b00      	cmp	r3, #0
 800f03a:	db05      	blt.n	800f048 <__hi0bits+0x3c>
 800f03c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f040:	f100 0001 	add.w	r0, r0, #1
 800f044:	bf08      	it	eq
 800f046:	2020      	moveq	r0, #32
 800f048:	4770      	bx	lr

0800f04a <__lo0bits>:
 800f04a:	6803      	ldr	r3, [r0, #0]
 800f04c:	4602      	mov	r2, r0
 800f04e:	f013 0007 	ands.w	r0, r3, #7
 800f052:	d00b      	beq.n	800f06c <__lo0bits+0x22>
 800f054:	07d9      	lsls	r1, r3, #31
 800f056:	d421      	bmi.n	800f09c <__lo0bits+0x52>
 800f058:	0798      	lsls	r0, r3, #30
 800f05a:	bf49      	itett	mi
 800f05c:	085b      	lsrmi	r3, r3, #1
 800f05e:	089b      	lsrpl	r3, r3, #2
 800f060:	2001      	movmi	r0, #1
 800f062:	6013      	strmi	r3, [r2, #0]
 800f064:	bf5c      	itt	pl
 800f066:	6013      	strpl	r3, [r2, #0]
 800f068:	2002      	movpl	r0, #2
 800f06a:	4770      	bx	lr
 800f06c:	b299      	uxth	r1, r3
 800f06e:	b909      	cbnz	r1, 800f074 <__lo0bits+0x2a>
 800f070:	0c1b      	lsrs	r3, r3, #16
 800f072:	2010      	movs	r0, #16
 800f074:	b2d9      	uxtb	r1, r3
 800f076:	b909      	cbnz	r1, 800f07c <__lo0bits+0x32>
 800f078:	3008      	adds	r0, #8
 800f07a:	0a1b      	lsrs	r3, r3, #8
 800f07c:	0719      	lsls	r1, r3, #28
 800f07e:	bf04      	itt	eq
 800f080:	091b      	lsreq	r3, r3, #4
 800f082:	3004      	addeq	r0, #4
 800f084:	0799      	lsls	r1, r3, #30
 800f086:	bf04      	itt	eq
 800f088:	089b      	lsreq	r3, r3, #2
 800f08a:	3002      	addeq	r0, #2
 800f08c:	07d9      	lsls	r1, r3, #31
 800f08e:	d403      	bmi.n	800f098 <__lo0bits+0x4e>
 800f090:	085b      	lsrs	r3, r3, #1
 800f092:	f100 0001 	add.w	r0, r0, #1
 800f096:	d003      	beq.n	800f0a0 <__lo0bits+0x56>
 800f098:	6013      	str	r3, [r2, #0]
 800f09a:	4770      	bx	lr
 800f09c:	2000      	movs	r0, #0
 800f09e:	4770      	bx	lr
 800f0a0:	2020      	movs	r0, #32
 800f0a2:	4770      	bx	lr

0800f0a4 <__i2b>:
 800f0a4:	b510      	push	{r4, lr}
 800f0a6:	460c      	mov	r4, r1
 800f0a8:	2101      	movs	r1, #1
 800f0aa:	f7ff febd 	bl	800ee28 <_Balloc>
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	b928      	cbnz	r0, 800f0be <__i2b+0x1a>
 800f0b2:	4b05      	ldr	r3, [pc, #20]	@ (800f0c8 <__i2b+0x24>)
 800f0b4:	4805      	ldr	r0, [pc, #20]	@ (800f0cc <__i2b+0x28>)
 800f0b6:	f240 1145 	movw	r1, #325	@ 0x145
 800f0ba:	f001 fc35 	bl	8010928 <__assert_func>
 800f0be:	2301      	movs	r3, #1
 800f0c0:	6144      	str	r4, [r0, #20]
 800f0c2:	6103      	str	r3, [r0, #16]
 800f0c4:	bd10      	pop	{r4, pc}
 800f0c6:	bf00      	nop
 800f0c8:	08012c85 	.word	0x08012c85
 800f0cc:	08012c96 	.word	0x08012c96

0800f0d0 <__multiply>:
 800f0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d4:	4614      	mov	r4, r2
 800f0d6:	690a      	ldr	r2, [r1, #16]
 800f0d8:	6923      	ldr	r3, [r4, #16]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	bfa8      	it	ge
 800f0de:	4623      	movge	r3, r4
 800f0e0:	460f      	mov	r7, r1
 800f0e2:	bfa4      	itt	ge
 800f0e4:	460c      	movge	r4, r1
 800f0e6:	461f      	movge	r7, r3
 800f0e8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f0ec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f0f0:	68a3      	ldr	r3, [r4, #8]
 800f0f2:	6861      	ldr	r1, [r4, #4]
 800f0f4:	eb0a 0609 	add.w	r6, sl, r9
 800f0f8:	42b3      	cmp	r3, r6
 800f0fa:	b085      	sub	sp, #20
 800f0fc:	bfb8      	it	lt
 800f0fe:	3101      	addlt	r1, #1
 800f100:	f7ff fe92 	bl	800ee28 <_Balloc>
 800f104:	b930      	cbnz	r0, 800f114 <__multiply+0x44>
 800f106:	4602      	mov	r2, r0
 800f108:	4b44      	ldr	r3, [pc, #272]	@ (800f21c <__multiply+0x14c>)
 800f10a:	4845      	ldr	r0, [pc, #276]	@ (800f220 <__multiply+0x150>)
 800f10c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f110:	f001 fc0a 	bl	8010928 <__assert_func>
 800f114:	f100 0514 	add.w	r5, r0, #20
 800f118:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f11c:	462b      	mov	r3, r5
 800f11e:	2200      	movs	r2, #0
 800f120:	4543      	cmp	r3, r8
 800f122:	d321      	bcc.n	800f168 <__multiply+0x98>
 800f124:	f107 0114 	add.w	r1, r7, #20
 800f128:	f104 0214 	add.w	r2, r4, #20
 800f12c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f130:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f134:	9302      	str	r3, [sp, #8]
 800f136:	1b13      	subs	r3, r2, r4
 800f138:	3b15      	subs	r3, #21
 800f13a:	f023 0303 	bic.w	r3, r3, #3
 800f13e:	3304      	adds	r3, #4
 800f140:	f104 0715 	add.w	r7, r4, #21
 800f144:	42ba      	cmp	r2, r7
 800f146:	bf38      	it	cc
 800f148:	2304      	movcc	r3, #4
 800f14a:	9301      	str	r3, [sp, #4]
 800f14c:	9b02      	ldr	r3, [sp, #8]
 800f14e:	9103      	str	r1, [sp, #12]
 800f150:	428b      	cmp	r3, r1
 800f152:	d80c      	bhi.n	800f16e <__multiply+0x9e>
 800f154:	2e00      	cmp	r6, #0
 800f156:	dd03      	ble.n	800f160 <__multiply+0x90>
 800f158:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d05b      	beq.n	800f218 <__multiply+0x148>
 800f160:	6106      	str	r6, [r0, #16]
 800f162:	b005      	add	sp, #20
 800f164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f168:	f843 2b04 	str.w	r2, [r3], #4
 800f16c:	e7d8      	b.n	800f120 <__multiply+0x50>
 800f16e:	f8b1 a000 	ldrh.w	sl, [r1]
 800f172:	f1ba 0f00 	cmp.w	sl, #0
 800f176:	d024      	beq.n	800f1c2 <__multiply+0xf2>
 800f178:	f104 0e14 	add.w	lr, r4, #20
 800f17c:	46a9      	mov	r9, r5
 800f17e:	f04f 0c00 	mov.w	ip, #0
 800f182:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f186:	f8d9 3000 	ldr.w	r3, [r9]
 800f18a:	fa1f fb87 	uxth.w	fp, r7
 800f18e:	b29b      	uxth	r3, r3
 800f190:	fb0a 330b 	mla	r3, sl, fp, r3
 800f194:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f198:	f8d9 7000 	ldr.w	r7, [r9]
 800f19c:	4463      	add	r3, ip
 800f19e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f1a2:	fb0a c70b 	mla	r7, sl, fp, ip
 800f1a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f1b0:	4572      	cmp	r2, lr
 800f1b2:	f849 3b04 	str.w	r3, [r9], #4
 800f1b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f1ba:	d8e2      	bhi.n	800f182 <__multiply+0xb2>
 800f1bc:	9b01      	ldr	r3, [sp, #4]
 800f1be:	f845 c003 	str.w	ip, [r5, r3]
 800f1c2:	9b03      	ldr	r3, [sp, #12]
 800f1c4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f1c8:	3104      	adds	r1, #4
 800f1ca:	f1b9 0f00 	cmp.w	r9, #0
 800f1ce:	d021      	beq.n	800f214 <__multiply+0x144>
 800f1d0:	682b      	ldr	r3, [r5, #0]
 800f1d2:	f104 0c14 	add.w	ip, r4, #20
 800f1d6:	46ae      	mov	lr, r5
 800f1d8:	f04f 0a00 	mov.w	sl, #0
 800f1dc:	f8bc b000 	ldrh.w	fp, [ip]
 800f1e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f1e4:	fb09 770b 	mla	r7, r9, fp, r7
 800f1e8:	4457      	add	r7, sl
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f1f0:	f84e 3b04 	str.w	r3, [lr], #4
 800f1f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f1f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f1fc:	f8be 3000 	ldrh.w	r3, [lr]
 800f200:	fb09 330a 	mla	r3, r9, sl, r3
 800f204:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f208:	4562      	cmp	r2, ip
 800f20a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f20e:	d8e5      	bhi.n	800f1dc <__multiply+0x10c>
 800f210:	9f01      	ldr	r7, [sp, #4]
 800f212:	51eb      	str	r3, [r5, r7]
 800f214:	3504      	adds	r5, #4
 800f216:	e799      	b.n	800f14c <__multiply+0x7c>
 800f218:	3e01      	subs	r6, #1
 800f21a:	e79b      	b.n	800f154 <__multiply+0x84>
 800f21c:	08012c85 	.word	0x08012c85
 800f220:	08012c96 	.word	0x08012c96

0800f224 <__pow5mult>:
 800f224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f228:	4615      	mov	r5, r2
 800f22a:	f012 0203 	ands.w	r2, r2, #3
 800f22e:	4607      	mov	r7, r0
 800f230:	460e      	mov	r6, r1
 800f232:	d007      	beq.n	800f244 <__pow5mult+0x20>
 800f234:	4c25      	ldr	r4, [pc, #148]	@ (800f2cc <__pow5mult+0xa8>)
 800f236:	3a01      	subs	r2, #1
 800f238:	2300      	movs	r3, #0
 800f23a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f23e:	f7ff fe55 	bl	800eeec <__multadd>
 800f242:	4606      	mov	r6, r0
 800f244:	10ad      	asrs	r5, r5, #2
 800f246:	d03d      	beq.n	800f2c4 <__pow5mult+0xa0>
 800f248:	69fc      	ldr	r4, [r7, #28]
 800f24a:	b97c      	cbnz	r4, 800f26c <__pow5mult+0x48>
 800f24c:	2010      	movs	r0, #16
 800f24e:	f7ff fd35 	bl	800ecbc <malloc>
 800f252:	4602      	mov	r2, r0
 800f254:	61f8      	str	r0, [r7, #28]
 800f256:	b928      	cbnz	r0, 800f264 <__pow5mult+0x40>
 800f258:	4b1d      	ldr	r3, [pc, #116]	@ (800f2d0 <__pow5mult+0xac>)
 800f25a:	481e      	ldr	r0, [pc, #120]	@ (800f2d4 <__pow5mult+0xb0>)
 800f25c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f260:	f001 fb62 	bl	8010928 <__assert_func>
 800f264:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f268:	6004      	str	r4, [r0, #0]
 800f26a:	60c4      	str	r4, [r0, #12]
 800f26c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f270:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f274:	b94c      	cbnz	r4, 800f28a <__pow5mult+0x66>
 800f276:	f240 2171 	movw	r1, #625	@ 0x271
 800f27a:	4638      	mov	r0, r7
 800f27c:	f7ff ff12 	bl	800f0a4 <__i2b>
 800f280:	2300      	movs	r3, #0
 800f282:	f8c8 0008 	str.w	r0, [r8, #8]
 800f286:	4604      	mov	r4, r0
 800f288:	6003      	str	r3, [r0, #0]
 800f28a:	f04f 0900 	mov.w	r9, #0
 800f28e:	07eb      	lsls	r3, r5, #31
 800f290:	d50a      	bpl.n	800f2a8 <__pow5mult+0x84>
 800f292:	4631      	mov	r1, r6
 800f294:	4622      	mov	r2, r4
 800f296:	4638      	mov	r0, r7
 800f298:	f7ff ff1a 	bl	800f0d0 <__multiply>
 800f29c:	4631      	mov	r1, r6
 800f29e:	4680      	mov	r8, r0
 800f2a0:	4638      	mov	r0, r7
 800f2a2:	f7ff fe01 	bl	800eea8 <_Bfree>
 800f2a6:	4646      	mov	r6, r8
 800f2a8:	106d      	asrs	r5, r5, #1
 800f2aa:	d00b      	beq.n	800f2c4 <__pow5mult+0xa0>
 800f2ac:	6820      	ldr	r0, [r4, #0]
 800f2ae:	b938      	cbnz	r0, 800f2c0 <__pow5mult+0x9c>
 800f2b0:	4622      	mov	r2, r4
 800f2b2:	4621      	mov	r1, r4
 800f2b4:	4638      	mov	r0, r7
 800f2b6:	f7ff ff0b 	bl	800f0d0 <__multiply>
 800f2ba:	6020      	str	r0, [r4, #0]
 800f2bc:	f8c0 9000 	str.w	r9, [r0]
 800f2c0:	4604      	mov	r4, r0
 800f2c2:	e7e4      	b.n	800f28e <__pow5mult+0x6a>
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2ca:	bf00      	nop
 800f2cc:	08012cf0 	.word	0x08012cf0
 800f2d0:	08012c16 	.word	0x08012c16
 800f2d4:	08012c96 	.word	0x08012c96

0800f2d8 <__lshift>:
 800f2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2dc:	460c      	mov	r4, r1
 800f2de:	6849      	ldr	r1, [r1, #4]
 800f2e0:	6923      	ldr	r3, [r4, #16]
 800f2e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f2e6:	68a3      	ldr	r3, [r4, #8]
 800f2e8:	4607      	mov	r7, r0
 800f2ea:	4691      	mov	r9, r2
 800f2ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f2f0:	f108 0601 	add.w	r6, r8, #1
 800f2f4:	42b3      	cmp	r3, r6
 800f2f6:	db0b      	blt.n	800f310 <__lshift+0x38>
 800f2f8:	4638      	mov	r0, r7
 800f2fa:	f7ff fd95 	bl	800ee28 <_Balloc>
 800f2fe:	4605      	mov	r5, r0
 800f300:	b948      	cbnz	r0, 800f316 <__lshift+0x3e>
 800f302:	4602      	mov	r2, r0
 800f304:	4b28      	ldr	r3, [pc, #160]	@ (800f3a8 <__lshift+0xd0>)
 800f306:	4829      	ldr	r0, [pc, #164]	@ (800f3ac <__lshift+0xd4>)
 800f308:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f30c:	f001 fb0c 	bl	8010928 <__assert_func>
 800f310:	3101      	adds	r1, #1
 800f312:	005b      	lsls	r3, r3, #1
 800f314:	e7ee      	b.n	800f2f4 <__lshift+0x1c>
 800f316:	2300      	movs	r3, #0
 800f318:	f100 0114 	add.w	r1, r0, #20
 800f31c:	f100 0210 	add.w	r2, r0, #16
 800f320:	4618      	mov	r0, r3
 800f322:	4553      	cmp	r3, sl
 800f324:	db33      	blt.n	800f38e <__lshift+0xb6>
 800f326:	6920      	ldr	r0, [r4, #16]
 800f328:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f32c:	f104 0314 	add.w	r3, r4, #20
 800f330:	f019 091f 	ands.w	r9, r9, #31
 800f334:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f338:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f33c:	d02b      	beq.n	800f396 <__lshift+0xbe>
 800f33e:	f1c9 0e20 	rsb	lr, r9, #32
 800f342:	468a      	mov	sl, r1
 800f344:	2200      	movs	r2, #0
 800f346:	6818      	ldr	r0, [r3, #0]
 800f348:	fa00 f009 	lsl.w	r0, r0, r9
 800f34c:	4310      	orrs	r0, r2
 800f34e:	f84a 0b04 	str.w	r0, [sl], #4
 800f352:	f853 2b04 	ldr.w	r2, [r3], #4
 800f356:	459c      	cmp	ip, r3
 800f358:	fa22 f20e 	lsr.w	r2, r2, lr
 800f35c:	d8f3      	bhi.n	800f346 <__lshift+0x6e>
 800f35e:	ebac 0304 	sub.w	r3, ip, r4
 800f362:	3b15      	subs	r3, #21
 800f364:	f023 0303 	bic.w	r3, r3, #3
 800f368:	3304      	adds	r3, #4
 800f36a:	f104 0015 	add.w	r0, r4, #21
 800f36e:	4584      	cmp	ip, r0
 800f370:	bf38      	it	cc
 800f372:	2304      	movcc	r3, #4
 800f374:	50ca      	str	r2, [r1, r3]
 800f376:	b10a      	cbz	r2, 800f37c <__lshift+0xa4>
 800f378:	f108 0602 	add.w	r6, r8, #2
 800f37c:	3e01      	subs	r6, #1
 800f37e:	4638      	mov	r0, r7
 800f380:	612e      	str	r6, [r5, #16]
 800f382:	4621      	mov	r1, r4
 800f384:	f7ff fd90 	bl	800eea8 <_Bfree>
 800f388:	4628      	mov	r0, r5
 800f38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f38e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f392:	3301      	adds	r3, #1
 800f394:	e7c5      	b.n	800f322 <__lshift+0x4a>
 800f396:	3904      	subs	r1, #4
 800f398:	f853 2b04 	ldr.w	r2, [r3], #4
 800f39c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f3a0:	459c      	cmp	ip, r3
 800f3a2:	d8f9      	bhi.n	800f398 <__lshift+0xc0>
 800f3a4:	e7ea      	b.n	800f37c <__lshift+0xa4>
 800f3a6:	bf00      	nop
 800f3a8:	08012c85 	.word	0x08012c85
 800f3ac:	08012c96 	.word	0x08012c96

0800f3b0 <__mcmp>:
 800f3b0:	690a      	ldr	r2, [r1, #16]
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	6900      	ldr	r0, [r0, #16]
 800f3b6:	1a80      	subs	r0, r0, r2
 800f3b8:	b530      	push	{r4, r5, lr}
 800f3ba:	d10e      	bne.n	800f3da <__mcmp+0x2a>
 800f3bc:	3314      	adds	r3, #20
 800f3be:	3114      	adds	r1, #20
 800f3c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f3c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f3c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f3cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f3d0:	4295      	cmp	r5, r2
 800f3d2:	d003      	beq.n	800f3dc <__mcmp+0x2c>
 800f3d4:	d205      	bcs.n	800f3e2 <__mcmp+0x32>
 800f3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800f3da:	bd30      	pop	{r4, r5, pc}
 800f3dc:	42a3      	cmp	r3, r4
 800f3de:	d3f3      	bcc.n	800f3c8 <__mcmp+0x18>
 800f3e0:	e7fb      	b.n	800f3da <__mcmp+0x2a>
 800f3e2:	2001      	movs	r0, #1
 800f3e4:	e7f9      	b.n	800f3da <__mcmp+0x2a>
	...

0800f3e8 <__mdiff>:
 800f3e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ec:	4689      	mov	r9, r1
 800f3ee:	4606      	mov	r6, r0
 800f3f0:	4611      	mov	r1, r2
 800f3f2:	4648      	mov	r0, r9
 800f3f4:	4614      	mov	r4, r2
 800f3f6:	f7ff ffdb 	bl	800f3b0 <__mcmp>
 800f3fa:	1e05      	subs	r5, r0, #0
 800f3fc:	d112      	bne.n	800f424 <__mdiff+0x3c>
 800f3fe:	4629      	mov	r1, r5
 800f400:	4630      	mov	r0, r6
 800f402:	f7ff fd11 	bl	800ee28 <_Balloc>
 800f406:	4602      	mov	r2, r0
 800f408:	b928      	cbnz	r0, 800f416 <__mdiff+0x2e>
 800f40a:	4b3f      	ldr	r3, [pc, #252]	@ (800f508 <__mdiff+0x120>)
 800f40c:	f240 2137 	movw	r1, #567	@ 0x237
 800f410:	483e      	ldr	r0, [pc, #248]	@ (800f50c <__mdiff+0x124>)
 800f412:	f001 fa89 	bl	8010928 <__assert_func>
 800f416:	2301      	movs	r3, #1
 800f418:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f41c:	4610      	mov	r0, r2
 800f41e:	b003      	add	sp, #12
 800f420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f424:	bfbc      	itt	lt
 800f426:	464b      	movlt	r3, r9
 800f428:	46a1      	movlt	r9, r4
 800f42a:	4630      	mov	r0, r6
 800f42c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f430:	bfba      	itte	lt
 800f432:	461c      	movlt	r4, r3
 800f434:	2501      	movlt	r5, #1
 800f436:	2500      	movge	r5, #0
 800f438:	f7ff fcf6 	bl	800ee28 <_Balloc>
 800f43c:	4602      	mov	r2, r0
 800f43e:	b918      	cbnz	r0, 800f448 <__mdiff+0x60>
 800f440:	4b31      	ldr	r3, [pc, #196]	@ (800f508 <__mdiff+0x120>)
 800f442:	f240 2145 	movw	r1, #581	@ 0x245
 800f446:	e7e3      	b.n	800f410 <__mdiff+0x28>
 800f448:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f44c:	6926      	ldr	r6, [r4, #16]
 800f44e:	60c5      	str	r5, [r0, #12]
 800f450:	f109 0310 	add.w	r3, r9, #16
 800f454:	f109 0514 	add.w	r5, r9, #20
 800f458:	f104 0e14 	add.w	lr, r4, #20
 800f45c:	f100 0b14 	add.w	fp, r0, #20
 800f460:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f464:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f468:	9301      	str	r3, [sp, #4]
 800f46a:	46d9      	mov	r9, fp
 800f46c:	f04f 0c00 	mov.w	ip, #0
 800f470:	9b01      	ldr	r3, [sp, #4]
 800f472:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f476:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f47a:	9301      	str	r3, [sp, #4]
 800f47c:	fa1f f38a 	uxth.w	r3, sl
 800f480:	4619      	mov	r1, r3
 800f482:	b283      	uxth	r3, r0
 800f484:	1acb      	subs	r3, r1, r3
 800f486:	0c00      	lsrs	r0, r0, #16
 800f488:	4463      	add	r3, ip
 800f48a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f48e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f492:	b29b      	uxth	r3, r3
 800f494:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f498:	4576      	cmp	r6, lr
 800f49a:	f849 3b04 	str.w	r3, [r9], #4
 800f49e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f4a2:	d8e5      	bhi.n	800f470 <__mdiff+0x88>
 800f4a4:	1b33      	subs	r3, r6, r4
 800f4a6:	3b15      	subs	r3, #21
 800f4a8:	f023 0303 	bic.w	r3, r3, #3
 800f4ac:	3415      	adds	r4, #21
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	42a6      	cmp	r6, r4
 800f4b2:	bf38      	it	cc
 800f4b4:	2304      	movcc	r3, #4
 800f4b6:	441d      	add	r5, r3
 800f4b8:	445b      	add	r3, fp
 800f4ba:	461e      	mov	r6, r3
 800f4bc:	462c      	mov	r4, r5
 800f4be:	4544      	cmp	r4, r8
 800f4c0:	d30e      	bcc.n	800f4e0 <__mdiff+0xf8>
 800f4c2:	f108 0103 	add.w	r1, r8, #3
 800f4c6:	1b49      	subs	r1, r1, r5
 800f4c8:	f021 0103 	bic.w	r1, r1, #3
 800f4cc:	3d03      	subs	r5, #3
 800f4ce:	45a8      	cmp	r8, r5
 800f4d0:	bf38      	it	cc
 800f4d2:	2100      	movcc	r1, #0
 800f4d4:	440b      	add	r3, r1
 800f4d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f4da:	b191      	cbz	r1, 800f502 <__mdiff+0x11a>
 800f4dc:	6117      	str	r7, [r2, #16]
 800f4de:	e79d      	b.n	800f41c <__mdiff+0x34>
 800f4e0:	f854 1b04 	ldr.w	r1, [r4], #4
 800f4e4:	46e6      	mov	lr, ip
 800f4e6:	0c08      	lsrs	r0, r1, #16
 800f4e8:	fa1c fc81 	uxtah	ip, ip, r1
 800f4ec:	4471      	add	r1, lr
 800f4ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f4f2:	b289      	uxth	r1, r1
 800f4f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f4f8:	f846 1b04 	str.w	r1, [r6], #4
 800f4fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f500:	e7dd      	b.n	800f4be <__mdiff+0xd6>
 800f502:	3f01      	subs	r7, #1
 800f504:	e7e7      	b.n	800f4d6 <__mdiff+0xee>
 800f506:	bf00      	nop
 800f508:	08012c85 	.word	0x08012c85
 800f50c:	08012c96 	.word	0x08012c96

0800f510 <__ulp>:
 800f510:	b082      	sub	sp, #8
 800f512:	ed8d 0b00 	vstr	d0, [sp]
 800f516:	9a01      	ldr	r2, [sp, #4]
 800f518:	4b0f      	ldr	r3, [pc, #60]	@ (800f558 <__ulp+0x48>)
 800f51a:	4013      	ands	r3, r2
 800f51c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f520:	2b00      	cmp	r3, #0
 800f522:	dc08      	bgt.n	800f536 <__ulp+0x26>
 800f524:	425b      	negs	r3, r3
 800f526:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f52a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f52e:	da04      	bge.n	800f53a <__ulp+0x2a>
 800f530:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f534:	4113      	asrs	r3, r2
 800f536:	2200      	movs	r2, #0
 800f538:	e008      	b.n	800f54c <__ulp+0x3c>
 800f53a:	f1a2 0314 	sub.w	r3, r2, #20
 800f53e:	2b1e      	cmp	r3, #30
 800f540:	bfda      	itte	le
 800f542:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f546:	40da      	lsrle	r2, r3
 800f548:	2201      	movgt	r2, #1
 800f54a:	2300      	movs	r3, #0
 800f54c:	4619      	mov	r1, r3
 800f54e:	4610      	mov	r0, r2
 800f550:	ec41 0b10 	vmov	d0, r0, r1
 800f554:	b002      	add	sp, #8
 800f556:	4770      	bx	lr
 800f558:	7ff00000 	.word	0x7ff00000

0800f55c <__b2d>:
 800f55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f560:	6906      	ldr	r6, [r0, #16]
 800f562:	f100 0814 	add.w	r8, r0, #20
 800f566:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f56a:	1f37      	subs	r7, r6, #4
 800f56c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f570:	4610      	mov	r0, r2
 800f572:	f7ff fd4b 	bl	800f00c <__hi0bits>
 800f576:	f1c0 0320 	rsb	r3, r0, #32
 800f57a:	280a      	cmp	r0, #10
 800f57c:	600b      	str	r3, [r1, #0]
 800f57e:	491b      	ldr	r1, [pc, #108]	@ (800f5ec <__b2d+0x90>)
 800f580:	dc15      	bgt.n	800f5ae <__b2d+0x52>
 800f582:	f1c0 0c0b 	rsb	ip, r0, #11
 800f586:	fa22 f30c 	lsr.w	r3, r2, ip
 800f58a:	45b8      	cmp	r8, r7
 800f58c:	ea43 0501 	orr.w	r5, r3, r1
 800f590:	bf34      	ite	cc
 800f592:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f596:	2300      	movcs	r3, #0
 800f598:	3015      	adds	r0, #21
 800f59a:	fa02 f000 	lsl.w	r0, r2, r0
 800f59e:	fa23 f30c 	lsr.w	r3, r3, ip
 800f5a2:	4303      	orrs	r3, r0
 800f5a4:	461c      	mov	r4, r3
 800f5a6:	ec45 4b10 	vmov	d0, r4, r5
 800f5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ae:	45b8      	cmp	r8, r7
 800f5b0:	bf3a      	itte	cc
 800f5b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f5b6:	f1a6 0708 	subcc.w	r7, r6, #8
 800f5ba:	2300      	movcs	r3, #0
 800f5bc:	380b      	subs	r0, #11
 800f5be:	d012      	beq.n	800f5e6 <__b2d+0x8a>
 800f5c0:	f1c0 0120 	rsb	r1, r0, #32
 800f5c4:	fa23 f401 	lsr.w	r4, r3, r1
 800f5c8:	4082      	lsls	r2, r0
 800f5ca:	4322      	orrs	r2, r4
 800f5cc:	4547      	cmp	r7, r8
 800f5ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f5d2:	bf8c      	ite	hi
 800f5d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f5d8:	2200      	movls	r2, #0
 800f5da:	4083      	lsls	r3, r0
 800f5dc:	40ca      	lsrs	r2, r1
 800f5de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	e7de      	b.n	800f5a4 <__b2d+0x48>
 800f5e6:	ea42 0501 	orr.w	r5, r2, r1
 800f5ea:	e7db      	b.n	800f5a4 <__b2d+0x48>
 800f5ec:	3ff00000 	.word	0x3ff00000

0800f5f0 <__d2b>:
 800f5f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f5f4:	460f      	mov	r7, r1
 800f5f6:	2101      	movs	r1, #1
 800f5f8:	ec59 8b10 	vmov	r8, r9, d0
 800f5fc:	4616      	mov	r6, r2
 800f5fe:	f7ff fc13 	bl	800ee28 <_Balloc>
 800f602:	4604      	mov	r4, r0
 800f604:	b930      	cbnz	r0, 800f614 <__d2b+0x24>
 800f606:	4602      	mov	r2, r0
 800f608:	4b23      	ldr	r3, [pc, #140]	@ (800f698 <__d2b+0xa8>)
 800f60a:	4824      	ldr	r0, [pc, #144]	@ (800f69c <__d2b+0xac>)
 800f60c:	f240 310f 	movw	r1, #783	@ 0x30f
 800f610:	f001 f98a 	bl	8010928 <__assert_func>
 800f614:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f61c:	b10d      	cbz	r5, 800f622 <__d2b+0x32>
 800f61e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f622:	9301      	str	r3, [sp, #4]
 800f624:	f1b8 0300 	subs.w	r3, r8, #0
 800f628:	d023      	beq.n	800f672 <__d2b+0x82>
 800f62a:	4668      	mov	r0, sp
 800f62c:	9300      	str	r3, [sp, #0]
 800f62e:	f7ff fd0c 	bl	800f04a <__lo0bits>
 800f632:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f636:	b1d0      	cbz	r0, 800f66e <__d2b+0x7e>
 800f638:	f1c0 0320 	rsb	r3, r0, #32
 800f63c:	fa02 f303 	lsl.w	r3, r2, r3
 800f640:	430b      	orrs	r3, r1
 800f642:	40c2      	lsrs	r2, r0
 800f644:	6163      	str	r3, [r4, #20]
 800f646:	9201      	str	r2, [sp, #4]
 800f648:	9b01      	ldr	r3, [sp, #4]
 800f64a:	61a3      	str	r3, [r4, #24]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	bf0c      	ite	eq
 800f650:	2201      	moveq	r2, #1
 800f652:	2202      	movne	r2, #2
 800f654:	6122      	str	r2, [r4, #16]
 800f656:	b1a5      	cbz	r5, 800f682 <__d2b+0x92>
 800f658:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f65c:	4405      	add	r5, r0
 800f65e:	603d      	str	r5, [r7, #0]
 800f660:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f664:	6030      	str	r0, [r6, #0]
 800f666:	4620      	mov	r0, r4
 800f668:	b003      	add	sp, #12
 800f66a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f66e:	6161      	str	r1, [r4, #20]
 800f670:	e7ea      	b.n	800f648 <__d2b+0x58>
 800f672:	a801      	add	r0, sp, #4
 800f674:	f7ff fce9 	bl	800f04a <__lo0bits>
 800f678:	9b01      	ldr	r3, [sp, #4]
 800f67a:	6163      	str	r3, [r4, #20]
 800f67c:	3020      	adds	r0, #32
 800f67e:	2201      	movs	r2, #1
 800f680:	e7e8      	b.n	800f654 <__d2b+0x64>
 800f682:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f686:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f68a:	6038      	str	r0, [r7, #0]
 800f68c:	6918      	ldr	r0, [r3, #16]
 800f68e:	f7ff fcbd 	bl	800f00c <__hi0bits>
 800f692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f696:	e7e5      	b.n	800f664 <__d2b+0x74>
 800f698:	08012c85 	.word	0x08012c85
 800f69c:	08012c96 	.word	0x08012c96

0800f6a0 <__ratio>:
 800f6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a4:	b085      	sub	sp, #20
 800f6a6:	e9cd 1000 	strd	r1, r0, [sp]
 800f6aa:	a902      	add	r1, sp, #8
 800f6ac:	f7ff ff56 	bl	800f55c <__b2d>
 800f6b0:	9800      	ldr	r0, [sp, #0]
 800f6b2:	a903      	add	r1, sp, #12
 800f6b4:	ec55 4b10 	vmov	r4, r5, d0
 800f6b8:	f7ff ff50 	bl	800f55c <__b2d>
 800f6bc:	9b01      	ldr	r3, [sp, #4]
 800f6be:	6919      	ldr	r1, [r3, #16]
 800f6c0:	9b00      	ldr	r3, [sp, #0]
 800f6c2:	691b      	ldr	r3, [r3, #16]
 800f6c4:	1ac9      	subs	r1, r1, r3
 800f6c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f6ca:	1a9b      	subs	r3, r3, r2
 800f6cc:	ec5b ab10 	vmov	sl, fp, d0
 800f6d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	bfce      	itee	gt
 800f6d8:	462a      	movgt	r2, r5
 800f6da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f6de:	465a      	movle	r2, fp
 800f6e0:	462f      	mov	r7, r5
 800f6e2:	46d9      	mov	r9, fp
 800f6e4:	bfcc      	ite	gt
 800f6e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f6ea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f6ee:	464b      	mov	r3, r9
 800f6f0:	4652      	mov	r2, sl
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	4639      	mov	r1, r7
 800f6f6:	f7f1 f8a9 	bl	800084c <__aeabi_ddiv>
 800f6fa:	ec41 0b10 	vmov	d0, r0, r1
 800f6fe:	b005      	add	sp, #20
 800f700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f704 <__copybits>:
 800f704:	3901      	subs	r1, #1
 800f706:	b570      	push	{r4, r5, r6, lr}
 800f708:	1149      	asrs	r1, r1, #5
 800f70a:	6914      	ldr	r4, [r2, #16]
 800f70c:	3101      	adds	r1, #1
 800f70e:	f102 0314 	add.w	r3, r2, #20
 800f712:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f716:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f71a:	1f05      	subs	r5, r0, #4
 800f71c:	42a3      	cmp	r3, r4
 800f71e:	d30c      	bcc.n	800f73a <__copybits+0x36>
 800f720:	1aa3      	subs	r3, r4, r2
 800f722:	3b11      	subs	r3, #17
 800f724:	f023 0303 	bic.w	r3, r3, #3
 800f728:	3211      	adds	r2, #17
 800f72a:	42a2      	cmp	r2, r4
 800f72c:	bf88      	it	hi
 800f72e:	2300      	movhi	r3, #0
 800f730:	4418      	add	r0, r3
 800f732:	2300      	movs	r3, #0
 800f734:	4288      	cmp	r0, r1
 800f736:	d305      	bcc.n	800f744 <__copybits+0x40>
 800f738:	bd70      	pop	{r4, r5, r6, pc}
 800f73a:	f853 6b04 	ldr.w	r6, [r3], #4
 800f73e:	f845 6f04 	str.w	r6, [r5, #4]!
 800f742:	e7eb      	b.n	800f71c <__copybits+0x18>
 800f744:	f840 3b04 	str.w	r3, [r0], #4
 800f748:	e7f4      	b.n	800f734 <__copybits+0x30>

0800f74a <__any_on>:
 800f74a:	f100 0214 	add.w	r2, r0, #20
 800f74e:	6900      	ldr	r0, [r0, #16]
 800f750:	114b      	asrs	r3, r1, #5
 800f752:	4298      	cmp	r0, r3
 800f754:	b510      	push	{r4, lr}
 800f756:	db11      	blt.n	800f77c <__any_on+0x32>
 800f758:	dd0a      	ble.n	800f770 <__any_on+0x26>
 800f75a:	f011 011f 	ands.w	r1, r1, #31
 800f75e:	d007      	beq.n	800f770 <__any_on+0x26>
 800f760:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f764:	fa24 f001 	lsr.w	r0, r4, r1
 800f768:	fa00 f101 	lsl.w	r1, r0, r1
 800f76c:	428c      	cmp	r4, r1
 800f76e:	d10b      	bne.n	800f788 <__any_on+0x3e>
 800f770:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f774:	4293      	cmp	r3, r2
 800f776:	d803      	bhi.n	800f780 <__any_on+0x36>
 800f778:	2000      	movs	r0, #0
 800f77a:	bd10      	pop	{r4, pc}
 800f77c:	4603      	mov	r3, r0
 800f77e:	e7f7      	b.n	800f770 <__any_on+0x26>
 800f780:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f784:	2900      	cmp	r1, #0
 800f786:	d0f5      	beq.n	800f774 <__any_on+0x2a>
 800f788:	2001      	movs	r0, #1
 800f78a:	e7f6      	b.n	800f77a <__any_on+0x30>

0800f78c <sulp>:
 800f78c:	b570      	push	{r4, r5, r6, lr}
 800f78e:	4604      	mov	r4, r0
 800f790:	460d      	mov	r5, r1
 800f792:	ec45 4b10 	vmov	d0, r4, r5
 800f796:	4616      	mov	r6, r2
 800f798:	f7ff feba 	bl	800f510 <__ulp>
 800f79c:	ec51 0b10 	vmov	r0, r1, d0
 800f7a0:	b17e      	cbz	r6, 800f7c2 <sulp+0x36>
 800f7a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f7a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	dd09      	ble.n	800f7c2 <sulp+0x36>
 800f7ae:	051b      	lsls	r3, r3, #20
 800f7b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f7b4:	2400      	movs	r4, #0
 800f7b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f7ba:	4622      	mov	r2, r4
 800f7bc:	462b      	mov	r3, r5
 800f7be:	f7f0 ff1b 	bl	80005f8 <__aeabi_dmul>
 800f7c2:	ec41 0b10 	vmov	d0, r0, r1
 800f7c6:	bd70      	pop	{r4, r5, r6, pc}

0800f7c8 <_strtod_l>:
 800f7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7cc:	b09f      	sub	sp, #124	@ 0x7c
 800f7ce:	460c      	mov	r4, r1
 800f7d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	921a      	str	r2, [sp, #104]	@ 0x68
 800f7d6:	9005      	str	r0, [sp, #20]
 800f7d8:	f04f 0a00 	mov.w	sl, #0
 800f7dc:	f04f 0b00 	mov.w	fp, #0
 800f7e0:	460a      	mov	r2, r1
 800f7e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f7e4:	7811      	ldrb	r1, [r2, #0]
 800f7e6:	292b      	cmp	r1, #43	@ 0x2b
 800f7e8:	d04a      	beq.n	800f880 <_strtod_l+0xb8>
 800f7ea:	d838      	bhi.n	800f85e <_strtod_l+0x96>
 800f7ec:	290d      	cmp	r1, #13
 800f7ee:	d832      	bhi.n	800f856 <_strtod_l+0x8e>
 800f7f0:	2908      	cmp	r1, #8
 800f7f2:	d832      	bhi.n	800f85a <_strtod_l+0x92>
 800f7f4:	2900      	cmp	r1, #0
 800f7f6:	d03b      	beq.n	800f870 <_strtod_l+0xa8>
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f7fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f7fe:	782a      	ldrb	r2, [r5, #0]
 800f800:	2a30      	cmp	r2, #48	@ 0x30
 800f802:	f040 80b3 	bne.w	800f96c <_strtod_l+0x1a4>
 800f806:	786a      	ldrb	r2, [r5, #1]
 800f808:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f80c:	2a58      	cmp	r2, #88	@ 0x58
 800f80e:	d16e      	bne.n	800f8ee <_strtod_l+0x126>
 800f810:	9302      	str	r3, [sp, #8]
 800f812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f814:	9301      	str	r3, [sp, #4]
 800f816:	ab1a      	add	r3, sp, #104	@ 0x68
 800f818:	9300      	str	r3, [sp, #0]
 800f81a:	4a8e      	ldr	r2, [pc, #568]	@ (800fa54 <_strtod_l+0x28c>)
 800f81c:	9805      	ldr	r0, [sp, #20]
 800f81e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f820:	a919      	add	r1, sp, #100	@ 0x64
 800f822:	f001 f91b 	bl	8010a5c <__gethex>
 800f826:	f010 060f 	ands.w	r6, r0, #15
 800f82a:	4604      	mov	r4, r0
 800f82c:	d005      	beq.n	800f83a <_strtod_l+0x72>
 800f82e:	2e06      	cmp	r6, #6
 800f830:	d128      	bne.n	800f884 <_strtod_l+0xbc>
 800f832:	3501      	adds	r5, #1
 800f834:	2300      	movs	r3, #0
 800f836:	9519      	str	r5, [sp, #100]	@ 0x64
 800f838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f83a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	f040 858e 	bne.w	801035e <_strtod_l+0xb96>
 800f842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f844:	b1cb      	cbz	r3, 800f87a <_strtod_l+0xb2>
 800f846:	4652      	mov	r2, sl
 800f848:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f84c:	ec43 2b10 	vmov	d0, r2, r3
 800f850:	b01f      	add	sp, #124	@ 0x7c
 800f852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f856:	2920      	cmp	r1, #32
 800f858:	d1ce      	bne.n	800f7f8 <_strtod_l+0x30>
 800f85a:	3201      	adds	r2, #1
 800f85c:	e7c1      	b.n	800f7e2 <_strtod_l+0x1a>
 800f85e:	292d      	cmp	r1, #45	@ 0x2d
 800f860:	d1ca      	bne.n	800f7f8 <_strtod_l+0x30>
 800f862:	2101      	movs	r1, #1
 800f864:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f866:	1c51      	adds	r1, r2, #1
 800f868:	9119      	str	r1, [sp, #100]	@ 0x64
 800f86a:	7852      	ldrb	r2, [r2, #1]
 800f86c:	2a00      	cmp	r2, #0
 800f86e:	d1c5      	bne.n	800f7fc <_strtod_l+0x34>
 800f870:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f872:	9419      	str	r4, [sp, #100]	@ 0x64
 800f874:	2b00      	cmp	r3, #0
 800f876:	f040 8570 	bne.w	801035a <_strtod_l+0xb92>
 800f87a:	4652      	mov	r2, sl
 800f87c:	465b      	mov	r3, fp
 800f87e:	e7e5      	b.n	800f84c <_strtod_l+0x84>
 800f880:	2100      	movs	r1, #0
 800f882:	e7ef      	b.n	800f864 <_strtod_l+0x9c>
 800f884:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f886:	b13a      	cbz	r2, 800f898 <_strtod_l+0xd0>
 800f888:	2135      	movs	r1, #53	@ 0x35
 800f88a:	a81c      	add	r0, sp, #112	@ 0x70
 800f88c:	f7ff ff3a 	bl	800f704 <__copybits>
 800f890:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f892:	9805      	ldr	r0, [sp, #20]
 800f894:	f7ff fb08 	bl	800eea8 <_Bfree>
 800f898:	3e01      	subs	r6, #1
 800f89a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f89c:	2e04      	cmp	r6, #4
 800f89e:	d806      	bhi.n	800f8ae <_strtod_l+0xe6>
 800f8a0:	e8df f006 	tbb	[pc, r6]
 800f8a4:	201d0314 	.word	0x201d0314
 800f8a8:	14          	.byte	0x14
 800f8a9:	00          	.byte	0x00
 800f8aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f8ae:	05e1      	lsls	r1, r4, #23
 800f8b0:	bf48      	it	mi
 800f8b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f8b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f8ba:	0d1b      	lsrs	r3, r3, #20
 800f8bc:	051b      	lsls	r3, r3, #20
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d1bb      	bne.n	800f83a <_strtod_l+0x72>
 800f8c2:	f7fe fb21 	bl	800df08 <__errno>
 800f8c6:	2322      	movs	r3, #34	@ 0x22
 800f8c8:	6003      	str	r3, [r0, #0]
 800f8ca:	e7b6      	b.n	800f83a <_strtod_l+0x72>
 800f8cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f8d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f8d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f8d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f8dc:	e7e7      	b.n	800f8ae <_strtod_l+0xe6>
 800f8de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800fa5c <_strtod_l+0x294>
 800f8e2:	e7e4      	b.n	800f8ae <_strtod_l+0xe6>
 800f8e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f8e8:	f04f 3aff 	mov.w	sl, #4294967295
 800f8ec:	e7df      	b.n	800f8ae <_strtod_l+0xe6>
 800f8ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8f0:	1c5a      	adds	r2, r3, #1
 800f8f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f8f4:	785b      	ldrb	r3, [r3, #1]
 800f8f6:	2b30      	cmp	r3, #48	@ 0x30
 800f8f8:	d0f9      	beq.n	800f8ee <_strtod_l+0x126>
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d09d      	beq.n	800f83a <_strtod_l+0x72>
 800f8fe:	2301      	movs	r3, #1
 800f900:	9309      	str	r3, [sp, #36]	@ 0x24
 800f902:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f904:	930c      	str	r3, [sp, #48]	@ 0x30
 800f906:	2300      	movs	r3, #0
 800f908:	9308      	str	r3, [sp, #32]
 800f90a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f90c:	461f      	mov	r7, r3
 800f90e:	220a      	movs	r2, #10
 800f910:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f912:	7805      	ldrb	r5, [r0, #0]
 800f914:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f918:	b2d9      	uxtb	r1, r3
 800f91a:	2909      	cmp	r1, #9
 800f91c:	d928      	bls.n	800f970 <_strtod_l+0x1a8>
 800f91e:	494e      	ldr	r1, [pc, #312]	@ (800fa58 <_strtod_l+0x290>)
 800f920:	2201      	movs	r2, #1
 800f922:	f000 ffd5 	bl	80108d0 <strncmp>
 800f926:	2800      	cmp	r0, #0
 800f928:	d032      	beq.n	800f990 <_strtod_l+0x1c8>
 800f92a:	2000      	movs	r0, #0
 800f92c:	462a      	mov	r2, r5
 800f92e:	4681      	mov	r9, r0
 800f930:	463d      	mov	r5, r7
 800f932:	4603      	mov	r3, r0
 800f934:	2a65      	cmp	r2, #101	@ 0x65
 800f936:	d001      	beq.n	800f93c <_strtod_l+0x174>
 800f938:	2a45      	cmp	r2, #69	@ 0x45
 800f93a:	d114      	bne.n	800f966 <_strtod_l+0x19e>
 800f93c:	b91d      	cbnz	r5, 800f946 <_strtod_l+0x17e>
 800f93e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f940:	4302      	orrs	r2, r0
 800f942:	d095      	beq.n	800f870 <_strtod_l+0xa8>
 800f944:	2500      	movs	r5, #0
 800f946:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f948:	1c62      	adds	r2, r4, #1
 800f94a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f94c:	7862      	ldrb	r2, [r4, #1]
 800f94e:	2a2b      	cmp	r2, #43	@ 0x2b
 800f950:	d077      	beq.n	800fa42 <_strtod_l+0x27a>
 800f952:	2a2d      	cmp	r2, #45	@ 0x2d
 800f954:	d07b      	beq.n	800fa4e <_strtod_l+0x286>
 800f956:	f04f 0c00 	mov.w	ip, #0
 800f95a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f95e:	2909      	cmp	r1, #9
 800f960:	f240 8082 	bls.w	800fa68 <_strtod_l+0x2a0>
 800f964:	9419      	str	r4, [sp, #100]	@ 0x64
 800f966:	f04f 0800 	mov.w	r8, #0
 800f96a:	e0a2      	b.n	800fab2 <_strtod_l+0x2ea>
 800f96c:	2300      	movs	r3, #0
 800f96e:	e7c7      	b.n	800f900 <_strtod_l+0x138>
 800f970:	2f08      	cmp	r7, #8
 800f972:	bfd5      	itete	le
 800f974:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f976:	9908      	ldrgt	r1, [sp, #32]
 800f978:	fb02 3301 	mlale	r3, r2, r1, r3
 800f97c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f980:	f100 0001 	add.w	r0, r0, #1
 800f984:	bfd4      	ite	le
 800f986:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f988:	9308      	strgt	r3, [sp, #32]
 800f98a:	3701      	adds	r7, #1
 800f98c:	9019      	str	r0, [sp, #100]	@ 0x64
 800f98e:	e7bf      	b.n	800f910 <_strtod_l+0x148>
 800f990:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f992:	1c5a      	adds	r2, r3, #1
 800f994:	9219      	str	r2, [sp, #100]	@ 0x64
 800f996:	785a      	ldrb	r2, [r3, #1]
 800f998:	b37f      	cbz	r7, 800f9fa <_strtod_l+0x232>
 800f99a:	4681      	mov	r9, r0
 800f99c:	463d      	mov	r5, r7
 800f99e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f9a2:	2b09      	cmp	r3, #9
 800f9a4:	d912      	bls.n	800f9cc <_strtod_l+0x204>
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e7c4      	b.n	800f934 <_strtod_l+0x16c>
 800f9aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f9ac:	1c5a      	adds	r2, r3, #1
 800f9ae:	9219      	str	r2, [sp, #100]	@ 0x64
 800f9b0:	785a      	ldrb	r2, [r3, #1]
 800f9b2:	3001      	adds	r0, #1
 800f9b4:	2a30      	cmp	r2, #48	@ 0x30
 800f9b6:	d0f8      	beq.n	800f9aa <_strtod_l+0x1e2>
 800f9b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f9bc:	2b08      	cmp	r3, #8
 800f9be:	f200 84d3 	bhi.w	8010368 <_strtod_l+0xba0>
 800f9c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f9c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f9c6:	4681      	mov	r9, r0
 800f9c8:	2000      	movs	r0, #0
 800f9ca:	4605      	mov	r5, r0
 800f9cc:	3a30      	subs	r2, #48	@ 0x30
 800f9ce:	f100 0301 	add.w	r3, r0, #1
 800f9d2:	d02a      	beq.n	800fa2a <_strtod_l+0x262>
 800f9d4:	4499      	add	r9, r3
 800f9d6:	eb00 0c05 	add.w	ip, r0, r5
 800f9da:	462b      	mov	r3, r5
 800f9dc:	210a      	movs	r1, #10
 800f9de:	4563      	cmp	r3, ip
 800f9e0:	d10d      	bne.n	800f9fe <_strtod_l+0x236>
 800f9e2:	1c69      	adds	r1, r5, #1
 800f9e4:	4401      	add	r1, r0
 800f9e6:	4428      	add	r0, r5
 800f9e8:	2808      	cmp	r0, #8
 800f9ea:	dc16      	bgt.n	800fa1a <_strtod_l+0x252>
 800f9ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f9ee:	230a      	movs	r3, #10
 800f9f0:	fb03 2300 	mla	r3, r3, r0, r2
 800f9f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	e018      	b.n	800fa2c <_strtod_l+0x264>
 800f9fa:	4638      	mov	r0, r7
 800f9fc:	e7da      	b.n	800f9b4 <_strtod_l+0x1ec>
 800f9fe:	2b08      	cmp	r3, #8
 800fa00:	f103 0301 	add.w	r3, r3, #1
 800fa04:	dc03      	bgt.n	800fa0e <_strtod_l+0x246>
 800fa06:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fa08:	434e      	muls	r6, r1
 800fa0a:	960a      	str	r6, [sp, #40]	@ 0x28
 800fa0c:	e7e7      	b.n	800f9de <_strtod_l+0x216>
 800fa0e:	2b10      	cmp	r3, #16
 800fa10:	bfde      	ittt	le
 800fa12:	9e08      	ldrle	r6, [sp, #32]
 800fa14:	434e      	mulle	r6, r1
 800fa16:	9608      	strle	r6, [sp, #32]
 800fa18:	e7e1      	b.n	800f9de <_strtod_l+0x216>
 800fa1a:	280f      	cmp	r0, #15
 800fa1c:	dceb      	bgt.n	800f9f6 <_strtod_l+0x22e>
 800fa1e:	9808      	ldr	r0, [sp, #32]
 800fa20:	230a      	movs	r3, #10
 800fa22:	fb03 2300 	mla	r3, r3, r0, r2
 800fa26:	9308      	str	r3, [sp, #32]
 800fa28:	e7e5      	b.n	800f9f6 <_strtod_l+0x22e>
 800fa2a:	4629      	mov	r1, r5
 800fa2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fa2e:	1c50      	adds	r0, r2, #1
 800fa30:	9019      	str	r0, [sp, #100]	@ 0x64
 800fa32:	7852      	ldrb	r2, [r2, #1]
 800fa34:	4618      	mov	r0, r3
 800fa36:	460d      	mov	r5, r1
 800fa38:	e7b1      	b.n	800f99e <_strtod_l+0x1d6>
 800fa3a:	f04f 0900 	mov.w	r9, #0
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e77d      	b.n	800f93e <_strtod_l+0x176>
 800fa42:	f04f 0c00 	mov.w	ip, #0
 800fa46:	1ca2      	adds	r2, r4, #2
 800fa48:	9219      	str	r2, [sp, #100]	@ 0x64
 800fa4a:	78a2      	ldrb	r2, [r4, #2]
 800fa4c:	e785      	b.n	800f95a <_strtod_l+0x192>
 800fa4e:	f04f 0c01 	mov.w	ip, #1
 800fa52:	e7f8      	b.n	800fa46 <_strtod_l+0x27e>
 800fa54:	08012e08 	.word	0x08012e08
 800fa58:	08012df0 	.word	0x08012df0
 800fa5c:	7ff00000 	.word	0x7ff00000
 800fa60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fa62:	1c51      	adds	r1, r2, #1
 800fa64:	9119      	str	r1, [sp, #100]	@ 0x64
 800fa66:	7852      	ldrb	r2, [r2, #1]
 800fa68:	2a30      	cmp	r2, #48	@ 0x30
 800fa6a:	d0f9      	beq.n	800fa60 <_strtod_l+0x298>
 800fa6c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800fa70:	2908      	cmp	r1, #8
 800fa72:	f63f af78 	bhi.w	800f966 <_strtod_l+0x19e>
 800fa76:	3a30      	subs	r2, #48	@ 0x30
 800fa78:	920e      	str	r2, [sp, #56]	@ 0x38
 800fa7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fa7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800fa7e:	f04f 080a 	mov.w	r8, #10
 800fa82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fa84:	1c56      	adds	r6, r2, #1
 800fa86:	9619      	str	r6, [sp, #100]	@ 0x64
 800fa88:	7852      	ldrb	r2, [r2, #1]
 800fa8a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800fa8e:	f1be 0f09 	cmp.w	lr, #9
 800fa92:	d939      	bls.n	800fb08 <_strtod_l+0x340>
 800fa94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fa96:	1a76      	subs	r6, r6, r1
 800fa98:	2e08      	cmp	r6, #8
 800fa9a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800fa9e:	dc03      	bgt.n	800faa8 <_strtod_l+0x2e0>
 800faa0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800faa2:	4588      	cmp	r8, r1
 800faa4:	bfa8      	it	ge
 800faa6:	4688      	movge	r8, r1
 800faa8:	f1bc 0f00 	cmp.w	ip, #0
 800faac:	d001      	beq.n	800fab2 <_strtod_l+0x2ea>
 800faae:	f1c8 0800 	rsb	r8, r8, #0
 800fab2:	2d00      	cmp	r5, #0
 800fab4:	d14e      	bne.n	800fb54 <_strtod_l+0x38c>
 800fab6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fab8:	4308      	orrs	r0, r1
 800faba:	f47f aebe 	bne.w	800f83a <_strtod_l+0x72>
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f47f aed6 	bne.w	800f870 <_strtod_l+0xa8>
 800fac4:	2a69      	cmp	r2, #105	@ 0x69
 800fac6:	d028      	beq.n	800fb1a <_strtod_l+0x352>
 800fac8:	dc25      	bgt.n	800fb16 <_strtod_l+0x34e>
 800faca:	2a49      	cmp	r2, #73	@ 0x49
 800facc:	d025      	beq.n	800fb1a <_strtod_l+0x352>
 800face:	2a4e      	cmp	r2, #78	@ 0x4e
 800fad0:	f47f aece 	bne.w	800f870 <_strtod_l+0xa8>
 800fad4:	499b      	ldr	r1, [pc, #620]	@ (800fd44 <_strtod_l+0x57c>)
 800fad6:	a819      	add	r0, sp, #100	@ 0x64
 800fad8:	f001 f9e2 	bl	8010ea0 <__match>
 800fadc:	2800      	cmp	r0, #0
 800fade:	f43f aec7 	beq.w	800f870 <_strtod_l+0xa8>
 800fae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	2b28      	cmp	r3, #40	@ 0x28
 800fae8:	d12e      	bne.n	800fb48 <_strtod_l+0x380>
 800faea:	4997      	ldr	r1, [pc, #604]	@ (800fd48 <_strtod_l+0x580>)
 800faec:	aa1c      	add	r2, sp, #112	@ 0x70
 800faee:	a819      	add	r0, sp, #100	@ 0x64
 800faf0:	f001 f9ea 	bl	8010ec8 <__hexnan>
 800faf4:	2805      	cmp	r0, #5
 800faf6:	d127      	bne.n	800fb48 <_strtod_l+0x380>
 800faf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fafa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800fafe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800fb02:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800fb06:	e698      	b.n	800f83a <_strtod_l+0x72>
 800fb08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fb0a:	fb08 2101 	mla	r1, r8, r1, r2
 800fb0e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800fb12:	920e      	str	r2, [sp, #56]	@ 0x38
 800fb14:	e7b5      	b.n	800fa82 <_strtod_l+0x2ba>
 800fb16:	2a6e      	cmp	r2, #110	@ 0x6e
 800fb18:	e7da      	b.n	800fad0 <_strtod_l+0x308>
 800fb1a:	498c      	ldr	r1, [pc, #560]	@ (800fd4c <_strtod_l+0x584>)
 800fb1c:	a819      	add	r0, sp, #100	@ 0x64
 800fb1e:	f001 f9bf 	bl	8010ea0 <__match>
 800fb22:	2800      	cmp	r0, #0
 800fb24:	f43f aea4 	beq.w	800f870 <_strtod_l+0xa8>
 800fb28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb2a:	4989      	ldr	r1, [pc, #548]	@ (800fd50 <_strtod_l+0x588>)
 800fb2c:	3b01      	subs	r3, #1
 800fb2e:	a819      	add	r0, sp, #100	@ 0x64
 800fb30:	9319      	str	r3, [sp, #100]	@ 0x64
 800fb32:	f001 f9b5 	bl	8010ea0 <__match>
 800fb36:	b910      	cbnz	r0, 800fb3e <_strtod_l+0x376>
 800fb38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	9319      	str	r3, [sp, #100]	@ 0x64
 800fb3e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800fd60 <_strtod_l+0x598>
 800fb42:	f04f 0a00 	mov.w	sl, #0
 800fb46:	e678      	b.n	800f83a <_strtod_l+0x72>
 800fb48:	4882      	ldr	r0, [pc, #520]	@ (800fd54 <_strtod_l+0x58c>)
 800fb4a:	f000 fee5 	bl	8010918 <nan>
 800fb4e:	ec5b ab10 	vmov	sl, fp, d0
 800fb52:	e672      	b.n	800f83a <_strtod_l+0x72>
 800fb54:	eba8 0309 	sub.w	r3, r8, r9
 800fb58:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fb5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb5c:	2f00      	cmp	r7, #0
 800fb5e:	bf08      	it	eq
 800fb60:	462f      	moveq	r7, r5
 800fb62:	2d10      	cmp	r5, #16
 800fb64:	462c      	mov	r4, r5
 800fb66:	bfa8      	it	ge
 800fb68:	2410      	movge	r4, #16
 800fb6a:	f7f0 fccb 	bl	8000504 <__aeabi_ui2d>
 800fb6e:	2d09      	cmp	r5, #9
 800fb70:	4682      	mov	sl, r0
 800fb72:	468b      	mov	fp, r1
 800fb74:	dc13      	bgt.n	800fb9e <_strtod_l+0x3d6>
 800fb76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	f43f ae5e 	beq.w	800f83a <_strtod_l+0x72>
 800fb7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb80:	dd78      	ble.n	800fc74 <_strtod_l+0x4ac>
 800fb82:	2b16      	cmp	r3, #22
 800fb84:	dc5f      	bgt.n	800fc46 <_strtod_l+0x47e>
 800fb86:	4974      	ldr	r1, [pc, #464]	@ (800fd58 <_strtod_l+0x590>)
 800fb88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fb8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb90:	4652      	mov	r2, sl
 800fb92:	465b      	mov	r3, fp
 800fb94:	f7f0 fd30 	bl	80005f8 <__aeabi_dmul>
 800fb98:	4682      	mov	sl, r0
 800fb9a:	468b      	mov	fp, r1
 800fb9c:	e64d      	b.n	800f83a <_strtod_l+0x72>
 800fb9e:	4b6e      	ldr	r3, [pc, #440]	@ (800fd58 <_strtod_l+0x590>)
 800fba0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fba4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800fba8:	f7f0 fd26 	bl	80005f8 <__aeabi_dmul>
 800fbac:	4682      	mov	sl, r0
 800fbae:	9808      	ldr	r0, [sp, #32]
 800fbb0:	468b      	mov	fp, r1
 800fbb2:	f7f0 fca7 	bl	8000504 <__aeabi_ui2d>
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	460b      	mov	r3, r1
 800fbba:	4650      	mov	r0, sl
 800fbbc:	4659      	mov	r1, fp
 800fbbe:	f7f0 fb65 	bl	800028c <__adddf3>
 800fbc2:	2d0f      	cmp	r5, #15
 800fbc4:	4682      	mov	sl, r0
 800fbc6:	468b      	mov	fp, r1
 800fbc8:	ddd5      	ble.n	800fb76 <_strtod_l+0x3ae>
 800fbca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbcc:	1b2c      	subs	r4, r5, r4
 800fbce:	441c      	add	r4, r3
 800fbd0:	2c00      	cmp	r4, #0
 800fbd2:	f340 8096 	ble.w	800fd02 <_strtod_l+0x53a>
 800fbd6:	f014 030f 	ands.w	r3, r4, #15
 800fbda:	d00a      	beq.n	800fbf2 <_strtod_l+0x42a>
 800fbdc:	495e      	ldr	r1, [pc, #376]	@ (800fd58 <_strtod_l+0x590>)
 800fbde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fbe2:	4652      	mov	r2, sl
 800fbe4:	465b      	mov	r3, fp
 800fbe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbea:	f7f0 fd05 	bl	80005f8 <__aeabi_dmul>
 800fbee:	4682      	mov	sl, r0
 800fbf0:	468b      	mov	fp, r1
 800fbf2:	f034 040f 	bics.w	r4, r4, #15
 800fbf6:	d073      	beq.n	800fce0 <_strtod_l+0x518>
 800fbf8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800fbfc:	dd48      	ble.n	800fc90 <_strtod_l+0x4c8>
 800fbfe:	2400      	movs	r4, #0
 800fc00:	46a0      	mov	r8, r4
 800fc02:	940a      	str	r4, [sp, #40]	@ 0x28
 800fc04:	46a1      	mov	r9, r4
 800fc06:	9a05      	ldr	r2, [sp, #20]
 800fc08:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fd60 <_strtod_l+0x598>
 800fc0c:	2322      	movs	r3, #34	@ 0x22
 800fc0e:	6013      	str	r3, [r2, #0]
 800fc10:	f04f 0a00 	mov.w	sl, #0
 800fc14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f43f ae0f 	beq.w	800f83a <_strtod_l+0x72>
 800fc1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fc1e:	9805      	ldr	r0, [sp, #20]
 800fc20:	f7ff f942 	bl	800eea8 <_Bfree>
 800fc24:	9805      	ldr	r0, [sp, #20]
 800fc26:	4649      	mov	r1, r9
 800fc28:	f7ff f93e 	bl	800eea8 <_Bfree>
 800fc2c:	9805      	ldr	r0, [sp, #20]
 800fc2e:	4641      	mov	r1, r8
 800fc30:	f7ff f93a 	bl	800eea8 <_Bfree>
 800fc34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fc36:	9805      	ldr	r0, [sp, #20]
 800fc38:	f7ff f936 	bl	800eea8 <_Bfree>
 800fc3c:	9805      	ldr	r0, [sp, #20]
 800fc3e:	4621      	mov	r1, r4
 800fc40:	f7ff f932 	bl	800eea8 <_Bfree>
 800fc44:	e5f9      	b.n	800f83a <_strtod_l+0x72>
 800fc46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	dbbc      	blt.n	800fbca <_strtod_l+0x402>
 800fc50:	4c41      	ldr	r4, [pc, #260]	@ (800fd58 <_strtod_l+0x590>)
 800fc52:	f1c5 050f 	rsb	r5, r5, #15
 800fc56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fc5a:	4652      	mov	r2, sl
 800fc5c:	465b      	mov	r3, fp
 800fc5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc62:	f7f0 fcc9 	bl	80005f8 <__aeabi_dmul>
 800fc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc68:	1b5d      	subs	r5, r3, r5
 800fc6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fc6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fc72:	e78f      	b.n	800fb94 <_strtod_l+0x3cc>
 800fc74:	3316      	adds	r3, #22
 800fc76:	dba8      	blt.n	800fbca <_strtod_l+0x402>
 800fc78:	4b37      	ldr	r3, [pc, #220]	@ (800fd58 <_strtod_l+0x590>)
 800fc7a:	eba9 0808 	sub.w	r8, r9, r8
 800fc7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fc82:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fc86:	4650      	mov	r0, sl
 800fc88:	4659      	mov	r1, fp
 800fc8a:	f7f0 fddf 	bl	800084c <__aeabi_ddiv>
 800fc8e:	e783      	b.n	800fb98 <_strtod_l+0x3d0>
 800fc90:	4b32      	ldr	r3, [pc, #200]	@ (800fd5c <_strtod_l+0x594>)
 800fc92:	9308      	str	r3, [sp, #32]
 800fc94:	2300      	movs	r3, #0
 800fc96:	1124      	asrs	r4, r4, #4
 800fc98:	4650      	mov	r0, sl
 800fc9a:	4659      	mov	r1, fp
 800fc9c:	461e      	mov	r6, r3
 800fc9e:	2c01      	cmp	r4, #1
 800fca0:	dc21      	bgt.n	800fce6 <_strtod_l+0x51e>
 800fca2:	b10b      	cbz	r3, 800fca8 <_strtod_l+0x4e0>
 800fca4:	4682      	mov	sl, r0
 800fca6:	468b      	mov	fp, r1
 800fca8:	492c      	ldr	r1, [pc, #176]	@ (800fd5c <_strtod_l+0x594>)
 800fcaa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fcae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fcb2:	4652      	mov	r2, sl
 800fcb4:	465b      	mov	r3, fp
 800fcb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcba:	f7f0 fc9d 	bl	80005f8 <__aeabi_dmul>
 800fcbe:	4b28      	ldr	r3, [pc, #160]	@ (800fd60 <_strtod_l+0x598>)
 800fcc0:	460a      	mov	r2, r1
 800fcc2:	400b      	ands	r3, r1
 800fcc4:	4927      	ldr	r1, [pc, #156]	@ (800fd64 <_strtod_l+0x59c>)
 800fcc6:	428b      	cmp	r3, r1
 800fcc8:	4682      	mov	sl, r0
 800fcca:	d898      	bhi.n	800fbfe <_strtod_l+0x436>
 800fccc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800fcd0:	428b      	cmp	r3, r1
 800fcd2:	bf86      	itte	hi
 800fcd4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800fd68 <_strtod_l+0x5a0>
 800fcd8:	f04f 3aff 	movhi.w	sl, #4294967295
 800fcdc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fce0:	2300      	movs	r3, #0
 800fce2:	9308      	str	r3, [sp, #32]
 800fce4:	e07a      	b.n	800fddc <_strtod_l+0x614>
 800fce6:	07e2      	lsls	r2, r4, #31
 800fce8:	d505      	bpl.n	800fcf6 <_strtod_l+0x52e>
 800fcea:	9b08      	ldr	r3, [sp, #32]
 800fcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf0:	f7f0 fc82 	bl	80005f8 <__aeabi_dmul>
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	9a08      	ldr	r2, [sp, #32]
 800fcf8:	3208      	adds	r2, #8
 800fcfa:	3601      	adds	r6, #1
 800fcfc:	1064      	asrs	r4, r4, #1
 800fcfe:	9208      	str	r2, [sp, #32]
 800fd00:	e7cd      	b.n	800fc9e <_strtod_l+0x4d6>
 800fd02:	d0ed      	beq.n	800fce0 <_strtod_l+0x518>
 800fd04:	4264      	negs	r4, r4
 800fd06:	f014 020f 	ands.w	r2, r4, #15
 800fd0a:	d00a      	beq.n	800fd22 <_strtod_l+0x55a>
 800fd0c:	4b12      	ldr	r3, [pc, #72]	@ (800fd58 <_strtod_l+0x590>)
 800fd0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd12:	4650      	mov	r0, sl
 800fd14:	4659      	mov	r1, fp
 800fd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1a:	f7f0 fd97 	bl	800084c <__aeabi_ddiv>
 800fd1e:	4682      	mov	sl, r0
 800fd20:	468b      	mov	fp, r1
 800fd22:	1124      	asrs	r4, r4, #4
 800fd24:	d0dc      	beq.n	800fce0 <_strtod_l+0x518>
 800fd26:	2c1f      	cmp	r4, #31
 800fd28:	dd20      	ble.n	800fd6c <_strtod_l+0x5a4>
 800fd2a:	2400      	movs	r4, #0
 800fd2c:	46a0      	mov	r8, r4
 800fd2e:	940a      	str	r4, [sp, #40]	@ 0x28
 800fd30:	46a1      	mov	r9, r4
 800fd32:	9a05      	ldr	r2, [sp, #20]
 800fd34:	2322      	movs	r3, #34	@ 0x22
 800fd36:	f04f 0a00 	mov.w	sl, #0
 800fd3a:	f04f 0b00 	mov.w	fp, #0
 800fd3e:	6013      	str	r3, [r2, #0]
 800fd40:	e768      	b.n	800fc14 <_strtod_l+0x44c>
 800fd42:	bf00      	nop
 800fd44:	08012bdd 	.word	0x08012bdd
 800fd48:	08012df4 	.word	0x08012df4
 800fd4c:	08012bd5 	.word	0x08012bd5
 800fd50:	08012c0c 	.word	0x08012c0c
 800fd54:	08012f9d 	.word	0x08012f9d
 800fd58:	08012d28 	.word	0x08012d28
 800fd5c:	08012d00 	.word	0x08012d00
 800fd60:	7ff00000 	.word	0x7ff00000
 800fd64:	7ca00000 	.word	0x7ca00000
 800fd68:	7fefffff 	.word	0x7fefffff
 800fd6c:	f014 0310 	ands.w	r3, r4, #16
 800fd70:	bf18      	it	ne
 800fd72:	236a      	movne	r3, #106	@ 0x6a
 800fd74:	4ea9      	ldr	r6, [pc, #676]	@ (801001c <_strtod_l+0x854>)
 800fd76:	9308      	str	r3, [sp, #32]
 800fd78:	4650      	mov	r0, sl
 800fd7a:	4659      	mov	r1, fp
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	07e2      	lsls	r2, r4, #31
 800fd80:	d504      	bpl.n	800fd8c <_strtod_l+0x5c4>
 800fd82:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fd86:	f7f0 fc37 	bl	80005f8 <__aeabi_dmul>
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	1064      	asrs	r4, r4, #1
 800fd8e:	f106 0608 	add.w	r6, r6, #8
 800fd92:	d1f4      	bne.n	800fd7e <_strtod_l+0x5b6>
 800fd94:	b10b      	cbz	r3, 800fd9a <_strtod_l+0x5d2>
 800fd96:	4682      	mov	sl, r0
 800fd98:	468b      	mov	fp, r1
 800fd9a:	9b08      	ldr	r3, [sp, #32]
 800fd9c:	b1b3      	cbz	r3, 800fdcc <_strtod_l+0x604>
 800fd9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fda2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	4659      	mov	r1, fp
 800fdaa:	dd0f      	ble.n	800fdcc <_strtod_l+0x604>
 800fdac:	2b1f      	cmp	r3, #31
 800fdae:	dd55      	ble.n	800fe5c <_strtod_l+0x694>
 800fdb0:	2b34      	cmp	r3, #52	@ 0x34
 800fdb2:	bfde      	ittt	le
 800fdb4:	f04f 33ff 	movle.w	r3, #4294967295
 800fdb8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fdbc:	4093      	lslle	r3, r2
 800fdbe:	f04f 0a00 	mov.w	sl, #0
 800fdc2:	bfcc      	ite	gt
 800fdc4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fdc8:	ea03 0b01 	andle.w	fp, r3, r1
 800fdcc:	2200      	movs	r2, #0
 800fdce:	2300      	movs	r3, #0
 800fdd0:	4650      	mov	r0, sl
 800fdd2:	4659      	mov	r1, fp
 800fdd4:	f7f0 fe78 	bl	8000ac8 <__aeabi_dcmpeq>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	d1a6      	bne.n	800fd2a <_strtod_l+0x562>
 800fddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdde:	9300      	str	r3, [sp, #0]
 800fde0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fde2:	9805      	ldr	r0, [sp, #20]
 800fde4:	462b      	mov	r3, r5
 800fde6:	463a      	mov	r2, r7
 800fde8:	f7ff f8c6 	bl	800ef78 <__s2b>
 800fdec:	900a      	str	r0, [sp, #40]	@ 0x28
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	f43f af05 	beq.w	800fbfe <_strtod_l+0x436>
 800fdf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fdf6:	2a00      	cmp	r2, #0
 800fdf8:	eba9 0308 	sub.w	r3, r9, r8
 800fdfc:	bfa8      	it	ge
 800fdfe:	2300      	movge	r3, #0
 800fe00:	9312      	str	r3, [sp, #72]	@ 0x48
 800fe02:	2400      	movs	r4, #0
 800fe04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fe08:	9316      	str	r3, [sp, #88]	@ 0x58
 800fe0a:	46a0      	mov	r8, r4
 800fe0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe0e:	9805      	ldr	r0, [sp, #20]
 800fe10:	6859      	ldr	r1, [r3, #4]
 800fe12:	f7ff f809 	bl	800ee28 <_Balloc>
 800fe16:	4681      	mov	r9, r0
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	f43f aef4 	beq.w	800fc06 <_strtod_l+0x43e>
 800fe1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe20:	691a      	ldr	r2, [r3, #16]
 800fe22:	3202      	adds	r2, #2
 800fe24:	f103 010c 	add.w	r1, r3, #12
 800fe28:	0092      	lsls	r2, r2, #2
 800fe2a:	300c      	adds	r0, #12
 800fe2c:	f7fe f899 	bl	800df62 <memcpy>
 800fe30:	ec4b ab10 	vmov	d0, sl, fp
 800fe34:	9805      	ldr	r0, [sp, #20]
 800fe36:	aa1c      	add	r2, sp, #112	@ 0x70
 800fe38:	a91b      	add	r1, sp, #108	@ 0x6c
 800fe3a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800fe3e:	f7ff fbd7 	bl	800f5f0 <__d2b>
 800fe42:	901a      	str	r0, [sp, #104]	@ 0x68
 800fe44:	2800      	cmp	r0, #0
 800fe46:	f43f aede 	beq.w	800fc06 <_strtod_l+0x43e>
 800fe4a:	9805      	ldr	r0, [sp, #20]
 800fe4c:	2101      	movs	r1, #1
 800fe4e:	f7ff f929 	bl	800f0a4 <__i2b>
 800fe52:	4680      	mov	r8, r0
 800fe54:	b948      	cbnz	r0, 800fe6a <_strtod_l+0x6a2>
 800fe56:	f04f 0800 	mov.w	r8, #0
 800fe5a:	e6d4      	b.n	800fc06 <_strtod_l+0x43e>
 800fe5c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe60:	fa02 f303 	lsl.w	r3, r2, r3
 800fe64:	ea03 0a0a 	and.w	sl, r3, sl
 800fe68:	e7b0      	b.n	800fdcc <_strtod_l+0x604>
 800fe6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fe6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fe6e:	2d00      	cmp	r5, #0
 800fe70:	bfab      	itete	ge
 800fe72:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fe74:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fe76:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fe78:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fe7a:	bfac      	ite	ge
 800fe7c:	18ef      	addge	r7, r5, r3
 800fe7e:	1b5e      	sublt	r6, r3, r5
 800fe80:	9b08      	ldr	r3, [sp, #32]
 800fe82:	1aed      	subs	r5, r5, r3
 800fe84:	4415      	add	r5, r2
 800fe86:	4b66      	ldr	r3, [pc, #408]	@ (8010020 <_strtod_l+0x858>)
 800fe88:	3d01      	subs	r5, #1
 800fe8a:	429d      	cmp	r5, r3
 800fe8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fe90:	da50      	bge.n	800ff34 <_strtod_l+0x76c>
 800fe92:	1b5b      	subs	r3, r3, r5
 800fe94:	2b1f      	cmp	r3, #31
 800fe96:	eba2 0203 	sub.w	r2, r2, r3
 800fe9a:	f04f 0101 	mov.w	r1, #1
 800fe9e:	dc3d      	bgt.n	800ff1c <_strtod_l+0x754>
 800fea0:	fa01 f303 	lsl.w	r3, r1, r3
 800fea4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fea6:	2300      	movs	r3, #0
 800fea8:	9310      	str	r3, [sp, #64]	@ 0x40
 800feaa:	18bd      	adds	r5, r7, r2
 800feac:	9b08      	ldr	r3, [sp, #32]
 800feae:	42af      	cmp	r7, r5
 800feb0:	4416      	add	r6, r2
 800feb2:	441e      	add	r6, r3
 800feb4:	463b      	mov	r3, r7
 800feb6:	bfa8      	it	ge
 800feb8:	462b      	movge	r3, r5
 800feba:	42b3      	cmp	r3, r6
 800febc:	bfa8      	it	ge
 800febe:	4633      	movge	r3, r6
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	bfc2      	ittt	gt
 800fec4:	1aed      	subgt	r5, r5, r3
 800fec6:	1af6      	subgt	r6, r6, r3
 800fec8:	1aff      	subgt	r7, r7, r3
 800feca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fecc:	2b00      	cmp	r3, #0
 800fece:	dd16      	ble.n	800fefe <_strtod_l+0x736>
 800fed0:	4641      	mov	r1, r8
 800fed2:	9805      	ldr	r0, [sp, #20]
 800fed4:	461a      	mov	r2, r3
 800fed6:	f7ff f9a5 	bl	800f224 <__pow5mult>
 800feda:	4680      	mov	r8, r0
 800fedc:	2800      	cmp	r0, #0
 800fede:	d0ba      	beq.n	800fe56 <_strtod_l+0x68e>
 800fee0:	4601      	mov	r1, r0
 800fee2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fee4:	9805      	ldr	r0, [sp, #20]
 800fee6:	f7ff f8f3 	bl	800f0d0 <__multiply>
 800feea:	900e      	str	r0, [sp, #56]	@ 0x38
 800feec:	2800      	cmp	r0, #0
 800feee:	f43f ae8a 	beq.w	800fc06 <_strtod_l+0x43e>
 800fef2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fef4:	9805      	ldr	r0, [sp, #20]
 800fef6:	f7fe ffd7 	bl	800eea8 <_Bfree>
 800fefa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fefc:	931a      	str	r3, [sp, #104]	@ 0x68
 800fefe:	2d00      	cmp	r5, #0
 800ff00:	dc1d      	bgt.n	800ff3e <_strtod_l+0x776>
 800ff02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	dd23      	ble.n	800ff50 <_strtod_l+0x788>
 800ff08:	4649      	mov	r1, r9
 800ff0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ff0c:	9805      	ldr	r0, [sp, #20]
 800ff0e:	f7ff f989 	bl	800f224 <__pow5mult>
 800ff12:	4681      	mov	r9, r0
 800ff14:	b9e0      	cbnz	r0, 800ff50 <_strtod_l+0x788>
 800ff16:	f04f 0900 	mov.w	r9, #0
 800ff1a:	e674      	b.n	800fc06 <_strtod_l+0x43e>
 800ff1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ff20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ff24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ff28:	35e2      	adds	r5, #226	@ 0xe2
 800ff2a:	fa01 f305 	lsl.w	r3, r1, r5
 800ff2e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ff30:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ff32:	e7ba      	b.n	800feaa <_strtod_l+0x6e2>
 800ff34:	2300      	movs	r3, #0
 800ff36:	9310      	str	r3, [sp, #64]	@ 0x40
 800ff38:	2301      	movs	r3, #1
 800ff3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ff3c:	e7b5      	b.n	800feaa <_strtod_l+0x6e2>
 800ff3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ff40:	9805      	ldr	r0, [sp, #20]
 800ff42:	462a      	mov	r2, r5
 800ff44:	f7ff f9c8 	bl	800f2d8 <__lshift>
 800ff48:	901a      	str	r0, [sp, #104]	@ 0x68
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	d1d9      	bne.n	800ff02 <_strtod_l+0x73a>
 800ff4e:	e65a      	b.n	800fc06 <_strtod_l+0x43e>
 800ff50:	2e00      	cmp	r6, #0
 800ff52:	dd07      	ble.n	800ff64 <_strtod_l+0x79c>
 800ff54:	4649      	mov	r1, r9
 800ff56:	9805      	ldr	r0, [sp, #20]
 800ff58:	4632      	mov	r2, r6
 800ff5a:	f7ff f9bd 	bl	800f2d8 <__lshift>
 800ff5e:	4681      	mov	r9, r0
 800ff60:	2800      	cmp	r0, #0
 800ff62:	d0d8      	beq.n	800ff16 <_strtod_l+0x74e>
 800ff64:	2f00      	cmp	r7, #0
 800ff66:	dd08      	ble.n	800ff7a <_strtod_l+0x7b2>
 800ff68:	4641      	mov	r1, r8
 800ff6a:	9805      	ldr	r0, [sp, #20]
 800ff6c:	463a      	mov	r2, r7
 800ff6e:	f7ff f9b3 	bl	800f2d8 <__lshift>
 800ff72:	4680      	mov	r8, r0
 800ff74:	2800      	cmp	r0, #0
 800ff76:	f43f ae46 	beq.w	800fc06 <_strtod_l+0x43e>
 800ff7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ff7c:	9805      	ldr	r0, [sp, #20]
 800ff7e:	464a      	mov	r2, r9
 800ff80:	f7ff fa32 	bl	800f3e8 <__mdiff>
 800ff84:	4604      	mov	r4, r0
 800ff86:	2800      	cmp	r0, #0
 800ff88:	f43f ae3d 	beq.w	800fc06 <_strtod_l+0x43e>
 800ff8c:	68c3      	ldr	r3, [r0, #12]
 800ff8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ff90:	2300      	movs	r3, #0
 800ff92:	60c3      	str	r3, [r0, #12]
 800ff94:	4641      	mov	r1, r8
 800ff96:	f7ff fa0b 	bl	800f3b0 <__mcmp>
 800ff9a:	2800      	cmp	r0, #0
 800ff9c:	da46      	bge.n	801002c <_strtod_l+0x864>
 800ff9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffa0:	ea53 030a 	orrs.w	r3, r3, sl
 800ffa4:	d16c      	bne.n	8010080 <_strtod_l+0x8b8>
 800ffa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d168      	bne.n	8010080 <_strtod_l+0x8b8>
 800ffae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ffb2:	0d1b      	lsrs	r3, r3, #20
 800ffb4:	051b      	lsls	r3, r3, #20
 800ffb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ffba:	d961      	bls.n	8010080 <_strtod_l+0x8b8>
 800ffbc:	6963      	ldr	r3, [r4, #20]
 800ffbe:	b913      	cbnz	r3, 800ffc6 <_strtod_l+0x7fe>
 800ffc0:	6923      	ldr	r3, [r4, #16]
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	dd5c      	ble.n	8010080 <_strtod_l+0x8b8>
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	2201      	movs	r2, #1
 800ffca:	9805      	ldr	r0, [sp, #20]
 800ffcc:	f7ff f984 	bl	800f2d8 <__lshift>
 800ffd0:	4641      	mov	r1, r8
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	f7ff f9ec 	bl	800f3b0 <__mcmp>
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	dd51      	ble.n	8010080 <_strtod_l+0x8b8>
 800ffdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ffe0:	9a08      	ldr	r2, [sp, #32]
 800ffe2:	0d1b      	lsrs	r3, r3, #20
 800ffe4:	051b      	lsls	r3, r3, #20
 800ffe6:	2a00      	cmp	r2, #0
 800ffe8:	d06b      	beq.n	80100c2 <_strtod_l+0x8fa>
 800ffea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ffee:	d868      	bhi.n	80100c2 <_strtod_l+0x8fa>
 800fff0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fff4:	f67f ae9d 	bls.w	800fd32 <_strtod_l+0x56a>
 800fff8:	4b0a      	ldr	r3, [pc, #40]	@ (8010024 <_strtod_l+0x85c>)
 800fffa:	4650      	mov	r0, sl
 800fffc:	4659      	mov	r1, fp
 800fffe:	2200      	movs	r2, #0
 8010000:	f7f0 fafa 	bl	80005f8 <__aeabi_dmul>
 8010004:	4b08      	ldr	r3, [pc, #32]	@ (8010028 <_strtod_l+0x860>)
 8010006:	400b      	ands	r3, r1
 8010008:	4682      	mov	sl, r0
 801000a:	468b      	mov	fp, r1
 801000c:	2b00      	cmp	r3, #0
 801000e:	f47f ae05 	bne.w	800fc1c <_strtod_l+0x454>
 8010012:	9a05      	ldr	r2, [sp, #20]
 8010014:	2322      	movs	r3, #34	@ 0x22
 8010016:	6013      	str	r3, [r2, #0]
 8010018:	e600      	b.n	800fc1c <_strtod_l+0x454>
 801001a:	bf00      	nop
 801001c:	08012e20 	.word	0x08012e20
 8010020:	fffffc02 	.word	0xfffffc02
 8010024:	39500000 	.word	0x39500000
 8010028:	7ff00000 	.word	0x7ff00000
 801002c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010030:	d165      	bne.n	80100fe <_strtod_l+0x936>
 8010032:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010038:	b35a      	cbz	r2, 8010092 <_strtod_l+0x8ca>
 801003a:	4a9f      	ldr	r2, [pc, #636]	@ (80102b8 <_strtod_l+0xaf0>)
 801003c:	4293      	cmp	r3, r2
 801003e:	d12b      	bne.n	8010098 <_strtod_l+0x8d0>
 8010040:	9b08      	ldr	r3, [sp, #32]
 8010042:	4651      	mov	r1, sl
 8010044:	b303      	cbz	r3, 8010088 <_strtod_l+0x8c0>
 8010046:	4b9d      	ldr	r3, [pc, #628]	@ (80102bc <_strtod_l+0xaf4>)
 8010048:	465a      	mov	r2, fp
 801004a:	4013      	ands	r3, r2
 801004c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010050:	f04f 32ff 	mov.w	r2, #4294967295
 8010054:	d81b      	bhi.n	801008e <_strtod_l+0x8c6>
 8010056:	0d1b      	lsrs	r3, r3, #20
 8010058:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801005c:	fa02 f303 	lsl.w	r3, r2, r3
 8010060:	4299      	cmp	r1, r3
 8010062:	d119      	bne.n	8010098 <_strtod_l+0x8d0>
 8010064:	4b96      	ldr	r3, [pc, #600]	@ (80102c0 <_strtod_l+0xaf8>)
 8010066:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010068:	429a      	cmp	r2, r3
 801006a:	d102      	bne.n	8010072 <_strtod_l+0x8aa>
 801006c:	3101      	adds	r1, #1
 801006e:	f43f adca 	beq.w	800fc06 <_strtod_l+0x43e>
 8010072:	4b92      	ldr	r3, [pc, #584]	@ (80102bc <_strtod_l+0xaf4>)
 8010074:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010076:	401a      	ands	r2, r3
 8010078:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801007c:	f04f 0a00 	mov.w	sl, #0
 8010080:	9b08      	ldr	r3, [sp, #32]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d1b8      	bne.n	800fff8 <_strtod_l+0x830>
 8010086:	e5c9      	b.n	800fc1c <_strtod_l+0x454>
 8010088:	f04f 33ff 	mov.w	r3, #4294967295
 801008c:	e7e8      	b.n	8010060 <_strtod_l+0x898>
 801008e:	4613      	mov	r3, r2
 8010090:	e7e6      	b.n	8010060 <_strtod_l+0x898>
 8010092:	ea53 030a 	orrs.w	r3, r3, sl
 8010096:	d0a1      	beq.n	800ffdc <_strtod_l+0x814>
 8010098:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801009a:	b1db      	cbz	r3, 80100d4 <_strtod_l+0x90c>
 801009c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801009e:	4213      	tst	r3, r2
 80100a0:	d0ee      	beq.n	8010080 <_strtod_l+0x8b8>
 80100a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100a4:	9a08      	ldr	r2, [sp, #32]
 80100a6:	4650      	mov	r0, sl
 80100a8:	4659      	mov	r1, fp
 80100aa:	b1bb      	cbz	r3, 80100dc <_strtod_l+0x914>
 80100ac:	f7ff fb6e 	bl	800f78c <sulp>
 80100b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80100b4:	ec53 2b10 	vmov	r2, r3, d0
 80100b8:	f7f0 f8e8 	bl	800028c <__adddf3>
 80100bc:	4682      	mov	sl, r0
 80100be:	468b      	mov	fp, r1
 80100c0:	e7de      	b.n	8010080 <_strtod_l+0x8b8>
 80100c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80100c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80100ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80100ce:	f04f 3aff 	mov.w	sl, #4294967295
 80100d2:	e7d5      	b.n	8010080 <_strtod_l+0x8b8>
 80100d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80100d6:	ea13 0f0a 	tst.w	r3, sl
 80100da:	e7e1      	b.n	80100a0 <_strtod_l+0x8d8>
 80100dc:	f7ff fb56 	bl	800f78c <sulp>
 80100e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80100e4:	ec53 2b10 	vmov	r2, r3, d0
 80100e8:	f7f0 f8ce 	bl	8000288 <__aeabi_dsub>
 80100ec:	2200      	movs	r2, #0
 80100ee:	2300      	movs	r3, #0
 80100f0:	4682      	mov	sl, r0
 80100f2:	468b      	mov	fp, r1
 80100f4:	f7f0 fce8 	bl	8000ac8 <__aeabi_dcmpeq>
 80100f8:	2800      	cmp	r0, #0
 80100fa:	d0c1      	beq.n	8010080 <_strtod_l+0x8b8>
 80100fc:	e619      	b.n	800fd32 <_strtod_l+0x56a>
 80100fe:	4641      	mov	r1, r8
 8010100:	4620      	mov	r0, r4
 8010102:	f7ff facd 	bl	800f6a0 <__ratio>
 8010106:	ec57 6b10 	vmov	r6, r7, d0
 801010a:	2200      	movs	r2, #0
 801010c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010110:	4630      	mov	r0, r6
 8010112:	4639      	mov	r1, r7
 8010114:	f7f0 fcec 	bl	8000af0 <__aeabi_dcmple>
 8010118:	2800      	cmp	r0, #0
 801011a:	d06f      	beq.n	80101fc <_strtod_l+0xa34>
 801011c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801011e:	2b00      	cmp	r3, #0
 8010120:	d17a      	bne.n	8010218 <_strtod_l+0xa50>
 8010122:	f1ba 0f00 	cmp.w	sl, #0
 8010126:	d158      	bne.n	80101da <_strtod_l+0xa12>
 8010128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801012a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801012e:	2b00      	cmp	r3, #0
 8010130:	d15a      	bne.n	80101e8 <_strtod_l+0xa20>
 8010132:	4b64      	ldr	r3, [pc, #400]	@ (80102c4 <_strtod_l+0xafc>)
 8010134:	2200      	movs	r2, #0
 8010136:	4630      	mov	r0, r6
 8010138:	4639      	mov	r1, r7
 801013a:	f7f0 fccf 	bl	8000adc <__aeabi_dcmplt>
 801013e:	2800      	cmp	r0, #0
 8010140:	d159      	bne.n	80101f6 <_strtod_l+0xa2e>
 8010142:	4630      	mov	r0, r6
 8010144:	4639      	mov	r1, r7
 8010146:	4b60      	ldr	r3, [pc, #384]	@ (80102c8 <_strtod_l+0xb00>)
 8010148:	2200      	movs	r2, #0
 801014a:	f7f0 fa55 	bl	80005f8 <__aeabi_dmul>
 801014e:	4606      	mov	r6, r0
 8010150:	460f      	mov	r7, r1
 8010152:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010156:	9606      	str	r6, [sp, #24]
 8010158:	9307      	str	r3, [sp, #28]
 801015a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801015e:	4d57      	ldr	r5, [pc, #348]	@ (80102bc <_strtod_l+0xaf4>)
 8010160:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010164:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010166:	401d      	ands	r5, r3
 8010168:	4b58      	ldr	r3, [pc, #352]	@ (80102cc <_strtod_l+0xb04>)
 801016a:	429d      	cmp	r5, r3
 801016c:	f040 80b2 	bne.w	80102d4 <_strtod_l+0xb0c>
 8010170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010172:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010176:	ec4b ab10 	vmov	d0, sl, fp
 801017a:	f7ff f9c9 	bl	800f510 <__ulp>
 801017e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010182:	ec51 0b10 	vmov	r0, r1, d0
 8010186:	f7f0 fa37 	bl	80005f8 <__aeabi_dmul>
 801018a:	4652      	mov	r2, sl
 801018c:	465b      	mov	r3, fp
 801018e:	f7f0 f87d 	bl	800028c <__adddf3>
 8010192:	460b      	mov	r3, r1
 8010194:	4949      	ldr	r1, [pc, #292]	@ (80102bc <_strtod_l+0xaf4>)
 8010196:	4a4e      	ldr	r2, [pc, #312]	@ (80102d0 <_strtod_l+0xb08>)
 8010198:	4019      	ands	r1, r3
 801019a:	4291      	cmp	r1, r2
 801019c:	4682      	mov	sl, r0
 801019e:	d942      	bls.n	8010226 <_strtod_l+0xa5e>
 80101a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80101a2:	4b47      	ldr	r3, [pc, #284]	@ (80102c0 <_strtod_l+0xaf8>)
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d103      	bne.n	80101b0 <_strtod_l+0x9e8>
 80101a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101aa:	3301      	adds	r3, #1
 80101ac:	f43f ad2b 	beq.w	800fc06 <_strtod_l+0x43e>
 80101b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80102c0 <_strtod_l+0xaf8>
 80101b4:	f04f 3aff 	mov.w	sl, #4294967295
 80101b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80101ba:	9805      	ldr	r0, [sp, #20]
 80101bc:	f7fe fe74 	bl	800eea8 <_Bfree>
 80101c0:	9805      	ldr	r0, [sp, #20]
 80101c2:	4649      	mov	r1, r9
 80101c4:	f7fe fe70 	bl	800eea8 <_Bfree>
 80101c8:	9805      	ldr	r0, [sp, #20]
 80101ca:	4641      	mov	r1, r8
 80101cc:	f7fe fe6c 	bl	800eea8 <_Bfree>
 80101d0:	9805      	ldr	r0, [sp, #20]
 80101d2:	4621      	mov	r1, r4
 80101d4:	f7fe fe68 	bl	800eea8 <_Bfree>
 80101d8:	e618      	b.n	800fe0c <_strtod_l+0x644>
 80101da:	f1ba 0f01 	cmp.w	sl, #1
 80101de:	d103      	bne.n	80101e8 <_strtod_l+0xa20>
 80101e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	f43f ada5 	beq.w	800fd32 <_strtod_l+0x56a>
 80101e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010298 <_strtod_l+0xad0>
 80101ec:	4f35      	ldr	r7, [pc, #212]	@ (80102c4 <_strtod_l+0xafc>)
 80101ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80101f2:	2600      	movs	r6, #0
 80101f4:	e7b1      	b.n	801015a <_strtod_l+0x992>
 80101f6:	4f34      	ldr	r7, [pc, #208]	@ (80102c8 <_strtod_l+0xb00>)
 80101f8:	2600      	movs	r6, #0
 80101fa:	e7aa      	b.n	8010152 <_strtod_l+0x98a>
 80101fc:	4b32      	ldr	r3, [pc, #200]	@ (80102c8 <_strtod_l+0xb00>)
 80101fe:	4630      	mov	r0, r6
 8010200:	4639      	mov	r1, r7
 8010202:	2200      	movs	r2, #0
 8010204:	f7f0 f9f8 	bl	80005f8 <__aeabi_dmul>
 8010208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801020a:	4606      	mov	r6, r0
 801020c:	460f      	mov	r7, r1
 801020e:	2b00      	cmp	r3, #0
 8010210:	d09f      	beq.n	8010152 <_strtod_l+0x98a>
 8010212:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010216:	e7a0      	b.n	801015a <_strtod_l+0x992>
 8010218:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80102a0 <_strtod_l+0xad8>
 801021c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010220:	ec57 6b17 	vmov	r6, r7, d7
 8010224:	e799      	b.n	801015a <_strtod_l+0x992>
 8010226:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801022a:	9b08      	ldr	r3, [sp, #32]
 801022c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010230:	2b00      	cmp	r3, #0
 8010232:	d1c1      	bne.n	80101b8 <_strtod_l+0x9f0>
 8010234:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010238:	0d1b      	lsrs	r3, r3, #20
 801023a:	051b      	lsls	r3, r3, #20
 801023c:	429d      	cmp	r5, r3
 801023e:	d1bb      	bne.n	80101b8 <_strtod_l+0x9f0>
 8010240:	4630      	mov	r0, r6
 8010242:	4639      	mov	r1, r7
 8010244:	f7f0 fd38 	bl	8000cb8 <__aeabi_d2lz>
 8010248:	f7f0 f9a8 	bl	800059c <__aeabi_l2d>
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	4630      	mov	r0, r6
 8010252:	4639      	mov	r1, r7
 8010254:	f7f0 f818 	bl	8000288 <__aeabi_dsub>
 8010258:	460b      	mov	r3, r1
 801025a:	4602      	mov	r2, r0
 801025c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010260:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010266:	ea46 060a 	orr.w	r6, r6, sl
 801026a:	431e      	orrs	r6, r3
 801026c:	d06f      	beq.n	801034e <_strtod_l+0xb86>
 801026e:	a30e      	add	r3, pc, #56	@ (adr r3, 80102a8 <_strtod_l+0xae0>)
 8010270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010274:	f7f0 fc32 	bl	8000adc <__aeabi_dcmplt>
 8010278:	2800      	cmp	r0, #0
 801027a:	f47f accf 	bne.w	800fc1c <_strtod_l+0x454>
 801027e:	a30c      	add	r3, pc, #48	@ (adr r3, 80102b0 <_strtod_l+0xae8>)
 8010280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010288:	f7f0 fc46 	bl	8000b18 <__aeabi_dcmpgt>
 801028c:	2800      	cmp	r0, #0
 801028e:	d093      	beq.n	80101b8 <_strtod_l+0x9f0>
 8010290:	e4c4      	b.n	800fc1c <_strtod_l+0x454>
 8010292:	bf00      	nop
 8010294:	f3af 8000 	nop.w
 8010298:	00000000 	.word	0x00000000
 801029c:	bff00000 	.word	0xbff00000
 80102a0:	00000000 	.word	0x00000000
 80102a4:	3ff00000 	.word	0x3ff00000
 80102a8:	94a03595 	.word	0x94a03595
 80102ac:	3fdfffff 	.word	0x3fdfffff
 80102b0:	35afe535 	.word	0x35afe535
 80102b4:	3fe00000 	.word	0x3fe00000
 80102b8:	000fffff 	.word	0x000fffff
 80102bc:	7ff00000 	.word	0x7ff00000
 80102c0:	7fefffff 	.word	0x7fefffff
 80102c4:	3ff00000 	.word	0x3ff00000
 80102c8:	3fe00000 	.word	0x3fe00000
 80102cc:	7fe00000 	.word	0x7fe00000
 80102d0:	7c9fffff 	.word	0x7c9fffff
 80102d4:	9b08      	ldr	r3, [sp, #32]
 80102d6:	b323      	cbz	r3, 8010322 <_strtod_l+0xb5a>
 80102d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80102dc:	d821      	bhi.n	8010322 <_strtod_l+0xb5a>
 80102de:	a328      	add	r3, pc, #160	@ (adr r3, 8010380 <_strtod_l+0xbb8>)
 80102e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e4:	4630      	mov	r0, r6
 80102e6:	4639      	mov	r1, r7
 80102e8:	f7f0 fc02 	bl	8000af0 <__aeabi_dcmple>
 80102ec:	b1a0      	cbz	r0, 8010318 <_strtod_l+0xb50>
 80102ee:	4639      	mov	r1, r7
 80102f0:	4630      	mov	r0, r6
 80102f2:	f7f0 fc59 	bl	8000ba8 <__aeabi_d2uiz>
 80102f6:	2801      	cmp	r0, #1
 80102f8:	bf38      	it	cc
 80102fa:	2001      	movcc	r0, #1
 80102fc:	f7f0 f902 	bl	8000504 <__aeabi_ui2d>
 8010300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010302:	4606      	mov	r6, r0
 8010304:	460f      	mov	r7, r1
 8010306:	b9fb      	cbnz	r3, 8010348 <_strtod_l+0xb80>
 8010308:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801030c:	9014      	str	r0, [sp, #80]	@ 0x50
 801030e:	9315      	str	r3, [sp, #84]	@ 0x54
 8010310:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010314:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010318:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801031a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801031e:	1b5b      	subs	r3, r3, r5
 8010320:	9311      	str	r3, [sp, #68]	@ 0x44
 8010322:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010326:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801032a:	f7ff f8f1 	bl	800f510 <__ulp>
 801032e:	4650      	mov	r0, sl
 8010330:	ec53 2b10 	vmov	r2, r3, d0
 8010334:	4659      	mov	r1, fp
 8010336:	f7f0 f95f 	bl	80005f8 <__aeabi_dmul>
 801033a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801033e:	f7ef ffa5 	bl	800028c <__adddf3>
 8010342:	4682      	mov	sl, r0
 8010344:	468b      	mov	fp, r1
 8010346:	e770      	b.n	801022a <_strtod_l+0xa62>
 8010348:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801034c:	e7e0      	b.n	8010310 <_strtod_l+0xb48>
 801034e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010388 <_strtod_l+0xbc0>)
 8010350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010354:	f7f0 fbc2 	bl	8000adc <__aeabi_dcmplt>
 8010358:	e798      	b.n	801028c <_strtod_l+0xac4>
 801035a:	2300      	movs	r3, #0
 801035c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801035e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010360:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010362:	6013      	str	r3, [r2, #0]
 8010364:	f7ff ba6d 	b.w	800f842 <_strtod_l+0x7a>
 8010368:	2a65      	cmp	r2, #101	@ 0x65
 801036a:	f43f ab66 	beq.w	800fa3a <_strtod_l+0x272>
 801036e:	2a45      	cmp	r2, #69	@ 0x45
 8010370:	f43f ab63 	beq.w	800fa3a <_strtod_l+0x272>
 8010374:	2301      	movs	r3, #1
 8010376:	f7ff bb9e 	b.w	800fab6 <_strtod_l+0x2ee>
 801037a:	bf00      	nop
 801037c:	f3af 8000 	nop.w
 8010380:	ffc00000 	.word	0xffc00000
 8010384:	41dfffff 	.word	0x41dfffff
 8010388:	94a03595 	.word	0x94a03595
 801038c:	3fcfffff 	.word	0x3fcfffff

08010390 <_strtod_r>:
 8010390:	4b01      	ldr	r3, [pc, #4]	@ (8010398 <_strtod_r+0x8>)
 8010392:	f7ff ba19 	b.w	800f7c8 <_strtod_l>
 8010396:	bf00      	nop
 8010398:	20000194 	.word	0x20000194

0801039c <_strtol_l.constprop.0>:
 801039c:	2b24      	cmp	r3, #36	@ 0x24
 801039e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103a2:	4686      	mov	lr, r0
 80103a4:	4690      	mov	r8, r2
 80103a6:	d801      	bhi.n	80103ac <_strtol_l.constprop.0+0x10>
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d106      	bne.n	80103ba <_strtol_l.constprop.0+0x1e>
 80103ac:	f7fd fdac 	bl	800df08 <__errno>
 80103b0:	2316      	movs	r3, #22
 80103b2:	6003      	str	r3, [r0, #0]
 80103b4:	2000      	movs	r0, #0
 80103b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ba:	4834      	ldr	r0, [pc, #208]	@ (801048c <_strtol_l.constprop.0+0xf0>)
 80103bc:	460d      	mov	r5, r1
 80103be:	462a      	mov	r2, r5
 80103c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80103c4:	5d06      	ldrb	r6, [r0, r4]
 80103c6:	f016 0608 	ands.w	r6, r6, #8
 80103ca:	d1f8      	bne.n	80103be <_strtol_l.constprop.0+0x22>
 80103cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80103ce:	d12d      	bne.n	801042c <_strtol_l.constprop.0+0x90>
 80103d0:	782c      	ldrb	r4, [r5, #0]
 80103d2:	2601      	movs	r6, #1
 80103d4:	1c95      	adds	r5, r2, #2
 80103d6:	f033 0210 	bics.w	r2, r3, #16
 80103da:	d109      	bne.n	80103f0 <_strtol_l.constprop.0+0x54>
 80103dc:	2c30      	cmp	r4, #48	@ 0x30
 80103de:	d12a      	bne.n	8010436 <_strtol_l.constprop.0+0x9a>
 80103e0:	782a      	ldrb	r2, [r5, #0]
 80103e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80103e6:	2a58      	cmp	r2, #88	@ 0x58
 80103e8:	d125      	bne.n	8010436 <_strtol_l.constprop.0+0x9a>
 80103ea:	786c      	ldrb	r4, [r5, #1]
 80103ec:	2310      	movs	r3, #16
 80103ee:	3502      	adds	r5, #2
 80103f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80103f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80103f8:	2200      	movs	r2, #0
 80103fa:	fbbc f9f3 	udiv	r9, ip, r3
 80103fe:	4610      	mov	r0, r2
 8010400:	fb03 ca19 	mls	sl, r3, r9, ip
 8010404:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010408:	2f09      	cmp	r7, #9
 801040a:	d81b      	bhi.n	8010444 <_strtol_l.constprop.0+0xa8>
 801040c:	463c      	mov	r4, r7
 801040e:	42a3      	cmp	r3, r4
 8010410:	dd27      	ble.n	8010462 <_strtol_l.constprop.0+0xc6>
 8010412:	1c57      	adds	r7, r2, #1
 8010414:	d007      	beq.n	8010426 <_strtol_l.constprop.0+0x8a>
 8010416:	4581      	cmp	r9, r0
 8010418:	d320      	bcc.n	801045c <_strtol_l.constprop.0+0xc0>
 801041a:	d101      	bne.n	8010420 <_strtol_l.constprop.0+0x84>
 801041c:	45a2      	cmp	sl, r4
 801041e:	db1d      	blt.n	801045c <_strtol_l.constprop.0+0xc0>
 8010420:	fb00 4003 	mla	r0, r0, r3, r4
 8010424:	2201      	movs	r2, #1
 8010426:	f815 4b01 	ldrb.w	r4, [r5], #1
 801042a:	e7eb      	b.n	8010404 <_strtol_l.constprop.0+0x68>
 801042c:	2c2b      	cmp	r4, #43	@ 0x2b
 801042e:	bf04      	itt	eq
 8010430:	782c      	ldrbeq	r4, [r5, #0]
 8010432:	1c95      	addeq	r5, r2, #2
 8010434:	e7cf      	b.n	80103d6 <_strtol_l.constprop.0+0x3a>
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1da      	bne.n	80103f0 <_strtol_l.constprop.0+0x54>
 801043a:	2c30      	cmp	r4, #48	@ 0x30
 801043c:	bf0c      	ite	eq
 801043e:	2308      	moveq	r3, #8
 8010440:	230a      	movne	r3, #10
 8010442:	e7d5      	b.n	80103f0 <_strtol_l.constprop.0+0x54>
 8010444:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010448:	2f19      	cmp	r7, #25
 801044a:	d801      	bhi.n	8010450 <_strtol_l.constprop.0+0xb4>
 801044c:	3c37      	subs	r4, #55	@ 0x37
 801044e:	e7de      	b.n	801040e <_strtol_l.constprop.0+0x72>
 8010450:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010454:	2f19      	cmp	r7, #25
 8010456:	d804      	bhi.n	8010462 <_strtol_l.constprop.0+0xc6>
 8010458:	3c57      	subs	r4, #87	@ 0x57
 801045a:	e7d8      	b.n	801040e <_strtol_l.constprop.0+0x72>
 801045c:	f04f 32ff 	mov.w	r2, #4294967295
 8010460:	e7e1      	b.n	8010426 <_strtol_l.constprop.0+0x8a>
 8010462:	1c53      	adds	r3, r2, #1
 8010464:	d108      	bne.n	8010478 <_strtol_l.constprop.0+0xdc>
 8010466:	2322      	movs	r3, #34	@ 0x22
 8010468:	f8ce 3000 	str.w	r3, [lr]
 801046c:	4660      	mov	r0, ip
 801046e:	f1b8 0f00 	cmp.w	r8, #0
 8010472:	d0a0      	beq.n	80103b6 <_strtol_l.constprop.0+0x1a>
 8010474:	1e69      	subs	r1, r5, #1
 8010476:	e006      	b.n	8010486 <_strtol_l.constprop.0+0xea>
 8010478:	b106      	cbz	r6, 801047c <_strtol_l.constprop.0+0xe0>
 801047a:	4240      	negs	r0, r0
 801047c:	f1b8 0f00 	cmp.w	r8, #0
 8010480:	d099      	beq.n	80103b6 <_strtol_l.constprop.0+0x1a>
 8010482:	2a00      	cmp	r2, #0
 8010484:	d1f6      	bne.n	8010474 <_strtol_l.constprop.0+0xd8>
 8010486:	f8c8 1000 	str.w	r1, [r8]
 801048a:	e794      	b.n	80103b6 <_strtol_l.constprop.0+0x1a>
 801048c:	08012e49 	.word	0x08012e49

08010490 <_strtol_r>:
 8010490:	f7ff bf84 	b.w	801039c <_strtol_l.constprop.0>

08010494 <__ssputs_r>:
 8010494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010498:	688e      	ldr	r6, [r1, #8]
 801049a:	461f      	mov	r7, r3
 801049c:	42be      	cmp	r6, r7
 801049e:	680b      	ldr	r3, [r1, #0]
 80104a0:	4682      	mov	sl, r0
 80104a2:	460c      	mov	r4, r1
 80104a4:	4690      	mov	r8, r2
 80104a6:	d82d      	bhi.n	8010504 <__ssputs_r+0x70>
 80104a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80104ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80104b0:	d026      	beq.n	8010500 <__ssputs_r+0x6c>
 80104b2:	6965      	ldr	r5, [r4, #20]
 80104b4:	6909      	ldr	r1, [r1, #16]
 80104b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80104ba:	eba3 0901 	sub.w	r9, r3, r1
 80104be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80104c2:	1c7b      	adds	r3, r7, #1
 80104c4:	444b      	add	r3, r9
 80104c6:	106d      	asrs	r5, r5, #1
 80104c8:	429d      	cmp	r5, r3
 80104ca:	bf38      	it	cc
 80104cc:	461d      	movcc	r5, r3
 80104ce:	0553      	lsls	r3, r2, #21
 80104d0:	d527      	bpl.n	8010522 <__ssputs_r+0x8e>
 80104d2:	4629      	mov	r1, r5
 80104d4:	f7fe fc1c 	bl	800ed10 <_malloc_r>
 80104d8:	4606      	mov	r6, r0
 80104da:	b360      	cbz	r0, 8010536 <__ssputs_r+0xa2>
 80104dc:	6921      	ldr	r1, [r4, #16]
 80104de:	464a      	mov	r2, r9
 80104e0:	f7fd fd3f 	bl	800df62 <memcpy>
 80104e4:	89a3      	ldrh	r3, [r4, #12]
 80104e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80104ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104ee:	81a3      	strh	r3, [r4, #12]
 80104f0:	6126      	str	r6, [r4, #16]
 80104f2:	6165      	str	r5, [r4, #20]
 80104f4:	444e      	add	r6, r9
 80104f6:	eba5 0509 	sub.w	r5, r5, r9
 80104fa:	6026      	str	r6, [r4, #0]
 80104fc:	60a5      	str	r5, [r4, #8]
 80104fe:	463e      	mov	r6, r7
 8010500:	42be      	cmp	r6, r7
 8010502:	d900      	bls.n	8010506 <__ssputs_r+0x72>
 8010504:	463e      	mov	r6, r7
 8010506:	6820      	ldr	r0, [r4, #0]
 8010508:	4632      	mov	r2, r6
 801050a:	4641      	mov	r1, r8
 801050c:	f000 f9c6 	bl	801089c <memmove>
 8010510:	68a3      	ldr	r3, [r4, #8]
 8010512:	1b9b      	subs	r3, r3, r6
 8010514:	60a3      	str	r3, [r4, #8]
 8010516:	6823      	ldr	r3, [r4, #0]
 8010518:	4433      	add	r3, r6
 801051a:	6023      	str	r3, [r4, #0]
 801051c:	2000      	movs	r0, #0
 801051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010522:	462a      	mov	r2, r5
 8010524:	f000 fd7d 	bl	8011022 <_realloc_r>
 8010528:	4606      	mov	r6, r0
 801052a:	2800      	cmp	r0, #0
 801052c:	d1e0      	bne.n	80104f0 <__ssputs_r+0x5c>
 801052e:	6921      	ldr	r1, [r4, #16]
 8010530:	4650      	mov	r0, sl
 8010532:	f7fe fb79 	bl	800ec28 <_free_r>
 8010536:	230c      	movs	r3, #12
 8010538:	f8ca 3000 	str.w	r3, [sl]
 801053c:	89a3      	ldrh	r3, [r4, #12]
 801053e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010542:	81a3      	strh	r3, [r4, #12]
 8010544:	f04f 30ff 	mov.w	r0, #4294967295
 8010548:	e7e9      	b.n	801051e <__ssputs_r+0x8a>
	...

0801054c <_svfiprintf_r>:
 801054c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010550:	4698      	mov	r8, r3
 8010552:	898b      	ldrh	r3, [r1, #12]
 8010554:	061b      	lsls	r3, r3, #24
 8010556:	b09d      	sub	sp, #116	@ 0x74
 8010558:	4607      	mov	r7, r0
 801055a:	460d      	mov	r5, r1
 801055c:	4614      	mov	r4, r2
 801055e:	d510      	bpl.n	8010582 <_svfiprintf_r+0x36>
 8010560:	690b      	ldr	r3, [r1, #16]
 8010562:	b973      	cbnz	r3, 8010582 <_svfiprintf_r+0x36>
 8010564:	2140      	movs	r1, #64	@ 0x40
 8010566:	f7fe fbd3 	bl	800ed10 <_malloc_r>
 801056a:	6028      	str	r0, [r5, #0]
 801056c:	6128      	str	r0, [r5, #16]
 801056e:	b930      	cbnz	r0, 801057e <_svfiprintf_r+0x32>
 8010570:	230c      	movs	r3, #12
 8010572:	603b      	str	r3, [r7, #0]
 8010574:	f04f 30ff 	mov.w	r0, #4294967295
 8010578:	b01d      	add	sp, #116	@ 0x74
 801057a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801057e:	2340      	movs	r3, #64	@ 0x40
 8010580:	616b      	str	r3, [r5, #20]
 8010582:	2300      	movs	r3, #0
 8010584:	9309      	str	r3, [sp, #36]	@ 0x24
 8010586:	2320      	movs	r3, #32
 8010588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801058c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010590:	2330      	movs	r3, #48	@ 0x30
 8010592:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010730 <_svfiprintf_r+0x1e4>
 8010596:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801059a:	f04f 0901 	mov.w	r9, #1
 801059e:	4623      	mov	r3, r4
 80105a0:	469a      	mov	sl, r3
 80105a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105a6:	b10a      	cbz	r2, 80105ac <_svfiprintf_r+0x60>
 80105a8:	2a25      	cmp	r2, #37	@ 0x25
 80105aa:	d1f9      	bne.n	80105a0 <_svfiprintf_r+0x54>
 80105ac:	ebba 0b04 	subs.w	fp, sl, r4
 80105b0:	d00b      	beq.n	80105ca <_svfiprintf_r+0x7e>
 80105b2:	465b      	mov	r3, fp
 80105b4:	4622      	mov	r2, r4
 80105b6:	4629      	mov	r1, r5
 80105b8:	4638      	mov	r0, r7
 80105ba:	f7ff ff6b 	bl	8010494 <__ssputs_r>
 80105be:	3001      	adds	r0, #1
 80105c0:	f000 80a7 	beq.w	8010712 <_svfiprintf_r+0x1c6>
 80105c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105c6:	445a      	add	r2, fp
 80105c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80105ca:	f89a 3000 	ldrb.w	r3, [sl]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	f000 809f 	beq.w	8010712 <_svfiprintf_r+0x1c6>
 80105d4:	2300      	movs	r3, #0
 80105d6:	f04f 32ff 	mov.w	r2, #4294967295
 80105da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105de:	f10a 0a01 	add.w	sl, sl, #1
 80105e2:	9304      	str	r3, [sp, #16]
 80105e4:	9307      	str	r3, [sp, #28]
 80105e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80105ec:	4654      	mov	r4, sl
 80105ee:	2205      	movs	r2, #5
 80105f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105f4:	484e      	ldr	r0, [pc, #312]	@ (8010730 <_svfiprintf_r+0x1e4>)
 80105f6:	f7ef fdeb 	bl	80001d0 <memchr>
 80105fa:	9a04      	ldr	r2, [sp, #16]
 80105fc:	b9d8      	cbnz	r0, 8010636 <_svfiprintf_r+0xea>
 80105fe:	06d0      	lsls	r0, r2, #27
 8010600:	bf44      	itt	mi
 8010602:	2320      	movmi	r3, #32
 8010604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010608:	0711      	lsls	r1, r2, #28
 801060a:	bf44      	itt	mi
 801060c:	232b      	movmi	r3, #43	@ 0x2b
 801060e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010612:	f89a 3000 	ldrb.w	r3, [sl]
 8010616:	2b2a      	cmp	r3, #42	@ 0x2a
 8010618:	d015      	beq.n	8010646 <_svfiprintf_r+0xfa>
 801061a:	9a07      	ldr	r2, [sp, #28]
 801061c:	4654      	mov	r4, sl
 801061e:	2000      	movs	r0, #0
 8010620:	f04f 0c0a 	mov.w	ip, #10
 8010624:	4621      	mov	r1, r4
 8010626:	f811 3b01 	ldrb.w	r3, [r1], #1
 801062a:	3b30      	subs	r3, #48	@ 0x30
 801062c:	2b09      	cmp	r3, #9
 801062e:	d94b      	bls.n	80106c8 <_svfiprintf_r+0x17c>
 8010630:	b1b0      	cbz	r0, 8010660 <_svfiprintf_r+0x114>
 8010632:	9207      	str	r2, [sp, #28]
 8010634:	e014      	b.n	8010660 <_svfiprintf_r+0x114>
 8010636:	eba0 0308 	sub.w	r3, r0, r8
 801063a:	fa09 f303 	lsl.w	r3, r9, r3
 801063e:	4313      	orrs	r3, r2
 8010640:	9304      	str	r3, [sp, #16]
 8010642:	46a2      	mov	sl, r4
 8010644:	e7d2      	b.n	80105ec <_svfiprintf_r+0xa0>
 8010646:	9b03      	ldr	r3, [sp, #12]
 8010648:	1d19      	adds	r1, r3, #4
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	9103      	str	r1, [sp, #12]
 801064e:	2b00      	cmp	r3, #0
 8010650:	bfbb      	ittet	lt
 8010652:	425b      	neglt	r3, r3
 8010654:	f042 0202 	orrlt.w	r2, r2, #2
 8010658:	9307      	strge	r3, [sp, #28]
 801065a:	9307      	strlt	r3, [sp, #28]
 801065c:	bfb8      	it	lt
 801065e:	9204      	strlt	r2, [sp, #16]
 8010660:	7823      	ldrb	r3, [r4, #0]
 8010662:	2b2e      	cmp	r3, #46	@ 0x2e
 8010664:	d10a      	bne.n	801067c <_svfiprintf_r+0x130>
 8010666:	7863      	ldrb	r3, [r4, #1]
 8010668:	2b2a      	cmp	r3, #42	@ 0x2a
 801066a:	d132      	bne.n	80106d2 <_svfiprintf_r+0x186>
 801066c:	9b03      	ldr	r3, [sp, #12]
 801066e:	1d1a      	adds	r2, r3, #4
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	9203      	str	r2, [sp, #12]
 8010674:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010678:	3402      	adds	r4, #2
 801067a:	9305      	str	r3, [sp, #20]
 801067c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010740 <_svfiprintf_r+0x1f4>
 8010680:	7821      	ldrb	r1, [r4, #0]
 8010682:	2203      	movs	r2, #3
 8010684:	4650      	mov	r0, sl
 8010686:	f7ef fda3 	bl	80001d0 <memchr>
 801068a:	b138      	cbz	r0, 801069c <_svfiprintf_r+0x150>
 801068c:	9b04      	ldr	r3, [sp, #16]
 801068e:	eba0 000a 	sub.w	r0, r0, sl
 8010692:	2240      	movs	r2, #64	@ 0x40
 8010694:	4082      	lsls	r2, r0
 8010696:	4313      	orrs	r3, r2
 8010698:	3401      	adds	r4, #1
 801069a:	9304      	str	r3, [sp, #16]
 801069c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106a0:	4824      	ldr	r0, [pc, #144]	@ (8010734 <_svfiprintf_r+0x1e8>)
 80106a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80106a6:	2206      	movs	r2, #6
 80106a8:	f7ef fd92 	bl	80001d0 <memchr>
 80106ac:	2800      	cmp	r0, #0
 80106ae:	d036      	beq.n	801071e <_svfiprintf_r+0x1d2>
 80106b0:	4b21      	ldr	r3, [pc, #132]	@ (8010738 <_svfiprintf_r+0x1ec>)
 80106b2:	bb1b      	cbnz	r3, 80106fc <_svfiprintf_r+0x1b0>
 80106b4:	9b03      	ldr	r3, [sp, #12]
 80106b6:	3307      	adds	r3, #7
 80106b8:	f023 0307 	bic.w	r3, r3, #7
 80106bc:	3308      	adds	r3, #8
 80106be:	9303      	str	r3, [sp, #12]
 80106c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106c2:	4433      	add	r3, r6
 80106c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80106c6:	e76a      	b.n	801059e <_svfiprintf_r+0x52>
 80106c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80106cc:	460c      	mov	r4, r1
 80106ce:	2001      	movs	r0, #1
 80106d0:	e7a8      	b.n	8010624 <_svfiprintf_r+0xd8>
 80106d2:	2300      	movs	r3, #0
 80106d4:	3401      	adds	r4, #1
 80106d6:	9305      	str	r3, [sp, #20]
 80106d8:	4619      	mov	r1, r3
 80106da:	f04f 0c0a 	mov.w	ip, #10
 80106de:	4620      	mov	r0, r4
 80106e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106e4:	3a30      	subs	r2, #48	@ 0x30
 80106e6:	2a09      	cmp	r2, #9
 80106e8:	d903      	bls.n	80106f2 <_svfiprintf_r+0x1a6>
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d0c6      	beq.n	801067c <_svfiprintf_r+0x130>
 80106ee:	9105      	str	r1, [sp, #20]
 80106f0:	e7c4      	b.n	801067c <_svfiprintf_r+0x130>
 80106f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80106f6:	4604      	mov	r4, r0
 80106f8:	2301      	movs	r3, #1
 80106fa:	e7f0      	b.n	80106de <_svfiprintf_r+0x192>
 80106fc:	ab03      	add	r3, sp, #12
 80106fe:	9300      	str	r3, [sp, #0]
 8010700:	462a      	mov	r2, r5
 8010702:	4b0e      	ldr	r3, [pc, #56]	@ (801073c <_svfiprintf_r+0x1f0>)
 8010704:	a904      	add	r1, sp, #16
 8010706:	4638      	mov	r0, r7
 8010708:	f7fc fc86 	bl	800d018 <_printf_float>
 801070c:	1c42      	adds	r2, r0, #1
 801070e:	4606      	mov	r6, r0
 8010710:	d1d6      	bne.n	80106c0 <_svfiprintf_r+0x174>
 8010712:	89ab      	ldrh	r3, [r5, #12]
 8010714:	065b      	lsls	r3, r3, #25
 8010716:	f53f af2d 	bmi.w	8010574 <_svfiprintf_r+0x28>
 801071a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801071c:	e72c      	b.n	8010578 <_svfiprintf_r+0x2c>
 801071e:	ab03      	add	r3, sp, #12
 8010720:	9300      	str	r3, [sp, #0]
 8010722:	462a      	mov	r2, r5
 8010724:	4b05      	ldr	r3, [pc, #20]	@ (801073c <_svfiprintf_r+0x1f0>)
 8010726:	a904      	add	r1, sp, #16
 8010728:	4638      	mov	r0, r7
 801072a:	f7fc ff0d 	bl	800d548 <_printf_i>
 801072e:	e7ed      	b.n	801070c <_svfiprintf_r+0x1c0>
 8010730:	08012f49 	.word	0x08012f49
 8010734:	08012f53 	.word	0x08012f53
 8010738:	0800d019 	.word	0x0800d019
 801073c:	08010495 	.word	0x08010495
 8010740:	08012f4f 	.word	0x08012f4f

08010744 <__sflush_r>:
 8010744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801074c:	0716      	lsls	r6, r2, #28
 801074e:	4605      	mov	r5, r0
 8010750:	460c      	mov	r4, r1
 8010752:	d454      	bmi.n	80107fe <__sflush_r+0xba>
 8010754:	684b      	ldr	r3, [r1, #4]
 8010756:	2b00      	cmp	r3, #0
 8010758:	dc02      	bgt.n	8010760 <__sflush_r+0x1c>
 801075a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801075c:	2b00      	cmp	r3, #0
 801075e:	dd48      	ble.n	80107f2 <__sflush_r+0xae>
 8010760:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010762:	2e00      	cmp	r6, #0
 8010764:	d045      	beq.n	80107f2 <__sflush_r+0xae>
 8010766:	2300      	movs	r3, #0
 8010768:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801076c:	682f      	ldr	r7, [r5, #0]
 801076e:	6a21      	ldr	r1, [r4, #32]
 8010770:	602b      	str	r3, [r5, #0]
 8010772:	d030      	beq.n	80107d6 <__sflush_r+0x92>
 8010774:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010776:	89a3      	ldrh	r3, [r4, #12]
 8010778:	0759      	lsls	r1, r3, #29
 801077a:	d505      	bpl.n	8010788 <__sflush_r+0x44>
 801077c:	6863      	ldr	r3, [r4, #4]
 801077e:	1ad2      	subs	r2, r2, r3
 8010780:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010782:	b10b      	cbz	r3, 8010788 <__sflush_r+0x44>
 8010784:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010786:	1ad2      	subs	r2, r2, r3
 8010788:	2300      	movs	r3, #0
 801078a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801078c:	6a21      	ldr	r1, [r4, #32]
 801078e:	4628      	mov	r0, r5
 8010790:	47b0      	blx	r6
 8010792:	1c43      	adds	r3, r0, #1
 8010794:	89a3      	ldrh	r3, [r4, #12]
 8010796:	d106      	bne.n	80107a6 <__sflush_r+0x62>
 8010798:	6829      	ldr	r1, [r5, #0]
 801079a:	291d      	cmp	r1, #29
 801079c:	d82b      	bhi.n	80107f6 <__sflush_r+0xb2>
 801079e:	4a2a      	ldr	r2, [pc, #168]	@ (8010848 <__sflush_r+0x104>)
 80107a0:	410a      	asrs	r2, r1
 80107a2:	07d6      	lsls	r6, r2, #31
 80107a4:	d427      	bmi.n	80107f6 <__sflush_r+0xb2>
 80107a6:	2200      	movs	r2, #0
 80107a8:	6062      	str	r2, [r4, #4]
 80107aa:	04d9      	lsls	r1, r3, #19
 80107ac:	6922      	ldr	r2, [r4, #16]
 80107ae:	6022      	str	r2, [r4, #0]
 80107b0:	d504      	bpl.n	80107bc <__sflush_r+0x78>
 80107b2:	1c42      	adds	r2, r0, #1
 80107b4:	d101      	bne.n	80107ba <__sflush_r+0x76>
 80107b6:	682b      	ldr	r3, [r5, #0]
 80107b8:	b903      	cbnz	r3, 80107bc <__sflush_r+0x78>
 80107ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80107bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80107be:	602f      	str	r7, [r5, #0]
 80107c0:	b1b9      	cbz	r1, 80107f2 <__sflush_r+0xae>
 80107c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80107c6:	4299      	cmp	r1, r3
 80107c8:	d002      	beq.n	80107d0 <__sflush_r+0x8c>
 80107ca:	4628      	mov	r0, r5
 80107cc:	f7fe fa2c 	bl	800ec28 <_free_r>
 80107d0:	2300      	movs	r3, #0
 80107d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80107d4:	e00d      	b.n	80107f2 <__sflush_r+0xae>
 80107d6:	2301      	movs	r3, #1
 80107d8:	4628      	mov	r0, r5
 80107da:	47b0      	blx	r6
 80107dc:	4602      	mov	r2, r0
 80107de:	1c50      	adds	r0, r2, #1
 80107e0:	d1c9      	bne.n	8010776 <__sflush_r+0x32>
 80107e2:	682b      	ldr	r3, [r5, #0]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d0c6      	beq.n	8010776 <__sflush_r+0x32>
 80107e8:	2b1d      	cmp	r3, #29
 80107ea:	d001      	beq.n	80107f0 <__sflush_r+0xac>
 80107ec:	2b16      	cmp	r3, #22
 80107ee:	d11e      	bne.n	801082e <__sflush_r+0xea>
 80107f0:	602f      	str	r7, [r5, #0]
 80107f2:	2000      	movs	r0, #0
 80107f4:	e022      	b.n	801083c <__sflush_r+0xf8>
 80107f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107fa:	b21b      	sxth	r3, r3
 80107fc:	e01b      	b.n	8010836 <__sflush_r+0xf2>
 80107fe:	690f      	ldr	r7, [r1, #16]
 8010800:	2f00      	cmp	r7, #0
 8010802:	d0f6      	beq.n	80107f2 <__sflush_r+0xae>
 8010804:	0793      	lsls	r3, r2, #30
 8010806:	680e      	ldr	r6, [r1, #0]
 8010808:	bf08      	it	eq
 801080a:	694b      	ldreq	r3, [r1, #20]
 801080c:	600f      	str	r7, [r1, #0]
 801080e:	bf18      	it	ne
 8010810:	2300      	movne	r3, #0
 8010812:	eba6 0807 	sub.w	r8, r6, r7
 8010816:	608b      	str	r3, [r1, #8]
 8010818:	f1b8 0f00 	cmp.w	r8, #0
 801081c:	dde9      	ble.n	80107f2 <__sflush_r+0xae>
 801081e:	6a21      	ldr	r1, [r4, #32]
 8010820:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010822:	4643      	mov	r3, r8
 8010824:	463a      	mov	r2, r7
 8010826:	4628      	mov	r0, r5
 8010828:	47b0      	blx	r6
 801082a:	2800      	cmp	r0, #0
 801082c:	dc08      	bgt.n	8010840 <__sflush_r+0xfc>
 801082e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010836:	81a3      	strh	r3, [r4, #12]
 8010838:	f04f 30ff 	mov.w	r0, #4294967295
 801083c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010840:	4407      	add	r7, r0
 8010842:	eba8 0800 	sub.w	r8, r8, r0
 8010846:	e7e7      	b.n	8010818 <__sflush_r+0xd4>
 8010848:	dfbffffe 	.word	0xdfbffffe

0801084c <_fflush_r>:
 801084c:	b538      	push	{r3, r4, r5, lr}
 801084e:	690b      	ldr	r3, [r1, #16]
 8010850:	4605      	mov	r5, r0
 8010852:	460c      	mov	r4, r1
 8010854:	b913      	cbnz	r3, 801085c <_fflush_r+0x10>
 8010856:	2500      	movs	r5, #0
 8010858:	4628      	mov	r0, r5
 801085a:	bd38      	pop	{r3, r4, r5, pc}
 801085c:	b118      	cbz	r0, 8010866 <_fflush_r+0x1a>
 801085e:	6a03      	ldr	r3, [r0, #32]
 8010860:	b90b      	cbnz	r3, 8010866 <_fflush_r+0x1a>
 8010862:	f7fd fa31 	bl	800dcc8 <__sinit>
 8010866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d0f3      	beq.n	8010856 <_fflush_r+0xa>
 801086e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010870:	07d0      	lsls	r0, r2, #31
 8010872:	d404      	bmi.n	801087e <_fflush_r+0x32>
 8010874:	0599      	lsls	r1, r3, #22
 8010876:	d402      	bmi.n	801087e <_fflush_r+0x32>
 8010878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801087a:	f7fd fb70 	bl	800df5e <__retarget_lock_acquire_recursive>
 801087e:	4628      	mov	r0, r5
 8010880:	4621      	mov	r1, r4
 8010882:	f7ff ff5f 	bl	8010744 <__sflush_r>
 8010886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010888:	07da      	lsls	r2, r3, #31
 801088a:	4605      	mov	r5, r0
 801088c:	d4e4      	bmi.n	8010858 <_fflush_r+0xc>
 801088e:	89a3      	ldrh	r3, [r4, #12]
 8010890:	059b      	lsls	r3, r3, #22
 8010892:	d4e1      	bmi.n	8010858 <_fflush_r+0xc>
 8010894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010896:	f7fd fb63 	bl	800df60 <__retarget_lock_release_recursive>
 801089a:	e7dd      	b.n	8010858 <_fflush_r+0xc>

0801089c <memmove>:
 801089c:	4288      	cmp	r0, r1
 801089e:	b510      	push	{r4, lr}
 80108a0:	eb01 0402 	add.w	r4, r1, r2
 80108a4:	d902      	bls.n	80108ac <memmove+0x10>
 80108a6:	4284      	cmp	r4, r0
 80108a8:	4623      	mov	r3, r4
 80108aa:	d807      	bhi.n	80108bc <memmove+0x20>
 80108ac:	1e43      	subs	r3, r0, #1
 80108ae:	42a1      	cmp	r1, r4
 80108b0:	d008      	beq.n	80108c4 <memmove+0x28>
 80108b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80108b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80108ba:	e7f8      	b.n	80108ae <memmove+0x12>
 80108bc:	4402      	add	r2, r0
 80108be:	4601      	mov	r1, r0
 80108c0:	428a      	cmp	r2, r1
 80108c2:	d100      	bne.n	80108c6 <memmove+0x2a>
 80108c4:	bd10      	pop	{r4, pc}
 80108c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80108ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80108ce:	e7f7      	b.n	80108c0 <memmove+0x24>

080108d0 <strncmp>:
 80108d0:	b510      	push	{r4, lr}
 80108d2:	b16a      	cbz	r2, 80108f0 <strncmp+0x20>
 80108d4:	3901      	subs	r1, #1
 80108d6:	1884      	adds	r4, r0, r2
 80108d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d103      	bne.n	80108ec <strncmp+0x1c>
 80108e4:	42a0      	cmp	r0, r4
 80108e6:	d001      	beq.n	80108ec <strncmp+0x1c>
 80108e8:	2a00      	cmp	r2, #0
 80108ea:	d1f5      	bne.n	80108d8 <strncmp+0x8>
 80108ec:	1ad0      	subs	r0, r2, r3
 80108ee:	bd10      	pop	{r4, pc}
 80108f0:	4610      	mov	r0, r2
 80108f2:	e7fc      	b.n	80108ee <strncmp+0x1e>

080108f4 <_sbrk_r>:
 80108f4:	b538      	push	{r3, r4, r5, lr}
 80108f6:	4d06      	ldr	r5, [pc, #24]	@ (8010910 <_sbrk_r+0x1c>)
 80108f8:	2300      	movs	r3, #0
 80108fa:	4604      	mov	r4, r0
 80108fc:	4608      	mov	r0, r1
 80108fe:	602b      	str	r3, [r5, #0]
 8010900:	f7f2 fef8 	bl	80036f4 <_sbrk>
 8010904:	1c43      	adds	r3, r0, #1
 8010906:	d102      	bne.n	801090e <_sbrk_r+0x1a>
 8010908:	682b      	ldr	r3, [r5, #0]
 801090a:	b103      	cbz	r3, 801090e <_sbrk_r+0x1a>
 801090c:	6023      	str	r3, [r4, #0]
 801090e:	bd38      	pop	{r3, r4, r5, pc}
 8010910:	200023e4 	.word	0x200023e4
 8010914:	00000000 	.word	0x00000000

08010918 <nan>:
 8010918:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010920 <nan+0x8>
 801091c:	4770      	bx	lr
 801091e:	bf00      	nop
 8010920:	00000000 	.word	0x00000000
 8010924:	7ff80000 	.word	0x7ff80000

08010928 <__assert_func>:
 8010928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801092a:	4614      	mov	r4, r2
 801092c:	461a      	mov	r2, r3
 801092e:	4b09      	ldr	r3, [pc, #36]	@ (8010954 <__assert_func+0x2c>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	4605      	mov	r5, r0
 8010934:	68d8      	ldr	r0, [r3, #12]
 8010936:	b954      	cbnz	r4, 801094e <__assert_func+0x26>
 8010938:	4b07      	ldr	r3, [pc, #28]	@ (8010958 <__assert_func+0x30>)
 801093a:	461c      	mov	r4, r3
 801093c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010940:	9100      	str	r1, [sp, #0]
 8010942:	462b      	mov	r3, r5
 8010944:	4905      	ldr	r1, [pc, #20]	@ (801095c <__assert_func+0x34>)
 8010946:	f000 fba7 	bl	8011098 <fiprintf>
 801094a:	f000 fbb7 	bl	80110bc <abort>
 801094e:	4b04      	ldr	r3, [pc, #16]	@ (8010960 <__assert_func+0x38>)
 8010950:	e7f4      	b.n	801093c <__assert_func+0x14>
 8010952:	bf00      	nop
 8010954:	20000144 	.word	0x20000144
 8010958:	08012f9d 	.word	0x08012f9d
 801095c:	08012f6f 	.word	0x08012f6f
 8010960:	08012f62 	.word	0x08012f62

08010964 <_calloc_r>:
 8010964:	b570      	push	{r4, r5, r6, lr}
 8010966:	fba1 5402 	umull	r5, r4, r1, r2
 801096a:	b93c      	cbnz	r4, 801097c <_calloc_r+0x18>
 801096c:	4629      	mov	r1, r5
 801096e:	f7fe f9cf 	bl	800ed10 <_malloc_r>
 8010972:	4606      	mov	r6, r0
 8010974:	b928      	cbnz	r0, 8010982 <_calloc_r+0x1e>
 8010976:	2600      	movs	r6, #0
 8010978:	4630      	mov	r0, r6
 801097a:	bd70      	pop	{r4, r5, r6, pc}
 801097c:	220c      	movs	r2, #12
 801097e:	6002      	str	r2, [r0, #0]
 8010980:	e7f9      	b.n	8010976 <_calloc_r+0x12>
 8010982:	462a      	mov	r2, r5
 8010984:	4621      	mov	r1, r4
 8010986:	f7fd fa6c 	bl	800de62 <memset>
 801098a:	e7f5      	b.n	8010978 <_calloc_r+0x14>

0801098c <rshift>:
 801098c:	6903      	ldr	r3, [r0, #16]
 801098e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010992:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010996:	ea4f 1261 	mov.w	r2, r1, asr #5
 801099a:	f100 0414 	add.w	r4, r0, #20
 801099e:	dd45      	ble.n	8010a2c <rshift+0xa0>
 80109a0:	f011 011f 	ands.w	r1, r1, #31
 80109a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80109a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80109ac:	d10c      	bne.n	80109c8 <rshift+0x3c>
 80109ae:	f100 0710 	add.w	r7, r0, #16
 80109b2:	4629      	mov	r1, r5
 80109b4:	42b1      	cmp	r1, r6
 80109b6:	d334      	bcc.n	8010a22 <rshift+0x96>
 80109b8:	1a9b      	subs	r3, r3, r2
 80109ba:	009b      	lsls	r3, r3, #2
 80109bc:	1eea      	subs	r2, r5, #3
 80109be:	4296      	cmp	r6, r2
 80109c0:	bf38      	it	cc
 80109c2:	2300      	movcc	r3, #0
 80109c4:	4423      	add	r3, r4
 80109c6:	e015      	b.n	80109f4 <rshift+0x68>
 80109c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80109cc:	f1c1 0820 	rsb	r8, r1, #32
 80109d0:	40cf      	lsrs	r7, r1
 80109d2:	f105 0e04 	add.w	lr, r5, #4
 80109d6:	46a1      	mov	r9, r4
 80109d8:	4576      	cmp	r6, lr
 80109da:	46f4      	mov	ip, lr
 80109dc:	d815      	bhi.n	8010a0a <rshift+0x7e>
 80109de:	1a9a      	subs	r2, r3, r2
 80109e0:	0092      	lsls	r2, r2, #2
 80109e2:	3a04      	subs	r2, #4
 80109e4:	3501      	adds	r5, #1
 80109e6:	42ae      	cmp	r6, r5
 80109e8:	bf38      	it	cc
 80109ea:	2200      	movcc	r2, #0
 80109ec:	18a3      	adds	r3, r4, r2
 80109ee:	50a7      	str	r7, [r4, r2]
 80109f0:	b107      	cbz	r7, 80109f4 <rshift+0x68>
 80109f2:	3304      	adds	r3, #4
 80109f4:	1b1a      	subs	r2, r3, r4
 80109f6:	42a3      	cmp	r3, r4
 80109f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80109fc:	bf08      	it	eq
 80109fe:	2300      	moveq	r3, #0
 8010a00:	6102      	str	r2, [r0, #16]
 8010a02:	bf08      	it	eq
 8010a04:	6143      	streq	r3, [r0, #20]
 8010a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a0a:	f8dc c000 	ldr.w	ip, [ip]
 8010a0e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010a12:	ea4c 0707 	orr.w	r7, ip, r7
 8010a16:	f849 7b04 	str.w	r7, [r9], #4
 8010a1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a1e:	40cf      	lsrs	r7, r1
 8010a20:	e7da      	b.n	80109d8 <rshift+0x4c>
 8010a22:	f851 cb04 	ldr.w	ip, [r1], #4
 8010a26:	f847 cf04 	str.w	ip, [r7, #4]!
 8010a2a:	e7c3      	b.n	80109b4 <rshift+0x28>
 8010a2c:	4623      	mov	r3, r4
 8010a2e:	e7e1      	b.n	80109f4 <rshift+0x68>

08010a30 <__hexdig_fun>:
 8010a30:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010a34:	2b09      	cmp	r3, #9
 8010a36:	d802      	bhi.n	8010a3e <__hexdig_fun+0xe>
 8010a38:	3820      	subs	r0, #32
 8010a3a:	b2c0      	uxtb	r0, r0
 8010a3c:	4770      	bx	lr
 8010a3e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010a42:	2b05      	cmp	r3, #5
 8010a44:	d801      	bhi.n	8010a4a <__hexdig_fun+0x1a>
 8010a46:	3847      	subs	r0, #71	@ 0x47
 8010a48:	e7f7      	b.n	8010a3a <__hexdig_fun+0xa>
 8010a4a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010a4e:	2b05      	cmp	r3, #5
 8010a50:	d801      	bhi.n	8010a56 <__hexdig_fun+0x26>
 8010a52:	3827      	subs	r0, #39	@ 0x27
 8010a54:	e7f1      	b.n	8010a3a <__hexdig_fun+0xa>
 8010a56:	2000      	movs	r0, #0
 8010a58:	4770      	bx	lr
	...

08010a5c <__gethex>:
 8010a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a60:	b085      	sub	sp, #20
 8010a62:	468a      	mov	sl, r1
 8010a64:	9302      	str	r3, [sp, #8]
 8010a66:	680b      	ldr	r3, [r1, #0]
 8010a68:	9001      	str	r0, [sp, #4]
 8010a6a:	4690      	mov	r8, r2
 8010a6c:	1c9c      	adds	r4, r3, #2
 8010a6e:	46a1      	mov	r9, r4
 8010a70:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010a74:	2830      	cmp	r0, #48	@ 0x30
 8010a76:	d0fa      	beq.n	8010a6e <__gethex+0x12>
 8010a78:	eba9 0303 	sub.w	r3, r9, r3
 8010a7c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010a80:	f7ff ffd6 	bl	8010a30 <__hexdig_fun>
 8010a84:	4605      	mov	r5, r0
 8010a86:	2800      	cmp	r0, #0
 8010a88:	d168      	bne.n	8010b5c <__gethex+0x100>
 8010a8a:	49a0      	ldr	r1, [pc, #640]	@ (8010d0c <__gethex+0x2b0>)
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	4648      	mov	r0, r9
 8010a90:	f7ff ff1e 	bl	80108d0 <strncmp>
 8010a94:	4607      	mov	r7, r0
 8010a96:	2800      	cmp	r0, #0
 8010a98:	d167      	bne.n	8010b6a <__gethex+0x10e>
 8010a9a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010a9e:	4626      	mov	r6, r4
 8010aa0:	f7ff ffc6 	bl	8010a30 <__hexdig_fun>
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	d062      	beq.n	8010b6e <__gethex+0x112>
 8010aa8:	4623      	mov	r3, r4
 8010aaa:	7818      	ldrb	r0, [r3, #0]
 8010aac:	2830      	cmp	r0, #48	@ 0x30
 8010aae:	4699      	mov	r9, r3
 8010ab0:	f103 0301 	add.w	r3, r3, #1
 8010ab4:	d0f9      	beq.n	8010aaa <__gethex+0x4e>
 8010ab6:	f7ff ffbb 	bl	8010a30 <__hexdig_fun>
 8010aba:	fab0 f580 	clz	r5, r0
 8010abe:	096d      	lsrs	r5, r5, #5
 8010ac0:	f04f 0b01 	mov.w	fp, #1
 8010ac4:	464a      	mov	r2, r9
 8010ac6:	4616      	mov	r6, r2
 8010ac8:	3201      	adds	r2, #1
 8010aca:	7830      	ldrb	r0, [r6, #0]
 8010acc:	f7ff ffb0 	bl	8010a30 <__hexdig_fun>
 8010ad0:	2800      	cmp	r0, #0
 8010ad2:	d1f8      	bne.n	8010ac6 <__gethex+0x6a>
 8010ad4:	498d      	ldr	r1, [pc, #564]	@ (8010d0c <__gethex+0x2b0>)
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	4630      	mov	r0, r6
 8010ada:	f7ff fef9 	bl	80108d0 <strncmp>
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	d13f      	bne.n	8010b62 <__gethex+0x106>
 8010ae2:	b944      	cbnz	r4, 8010af6 <__gethex+0x9a>
 8010ae4:	1c74      	adds	r4, r6, #1
 8010ae6:	4622      	mov	r2, r4
 8010ae8:	4616      	mov	r6, r2
 8010aea:	3201      	adds	r2, #1
 8010aec:	7830      	ldrb	r0, [r6, #0]
 8010aee:	f7ff ff9f 	bl	8010a30 <__hexdig_fun>
 8010af2:	2800      	cmp	r0, #0
 8010af4:	d1f8      	bne.n	8010ae8 <__gethex+0x8c>
 8010af6:	1ba4      	subs	r4, r4, r6
 8010af8:	00a7      	lsls	r7, r4, #2
 8010afa:	7833      	ldrb	r3, [r6, #0]
 8010afc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010b00:	2b50      	cmp	r3, #80	@ 0x50
 8010b02:	d13e      	bne.n	8010b82 <__gethex+0x126>
 8010b04:	7873      	ldrb	r3, [r6, #1]
 8010b06:	2b2b      	cmp	r3, #43	@ 0x2b
 8010b08:	d033      	beq.n	8010b72 <__gethex+0x116>
 8010b0a:	2b2d      	cmp	r3, #45	@ 0x2d
 8010b0c:	d034      	beq.n	8010b78 <__gethex+0x11c>
 8010b0e:	1c71      	adds	r1, r6, #1
 8010b10:	2400      	movs	r4, #0
 8010b12:	7808      	ldrb	r0, [r1, #0]
 8010b14:	f7ff ff8c 	bl	8010a30 <__hexdig_fun>
 8010b18:	1e43      	subs	r3, r0, #1
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	2b18      	cmp	r3, #24
 8010b1e:	d830      	bhi.n	8010b82 <__gethex+0x126>
 8010b20:	f1a0 0210 	sub.w	r2, r0, #16
 8010b24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010b28:	f7ff ff82 	bl	8010a30 <__hexdig_fun>
 8010b2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010b30:	fa5f fc8c 	uxtb.w	ip, ip
 8010b34:	f1bc 0f18 	cmp.w	ip, #24
 8010b38:	f04f 030a 	mov.w	r3, #10
 8010b3c:	d91e      	bls.n	8010b7c <__gethex+0x120>
 8010b3e:	b104      	cbz	r4, 8010b42 <__gethex+0xe6>
 8010b40:	4252      	negs	r2, r2
 8010b42:	4417      	add	r7, r2
 8010b44:	f8ca 1000 	str.w	r1, [sl]
 8010b48:	b1ed      	cbz	r5, 8010b86 <__gethex+0x12a>
 8010b4a:	f1bb 0f00 	cmp.w	fp, #0
 8010b4e:	bf0c      	ite	eq
 8010b50:	2506      	moveq	r5, #6
 8010b52:	2500      	movne	r5, #0
 8010b54:	4628      	mov	r0, r5
 8010b56:	b005      	add	sp, #20
 8010b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b5c:	2500      	movs	r5, #0
 8010b5e:	462c      	mov	r4, r5
 8010b60:	e7b0      	b.n	8010ac4 <__gethex+0x68>
 8010b62:	2c00      	cmp	r4, #0
 8010b64:	d1c7      	bne.n	8010af6 <__gethex+0x9a>
 8010b66:	4627      	mov	r7, r4
 8010b68:	e7c7      	b.n	8010afa <__gethex+0x9e>
 8010b6a:	464e      	mov	r6, r9
 8010b6c:	462f      	mov	r7, r5
 8010b6e:	2501      	movs	r5, #1
 8010b70:	e7c3      	b.n	8010afa <__gethex+0x9e>
 8010b72:	2400      	movs	r4, #0
 8010b74:	1cb1      	adds	r1, r6, #2
 8010b76:	e7cc      	b.n	8010b12 <__gethex+0xb6>
 8010b78:	2401      	movs	r4, #1
 8010b7a:	e7fb      	b.n	8010b74 <__gethex+0x118>
 8010b7c:	fb03 0002 	mla	r0, r3, r2, r0
 8010b80:	e7ce      	b.n	8010b20 <__gethex+0xc4>
 8010b82:	4631      	mov	r1, r6
 8010b84:	e7de      	b.n	8010b44 <__gethex+0xe8>
 8010b86:	eba6 0309 	sub.w	r3, r6, r9
 8010b8a:	3b01      	subs	r3, #1
 8010b8c:	4629      	mov	r1, r5
 8010b8e:	2b07      	cmp	r3, #7
 8010b90:	dc0a      	bgt.n	8010ba8 <__gethex+0x14c>
 8010b92:	9801      	ldr	r0, [sp, #4]
 8010b94:	f7fe f948 	bl	800ee28 <_Balloc>
 8010b98:	4604      	mov	r4, r0
 8010b9a:	b940      	cbnz	r0, 8010bae <__gethex+0x152>
 8010b9c:	4b5c      	ldr	r3, [pc, #368]	@ (8010d10 <__gethex+0x2b4>)
 8010b9e:	4602      	mov	r2, r0
 8010ba0:	21e4      	movs	r1, #228	@ 0xe4
 8010ba2:	485c      	ldr	r0, [pc, #368]	@ (8010d14 <__gethex+0x2b8>)
 8010ba4:	f7ff fec0 	bl	8010928 <__assert_func>
 8010ba8:	3101      	adds	r1, #1
 8010baa:	105b      	asrs	r3, r3, #1
 8010bac:	e7ef      	b.n	8010b8e <__gethex+0x132>
 8010bae:	f100 0a14 	add.w	sl, r0, #20
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	4655      	mov	r5, sl
 8010bb6:	469b      	mov	fp, r3
 8010bb8:	45b1      	cmp	r9, r6
 8010bba:	d337      	bcc.n	8010c2c <__gethex+0x1d0>
 8010bbc:	f845 bb04 	str.w	fp, [r5], #4
 8010bc0:	eba5 050a 	sub.w	r5, r5, sl
 8010bc4:	10ad      	asrs	r5, r5, #2
 8010bc6:	6125      	str	r5, [r4, #16]
 8010bc8:	4658      	mov	r0, fp
 8010bca:	f7fe fa1f 	bl	800f00c <__hi0bits>
 8010bce:	016d      	lsls	r5, r5, #5
 8010bd0:	f8d8 6000 	ldr.w	r6, [r8]
 8010bd4:	1a2d      	subs	r5, r5, r0
 8010bd6:	42b5      	cmp	r5, r6
 8010bd8:	dd54      	ble.n	8010c84 <__gethex+0x228>
 8010bda:	1bad      	subs	r5, r5, r6
 8010bdc:	4629      	mov	r1, r5
 8010bde:	4620      	mov	r0, r4
 8010be0:	f7fe fdb3 	bl	800f74a <__any_on>
 8010be4:	4681      	mov	r9, r0
 8010be6:	b178      	cbz	r0, 8010c08 <__gethex+0x1ac>
 8010be8:	1e6b      	subs	r3, r5, #1
 8010bea:	1159      	asrs	r1, r3, #5
 8010bec:	f003 021f 	and.w	r2, r3, #31
 8010bf0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010bf4:	f04f 0901 	mov.w	r9, #1
 8010bf8:	fa09 f202 	lsl.w	r2, r9, r2
 8010bfc:	420a      	tst	r2, r1
 8010bfe:	d003      	beq.n	8010c08 <__gethex+0x1ac>
 8010c00:	454b      	cmp	r3, r9
 8010c02:	dc36      	bgt.n	8010c72 <__gethex+0x216>
 8010c04:	f04f 0902 	mov.w	r9, #2
 8010c08:	4629      	mov	r1, r5
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	f7ff febe 	bl	801098c <rshift>
 8010c10:	442f      	add	r7, r5
 8010c12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c16:	42bb      	cmp	r3, r7
 8010c18:	da42      	bge.n	8010ca0 <__gethex+0x244>
 8010c1a:	9801      	ldr	r0, [sp, #4]
 8010c1c:	4621      	mov	r1, r4
 8010c1e:	f7fe f943 	bl	800eea8 <_Bfree>
 8010c22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c24:	2300      	movs	r3, #0
 8010c26:	6013      	str	r3, [r2, #0]
 8010c28:	25a3      	movs	r5, #163	@ 0xa3
 8010c2a:	e793      	b.n	8010b54 <__gethex+0xf8>
 8010c2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010c30:	2a2e      	cmp	r2, #46	@ 0x2e
 8010c32:	d012      	beq.n	8010c5a <__gethex+0x1fe>
 8010c34:	2b20      	cmp	r3, #32
 8010c36:	d104      	bne.n	8010c42 <__gethex+0x1e6>
 8010c38:	f845 bb04 	str.w	fp, [r5], #4
 8010c3c:	f04f 0b00 	mov.w	fp, #0
 8010c40:	465b      	mov	r3, fp
 8010c42:	7830      	ldrb	r0, [r6, #0]
 8010c44:	9303      	str	r3, [sp, #12]
 8010c46:	f7ff fef3 	bl	8010a30 <__hexdig_fun>
 8010c4a:	9b03      	ldr	r3, [sp, #12]
 8010c4c:	f000 000f 	and.w	r0, r0, #15
 8010c50:	4098      	lsls	r0, r3
 8010c52:	ea4b 0b00 	orr.w	fp, fp, r0
 8010c56:	3304      	adds	r3, #4
 8010c58:	e7ae      	b.n	8010bb8 <__gethex+0x15c>
 8010c5a:	45b1      	cmp	r9, r6
 8010c5c:	d8ea      	bhi.n	8010c34 <__gethex+0x1d8>
 8010c5e:	492b      	ldr	r1, [pc, #172]	@ (8010d0c <__gethex+0x2b0>)
 8010c60:	9303      	str	r3, [sp, #12]
 8010c62:	2201      	movs	r2, #1
 8010c64:	4630      	mov	r0, r6
 8010c66:	f7ff fe33 	bl	80108d0 <strncmp>
 8010c6a:	9b03      	ldr	r3, [sp, #12]
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d1e1      	bne.n	8010c34 <__gethex+0x1d8>
 8010c70:	e7a2      	b.n	8010bb8 <__gethex+0x15c>
 8010c72:	1ea9      	subs	r1, r5, #2
 8010c74:	4620      	mov	r0, r4
 8010c76:	f7fe fd68 	bl	800f74a <__any_on>
 8010c7a:	2800      	cmp	r0, #0
 8010c7c:	d0c2      	beq.n	8010c04 <__gethex+0x1a8>
 8010c7e:	f04f 0903 	mov.w	r9, #3
 8010c82:	e7c1      	b.n	8010c08 <__gethex+0x1ac>
 8010c84:	da09      	bge.n	8010c9a <__gethex+0x23e>
 8010c86:	1b75      	subs	r5, r6, r5
 8010c88:	4621      	mov	r1, r4
 8010c8a:	9801      	ldr	r0, [sp, #4]
 8010c8c:	462a      	mov	r2, r5
 8010c8e:	f7fe fb23 	bl	800f2d8 <__lshift>
 8010c92:	1b7f      	subs	r7, r7, r5
 8010c94:	4604      	mov	r4, r0
 8010c96:	f100 0a14 	add.w	sl, r0, #20
 8010c9a:	f04f 0900 	mov.w	r9, #0
 8010c9e:	e7b8      	b.n	8010c12 <__gethex+0x1b6>
 8010ca0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010ca4:	42bd      	cmp	r5, r7
 8010ca6:	dd6f      	ble.n	8010d88 <__gethex+0x32c>
 8010ca8:	1bed      	subs	r5, r5, r7
 8010caa:	42ae      	cmp	r6, r5
 8010cac:	dc34      	bgt.n	8010d18 <__gethex+0x2bc>
 8010cae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010cb2:	2b02      	cmp	r3, #2
 8010cb4:	d022      	beq.n	8010cfc <__gethex+0x2a0>
 8010cb6:	2b03      	cmp	r3, #3
 8010cb8:	d024      	beq.n	8010d04 <__gethex+0x2a8>
 8010cba:	2b01      	cmp	r3, #1
 8010cbc:	d115      	bne.n	8010cea <__gethex+0x28e>
 8010cbe:	42ae      	cmp	r6, r5
 8010cc0:	d113      	bne.n	8010cea <__gethex+0x28e>
 8010cc2:	2e01      	cmp	r6, #1
 8010cc4:	d10b      	bne.n	8010cde <__gethex+0x282>
 8010cc6:	9a02      	ldr	r2, [sp, #8]
 8010cc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010ccc:	6013      	str	r3, [r2, #0]
 8010cce:	2301      	movs	r3, #1
 8010cd0:	6123      	str	r3, [r4, #16]
 8010cd2:	f8ca 3000 	str.w	r3, [sl]
 8010cd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cd8:	2562      	movs	r5, #98	@ 0x62
 8010cda:	601c      	str	r4, [r3, #0]
 8010cdc:	e73a      	b.n	8010b54 <__gethex+0xf8>
 8010cde:	1e71      	subs	r1, r6, #1
 8010ce0:	4620      	mov	r0, r4
 8010ce2:	f7fe fd32 	bl	800f74a <__any_on>
 8010ce6:	2800      	cmp	r0, #0
 8010ce8:	d1ed      	bne.n	8010cc6 <__gethex+0x26a>
 8010cea:	9801      	ldr	r0, [sp, #4]
 8010cec:	4621      	mov	r1, r4
 8010cee:	f7fe f8db 	bl	800eea8 <_Bfree>
 8010cf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	6013      	str	r3, [r2, #0]
 8010cf8:	2550      	movs	r5, #80	@ 0x50
 8010cfa:	e72b      	b.n	8010b54 <__gethex+0xf8>
 8010cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d1f3      	bne.n	8010cea <__gethex+0x28e>
 8010d02:	e7e0      	b.n	8010cc6 <__gethex+0x26a>
 8010d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d1dd      	bne.n	8010cc6 <__gethex+0x26a>
 8010d0a:	e7ee      	b.n	8010cea <__gethex+0x28e>
 8010d0c:	08012df0 	.word	0x08012df0
 8010d10:	08012c85 	.word	0x08012c85
 8010d14:	08012f9e 	.word	0x08012f9e
 8010d18:	1e6f      	subs	r7, r5, #1
 8010d1a:	f1b9 0f00 	cmp.w	r9, #0
 8010d1e:	d130      	bne.n	8010d82 <__gethex+0x326>
 8010d20:	b127      	cbz	r7, 8010d2c <__gethex+0x2d0>
 8010d22:	4639      	mov	r1, r7
 8010d24:	4620      	mov	r0, r4
 8010d26:	f7fe fd10 	bl	800f74a <__any_on>
 8010d2a:	4681      	mov	r9, r0
 8010d2c:	117a      	asrs	r2, r7, #5
 8010d2e:	2301      	movs	r3, #1
 8010d30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010d34:	f007 071f 	and.w	r7, r7, #31
 8010d38:	40bb      	lsls	r3, r7
 8010d3a:	4213      	tst	r3, r2
 8010d3c:	4629      	mov	r1, r5
 8010d3e:	4620      	mov	r0, r4
 8010d40:	bf18      	it	ne
 8010d42:	f049 0902 	orrne.w	r9, r9, #2
 8010d46:	f7ff fe21 	bl	801098c <rshift>
 8010d4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010d4e:	1b76      	subs	r6, r6, r5
 8010d50:	2502      	movs	r5, #2
 8010d52:	f1b9 0f00 	cmp.w	r9, #0
 8010d56:	d047      	beq.n	8010de8 <__gethex+0x38c>
 8010d58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d5c:	2b02      	cmp	r3, #2
 8010d5e:	d015      	beq.n	8010d8c <__gethex+0x330>
 8010d60:	2b03      	cmp	r3, #3
 8010d62:	d017      	beq.n	8010d94 <__gethex+0x338>
 8010d64:	2b01      	cmp	r3, #1
 8010d66:	d109      	bne.n	8010d7c <__gethex+0x320>
 8010d68:	f019 0f02 	tst.w	r9, #2
 8010d6c:	d006      	beq.n	8010d7c <__gethex+0x320>
 8010d6e:	f8da 3000 	ldr.w	r3, [sl]
 8010d72:	ea49 0903 	orr.w	r9, r9, r3
 8010d76:	f019 0f01 	tst.w	r9, #1
 8010d7a:	d10e      	bne.n	8010d9a <__gethex+0x33e>
 8010d7c:	f045 0510 	orr.w	r5, r5, #16
 8010d80:	e032      	b.n	8010de8 <__gethex+0x38c>
 8010d82:	f04f 0901 	mov.w	r9, #1
 8010d86:	e7d1      	b.n	8010d2c <__gethex+0x2d0>
 8010d88:	2501      	movs	r5, #1
 8010d8a:	e7e2      	b.n	8010d52 <__gethex+0x2f6>
 8010d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d8e:	f1c3 0301 	rsb	r3, r3, #1
 8010d92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d0f0      	beq.n	8010d7c <__gethex+0x320>
 8010d9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010d9e:	f104 0314 	add.w	r3, r4, #20
 8010da2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010da6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010daa:	f04f 0c00 	mov.w	ip, #0
 8010dae:	4618      	mov	r0, r3
 8010db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010db4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010db8:	d01b      	beq.n	8010df2 <__gethex+0x396>
 8010dba:	3201      	adds	r2, #1
 8010dbc:	6002      	str	r2, [r0, #0]
 8010dbe:	2d02      	cmp	r5, #2
 8010dc0:	f104 0314 	add.w	r3, r4, #20
 8010dc4:	d13c      	bne.n	8010e40 <__gethex+0x3e4>
 8010dc6:	f8d8 2000 	ldr.w	r2, [r8]
 8010dca:	3a01      	subs	r2, #1
 8010dcc:	42b2      	cmp	r2, r6
 8010dce:	d109      	bne.n	8010de4 <__gethex+0x388>
 8010dd0:	1171      	asrs	r1, r6, #5
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010dd8:	f006 061f 	and.w	r6, r6, #31
 8010ddc:	fa02 f606 	lsl.w	r6, r2, r6
 8010de0:	421e      	tst	r6, r3
 8010de2:	d13a      	bne.n	8010e5a <__gethex+0x3fe>
 8010de4:	f045 0520 	orr.w	r5, r5, #32
 8010de8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010dea:	601c      	str	r4, [r3, #0]
 8010dec:	9b02      	ldr	r3, [sp, #8]
 8010dee:	601f      	str	r7, [r3, #0]
 8010df0:	e6b0      	b.n	8010b54 <__gethex+0xf8>
 8010df2:	4299      	cmp	r1, r3
 8010df4:	f843 cc04 	str.w	ip, [r3, #-4]
 8010df8:	d8d9      	bhi.n	8010dae <__gethex+0x352>
 8010dfa:	68a3      	ldr	r3, [r4, #8]
 8010dfc:	459b      	cmp	fp, r3
 8010dfe:	db17      	blt.n	8010e30 <__gethex+0x3d4>
 8010e00:	6861      	ldr	r1, [r4, #4]
 8010e02:	9801      	ldr	r0, [sp, #4]
 8010e04:	3101      	adds	r1, #1
 8010e06:	f7fe f80f 	bl	800ee28 <_Balloc>
 8010e0a:	4681      	mov	r9, r0
 8010e0c:	b918      	cbnz	r0, 8010e16 <__gethex+0x3ba>
 8010e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8010e78 <__gethex+0x41c>)
 8010e10:	4602      	mov	r2, r0
 8010e12:	2184      	movs	r1, #132	@ 0x84
 8010e14:	e6c5      	b.n	8010ba2 <__gethex+0x146>
 8010e16:	6922      	ldr	r2, [r4, #16]
 8010e18:	3202      	adds	r2, #2
 8010e1a:	f104 010c 	add.w	r1, r4, #12
 8010e1e:	0092      	lsls	r2, r2, #2
 8010e20:	300c      	adds	r0, #12
 8010e22:	f7fd f89e 	bl	800df62 <memcpy>
 8010e26:	4621      	mov	r1, r4
 8010e28:	9801      	ldr	r0, [sp, #4]
 8010e2a:	f7fe f83d 	bl	800eea8 <_Bfree>
 8010e2e:	464c      	mov	r4, r9
 8010e30:	6923      	ldr	r3, [r4, #16]
 8010e32:	1c5a      	adds	r2, r3, #1
 8010e34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010e38:	6122      	str	r2, [r4, #16]
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	615a      	str	r2, [r3, #20]
 8010e3e:	e7be      	b.n	8010dbe <__gethex+0x362>
 8010e40:	6922      	ldr	r2, [r4, #16]
 8010e42:	455a      	cmp	r2, fp
 8010e44:	dd0b      	ble.n	8010e5e <__gethex+0x402>
 8010e46:	2101      	movs	r1, #1
 8010e48:	4620      	mov	r0, r4
 8010e4a:	f7ff fd9f 	bl	801098c <rshift>
 8010e4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e52:	3701      	adds	r7, #1
 8010e54:	42bb      	cmp	r3, r7
 8010e56:	f6ff aee0 	blt.w	8010c1a <__gethex+0x1be>
 8010e5a:	2501      	movs	r5, #1
 8010e5c:	e7c2      	b.n	8010de4 <__gethex+0x388>
 8010e5e:	f016 061f 	ands.w	r6, r6, #31
 8010e62:	d0fa      	beq.n	8010e5a <__gethex+0x3fe>
 8010e64:	4453      	add	r3, sl
 8010e66:	f1c6 0620 	rsb	r6, r6, #32
 8010e6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010e6e:	f7fe f8cd 	bl	800f00c <__hi0bits>
 8010e72:	42b0      	cmp	r0, r6
 8010e74:	dbe7      	blt.n	8010e46 <__gethex+0x3ea>
 8010e76:	e7f0      	b.n	8010e5a <__gethex+0x3fe>
 8010e78:	08012c85 	.word	0x08012c85

08010e7c <L_shift>:
 8010e7c:	f1c2 0208 	rsb	r2, r2, #8
 8010e80:	0092      	lsls	r2, r2, #2
 8010e82:	b570      	push	{r4, r5, r6, lr}
 8010e84:	f1c2 0620 	rsb	r6, r2, #32
 8010e88:	6843      	ldr	r3, [r0, #4]
 8010e8a:	6804      	ldr	r4, [r0, #0]
 8010e8c:	fa03 f506 	lsl.w	r5, r3, r6
 8010e90:	432c      	orrs	r4, r5
 8010e92:	40d3      	lsrs	r3, r2
 8010e94:	6004      	str	r4, [r0, #0]
 8010e96:	f840 3f04 	str.w	r3, [r0, #4]!
 8010e9a:	4288      	cmp	r0, r1
 8010e9c:	d3f4      	bcc.n	8010e88 <L_shift+0xc>
 8010e9e:	bd70      	pop	{r4, r5, r6, pc}

08010ea0 <__match>:
 8010ea0:	b530      	push	{r4, r5, lr}
 8010ea2:	6803      	ldr	r3, [r0, #0]
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010eaa:	b914      	cbnz	r4, 8010eb2 <__match+0x12>
 8010eac:	6003      	str	r3, [r0, #0]
 8010eae:	2001      	movs	r0, #1
 8010eb0:	bd30      	pop	{r4, r5, pc}
 8010eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010eb6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010eba:	2d19      	cmp	r5, #25
 8010ebc:	bf98      	it	ls
 8010ebe:	3220      	addls	r2, #32
 8010ec0:	42a2      	cmp	r2, r4
 8010ec2:	d0f0      	beq.n	8010ea6 <__match+0x6>
 8010ec4:	2000      	movs	r0, #0
 8010ec6:	e7f3      	b.n	8010eb0 <__match+0x10>

08010ec8 <__hexnan>:
 8010ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ecc:	680b      	ldr	r3, [r1, #0]
 8010ece:	6801      	ldr	r1, [r0, #0]
 8010ed0:	115e      	asrs	r6, r3, #5
 8010ed2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010ed6:	f013 031f 	ands.w	r3, r3, #31
 8010eda:	b087      	sub	sp, #28
 8010edc:	bf18      	it	ne
 8010ede:	3604      	addne	r6, #4
 8010ee0:	2500      	movs	r5, #0
 8010ee2:	1f37      	subs	r7, r6, #4
 8010ee4:	4682      	mov	sl, r0
 8010ee6:	4690      	mov	r8, r2
 8010ee8:	9301      	str	r3, [sp, #4]
 8010eea:	f846 5c04 	str.w	r5, [r6, #-4]
 8010eee:	46b9      	mov	r9, r7
 8010ef0:	463c      	mov	r4, r7
 8010ef2:	9502      	str	r5, [sp, #8]
 8010ef4:	46ab      	mov	fp, r5
 8010ef6:	784a      	ldrb	r2, [r1, #1]
 8010ef8:	1c4b      	adds	r3, r1, #1
 8010efa:	9303      	str	r3, [sp, #12]
 8010efc:	b342      	cbz	r2, 8010f50 <__hexnan+0x88>
 8010efe:	4610      	mov	r0, r2
 8010f00:	9105      	str	r1, [sp, #20]
 8010f02:	9204      	str	r2, [sp, #16]
 8010f04:	f7ff fd94 	bl	8010a30 <__hexdig_fun>
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	d151      	bne.n	8010fb0 <__hexnan+0xe8>
 8010f0c:	9a04      	ldr	r2, [sp, #16]
 8010f0e:	9905      	ldr	r1, [sp, #20]
 8010f10:	2a20      	cmp	r2, #32
 8010f12:	d818      	bhi.n	8010f46 <__hexnan+0x7e>
 8010f14:	9b02      	ldr	r3, [sp, #8]
 8010f16:	459b      	cmp	fp, r3
 8010f18:	dd13      	ble.n	8010f42 <__hexnan+0x7a>
 8010f1a:	454c      	cmp	r4, r9
 8010f1c:	d206      	bcs.n	8010f2c <__hexnan+0x64>
 8010f1e:	2d07      	cmp	r5, #7
 8010f20:	dc04      	bgt.n	8010f2c <__hexnan+0x64>
 8010f22:	462a      	mov	r2, r5
 8010f24:	4649      	mov	r1, r9
 8010f26:	4620      	mov	r0, r4
 8010f28:	f7ff ffa8 	bl	8010e7c <L_shift>
 8010f2c:	4544      	cmp	r4, r8
 8010f2e:	d952      	bls.n	8010fd6 <__hexnan+0x10e>
 8010f30:	2300      	movs	r3, #0
 8010f32:	f1a4 0904 	sub.w	r9, r4, #4
 8010f36:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f3a:	f8cd b008 	str.w	fp, [sp, #8]
 8010f3e:	464c      	mov	r4, r9
 8010f40:	461d      	mov	r5, r3
 8010f42:	9903      	ldr	r1, [sp, #12]
 8010f44:	e7d7      	b.n	8010ef6 <__hexnan+0x2e>
 8010f46:	2a29      	cmp	r2, #41	@ 0x29
 8010f48:	d157      	bne.n	8010ffa <__hexnan+0x132>
 8010f4a:	3102      	adds	r1, #2
 8010f4c:	f8ca 1000 	str.w	r1, [sl]
 8010f50:	f1bb 0f00 	cmp.w	fp, #0
 8010f54:	d051      	beq.n	8010ffa <__hexnan+0x132>
 8010f56:	454c      	cmp	r4, r9
 8010f58:	d206      	bcs.n	8010f68 <__hexnan+0xa0>
 8010f5a:	2d07      	cmp	r5, #7
 8010f5c:	dc04      	bgt.n	8010f68 <__hexnan+0xa0>
 8010f5e:	462a      	mov	r2, r5
 8010f60:	4649      	mov	r1, r9
 8010f62:	4620      	mov	r0, r4
 8010f64:	f7ff ff8a 	bl	8010e7c <L_shift>
 8010f68:	4544      	cmp	r4, r8
 8010f6a:	d936      	bls.n	8010fda <__hexnan+0x112>
 8010f6c:	f1a8 0204 	sub.w	r2, r8, #4
 8010f70:	4623      	mov	r3, r4
 8010f72:	f853 1b04 	ldr.w	r1, [r3], #4
 8010f76:	f842 1f04 	str.w	r1, [r2, #4]!
 8010f7a:	429f      	cmp	r7, r3
 8010f7c:	d2f9      	bcs.n	8010f72 <__hexnan+0xaa>
 8010f7e:	1b3b      	subs	r3, r7, r4
 8010f80:	f023 0303 	bic.w	r3, r3, #3
 8010f84:	3304      	adds	r3, #4
 8010f86:	3401      	adds	r4, #1
 8010f88:	3e03      	subs	r6, #3
 8010f8a:	42b4      	cmp	r4, r6
 8010f8c:	bf88      	it	hi
 8010f8e:	2304      	movhi	r3, #4
 8010f90:	4443      	add	r3, r8
 8010f92:	2200      	movs	r2, #0
 8010f94:	f843 2b04 	str.w	r2, [r3], #4
 8010f98:	429f      	cmp	r7, r3
 8010f9a:	d2fb      	bcs.n	8010f94 <__hexnan+0xcc>
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	b91b      	cbnz	r3, 8010fa8 <__hexnan+0xe0>
 8010fa0:	4547      	cmp	r7, r8
 8010fa2:	d128      	bne.n	8010ff6 <__hexnan+0x12e>
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	603b      	str	r3, [r7, #0]
 8010fa8:	2005      	movs	r0, #5
 8010faa:	b007      	add	sp, #28
 8010fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fb0:	3501      	adds	r5, #1
 8010fb2:	2d08      	cmp	r5, #8
 8010fb4:	f10b 0b01 	add.w	fp, fp, #1
 8010fb8:	dd06      	ble.n	8010fc8 <__hexnan+0x100>
 8010fba:	4544      	cmp	r4, r8
 8010fbc:	d9c1      	bls.n	8010f42 <__hexnan+0x7a>
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fc4:	2501      	movs	r5, #1
 8010fc6:	3c04      	subs	r4, #4
 8010fc8:	6822      	ldr	r2, [r4, #0]
 8010fca:	f000 000f 	and.w	r0, r0, #15
 8010fce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010fd2:	6020      	str	r0, [r4, #0]
 8010fd4:	e7b5      	b.n	8010f42 <__hexnan+0x7a>
 8010fd6:	2508      	movs	r5, #8
 8010fd8:	e7b3      	b.n	8010f42 <__hexnan+0x7a>
 8010fda:	9b01      	ldr	r3, [sp, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d0dd      	beq.n	8010f9c <__hexnan+0xd4>
 8010fe0:	f1c3 0320 	rsb	r3, r3, #32
 8010fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8010fe8:	40da      	lsrs	r2, r3
 8010fea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010fee:	4013      	ands	r3, r2
 8010ff0:	f846 3c04 	str.w	r3, [r6, #-4]
 8010ff4:	e7d2      	b.n	8010f9c <__hexnan+0xd4>
 8010ff6:	3f04      	subs	r7, #4
 8010ff8:	e7d0      	b.n	8010f9c <__hexnan+0xd4>
 8010ffa:	2004      	movs	r0, #4
 8010ffc:	e7d5      	b.n	8010faa <__hexnan+0xe2>

08010ffe <__ascii_mbtowc>:
 8010ffe:	b082      	sub	sp, #8
 8011000:	b901      	cbnz	r1, 8011004 <__ascii_mbtowc+0x6>
 8011002:	a901      	add	r1, sp, #4
 8011004:	b142      	cbz	r2, 8011018 <__ascii_mbtowc+0x1a>
 8011006:	b14b      	cbz	r3, 801101c <__ascii_mbtowc+0x1e>
 8011008:	7813      	ldrb	r3, [r2, #0]
 801100a:	600b      	str	r3, [r1, #0]
 801100c:	7812      	ldrb	r2, [r2, #0]
 801100e:	1e10      	subs	r0, r2, #0
 8011010:	bf18      	it	ne
 8011012:	2001      	movne	r0, #1
 8011014:	b002      	add	sp, #8
 8011016:	4770      	bx	lr
 8011018:	4610      	mov	r0, r2
 801101a:	e7fb      	b.n	8011014 <__ascii_mbtowc+0x16>
 801101c:	f06f 0001 	mvn.w	r0, #1
 8011020:	e7f8      	b.n	8011014 <__ascii_mbtowc+0x16>

08011022 <_realloc_r>:
 8011022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011026:	4680      	mov	r8, r0
 8011028:	4615      	mov	r5, r2
 801102a:	460c      	mov	r4, r1
 801102c:	b921      	cbnz	r1, 8011038 <_realloc_r+0x16>
 801102e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011032:	4611      	mov	r1, r2
 8011034:	f7fd be6c 	b.w	800ed10 <_malloc_r>
 8011038:	b92a      	cbnz	r2, 8011046 <_realloc_r+0x24>
 801103a:	f7fd fdf5 	bl	800ec28 <_free_r>
 801103e:	2400      	movs	r4, #0
 8011040:	4620      	mov	r0, r4
 8011042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011046:	f000 f840 	bl	80110ca <_malloc_usable_size_r>
 801104a:	4285      	cmp	r5, r0
 801104c:	4606      	mov	r6, r0
 801104e:	d802      	bhi.n	8011056 <_realloc_r+0x34>
 8011050:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011054:	d8f4      	bhi.n	8011040 <_realloc_r+0x1e>
 8011056:	4629      	mov	r1, r5
 8011058:	4640      	mov	r0, r8
 801105a:	f7fd fe59 	bl	800ed10 <_malloc_r>
 801105e:	4607      	mov	r7, r0
 8011060:	2800      	cmp	r0, #0
 8011062:	d0ec      	beq.n	801103e <_realloc_r+0x1c>
 8011064:	42b5      	cmp	r5, r6
 8011066:	462a      	mov	r2, r5
 8011068:	4621      	mov	r1, r4
 801106a:	bf28      	it	cs
 801106c:	4632      	movcs	r2, r6
 801106e:	f7fc ff78 	bl	800df62 <memcpy>
 8011072:	4621      	mov	r1, r4
 8011074:	4640      	mov	r0, r8
 8011076:	f7fd fdd7 	bl	800ec28 <_free_r>
 801107a:	463c      	mov	r4, r7
 801107c:	e7e0      	b.n	8011040 <_realloc_r+0x1e>

0801107e <__ascii_wctomb>:
 801107e:	4603      	mov	r3, r0
 8011080:	4608      	mov	r0, r1
 8011082:	b141      	cbz	r1, 8011096 <__ascii_wctomb+0x18>
 8011084:	2aff      	cmp	r2, #255	@ 0xff
 8011086:	d904      	bls.n	8011092 <__ascii_wctomb+0x14>
 8011088:	228a      	movs	r2, #138	@ 0x8a
 801108a:	601a      	str	r2, [r3, #0]
 801108c:	f04f 30ff 	mov.w	r0, #4294967295
 8011090:	4770      	bx	lr
 8011092:	700a      	strb	r2, [r1, #0]
 8011094:	2001      	movs	r0, #1
 8011096:	4770      	bx	lr

08011098 <fiprintf>:
 8011098:	b40e      	push	{r1, r2, r3}
 801109a:	b503      	push	{r0, r1, lr}
 801109c:	4601      	mov	r1, r0
 801109e:	ab03      	add	r3, sp, #12
 80110a0:	4805      	ldr	r0, [pc, #20]	@ (80110b8 <fiprintf+0x20>)
 80110a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80110a6:	6800      	ldr	r0, [r0, #0]
 80110a8:	9301      	str	r3, [sp, #4]
 80110aa:	f000 f83f 	bl	801112c <_vfiprintf_r>
 80110ae:	b002      	add	sp, #8
 80110b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80110b4:	b003      	add	sp, #12
 80110b6:	4770      	bx	lr
 80110b8:	20000144 	.word	0x20000144

080110bc <abort>:
 80110bc:	b508      	push	{r3, lr}
 80110be:	2006      	movs	r0, #6
 80110c0:	f000 fa08 	bl	80114d4 <raise>
 80110c4:	2001      	movs	r0, #1
 80110c6:	f7f2 fa9d 	bl	8003604 <_exit>

080110ca <_malloc_usable_size_r>:
 80110ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110ce:	1f18      	subs	r0, r3, #4
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	bfbc      	itt	lt
 80110d4:	580b      	ldrlt	r3, [r1, r0]
 80110d6:	18c0      	addlt	r0, r0, r3
 80110d8:	4770      	bx	lr

080110da <__sfputc_r>:
 80110da:	6893      	ldr	r3, [r2, #8]
 80110dc:	3b01      	subs	r3, #1
 80110de:	2b00      	cmp	r3, #0
 80110e0:	b410      	push	{r4}
 80110e2:	6093      	str	r3, [r2, #8]
 80110e4:	da08      	bge.n	80110f8 <__sfputc_r+0x1e>
 80110e6:	6994      	ldr	r4, [r2, #24]
 80110e8:	42a3      	cmp	r3, r4
 80110ea:	db01      	blt.n	80110f0 <__sfputc_r+0x16>
 80110ec:	290a      	cmp	r1, #10
 80110ee:	d103      	bne.n	80110f8 <__sfputc_r+0x1e>
 80110f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110f4:	f000 b932 	b.w	801135c <__swbuf_r>
 80110f8:	6813      	ldr	r3, [r2, #0]
 80110fa:	1c58      	adds	r0, r3, #1
 80110fc:	6010      	str	r0, [r2, #0]
 80110fe:	7019      	strb	r1, [r3, #0]
 8011100:	4608      	mov	r0, r1
 8011102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011106:	4770      	bx	lr

08011108 <__sfputs_r>:
 8011108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801110a:	4606      	mov	r6, r0
 801110c:	460f      	mov	r7, r1
 801110e:	4614      	mov	r4, r2
 8011110:	18d5      	adds	r5, r2, r3
 8011112:	42ac      	cmp	r4, r5
 8011114:	d101      	bne.n	801111a <__sfputs_r+0x12>
 8011116:	2000      	movs	r0, #0
 8011118:	e007      	b.n	801112a <__sfputs_r+0x22>
 801111a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801111e:	463a      	mov	r2, r7
 8011120:	4630      	mov	r0, r6
 8011122:	f7ff ffda 	bl	80110da <__sfputc_r>
 8011126:	1c43      	adds	r3, r0, #1
 8011128:	d1f3      	bne.n	8011112 <__sfputs_r+0xa>
 801112a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801112c <_vfiprintf_r>:
 801112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011130:	460d      	mov	r5, r1
 8011132:	b09d      	sub	sp, #116	@ 0x74
 8011134:	4614      	mov	r4, r2
 8011136:	4698      	mov	r8, r3
 8011138:	4606      	mov	r6, r0
 801113a:	b118      	cbz	r0, 8011144 <_vfiprintf_r+0x18>
 801113c:	6a03      	ldr	r3, [r0, #32]
 801113e:	b90b      	cbnz	r3, 8011144 <_vfiprintf_r+0x18>
 8011140:	f7fc fdc2 	bl	800dcc8 <__sinit>
 8011144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011146:	07d9      	lsls	r1, r3, #31
 8011148:	d405      	bmi.n	8011156 <_vfiprintf_r+0x2a>
 801114a:	89ab      	ldrh	r3, [r5, #12]
 801114c:	059a      	lsls	r2, r3, #22
 801114e:	d402      	bmi.n	8011156 <_vfiprintf_r+0x2a>
 8011150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011152:	f7fc ff04 	bl	800df5e <__retarget_lock_acquire_recursive>
 8011156:	89ab      	ldrh	r3, [r5, #12]
 8011158:	071b      	lsls	r3, r3, #28
 801115a:	d501      	bpl.n	8011160 <_vfiprintf_r+0x34>
 801115c:	692b      	ldr	r3, [r5, #16]
 801115e:	b99b      	cbnz	r3, 8011188 <_vfiprintf_r+0x5c>
 8011160:	4629      	mov	r1, r5
 8011162:	4630      	mov	r0, r6
 8011164:	f000 f938 	bl	80113d8 <__swsetup_r>
 8011168:	b170      	cbz	r0, 8011188 <_vfiprintf_r+0x5c>
 801116a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801116c:	07dc      	lsls	r4, r3, #31
 801116e:	d504      	bpl.n	801117a <_vfiprintf_r+0x4e>
 8011170:	f04f 30ff 	mov.w	r0, #4294967295
 8011174:	b01d      	add	sp, #116	@ 0x74
 8011176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801117a:	89ab      	ldrh	r3, [r5, #12]
 801117c:	0598      	lsls	r0, r3, #22
 801117e:	d4f7      	bmi.n	8011170 <_vfiprintf_r+0x44>
 8011180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011182:	f7fc feed 	bl	800df60 <__retarget_lock_release_recursive>
 8011186:	e7f3      	b.n	8011170 <_vfiprintf_r+0x44>
 8011188:	2300      	movs	r3, #0
 801118a:	9309      	str	r3, [sp, #36]	@ 0x24
 801118c:	2320      	movs	r3, #32
 801118e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011192:	f8cd 800c 	str.w	r8, [sp, #12]
 8011196:	2330      	movs	r3, #48	@ 0x30
 8011198:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011348 <_vfiprintf_r+0x21c>
 801119c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80111a0:	f04f 0901 	mov.w	r9, #1
 80111a4:	4623      	mov	r3, r4
 80111a6:	469a      	mov	sl, r3
 80111a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111ac:	b10a      	cbz	r2, 80111b2 <_vfiprintf_r+0x86>
 80111ae:	2a25      	cmp	r2, #37	@ 0x25
 80111b0:	d1f9      	bne.n	80111a6 <_vfiprintf_r+0x7a>
 80111b2:	ebba 0b04 	subs.w	fp, sl, r4
 80111b6:	d00b      	beq.n	80111d0 <_vfiprintf_r+0xa4>
 80111b8:	465b      	mov	r3, fp
 80111ba:	4622      	mov	r2, r4
 80111bc:	4629      	mov	r1, r5
 80111be:	4630      	mov	r0, r6
 80111c0:	f7ff ffa2 	bl	8011108 <__sfputs_r>
 80111c4:	3001      	adds	r0, #1
 80111c6:	f000 80a7 	beq.w	8011318 <_vfiprintf_r+0x1ec>
 80111ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111cc:	445a      	add	r2, fp
 80111ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80111d0:	f89a 3000 	ldrb.w	r3, [sl]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	f000 809f 	beq.w	8011318 <_vfiprintf_r+0x1ec>
 80111da:	2300      	movs	r3, #0
 80111dc:	f04f 32ff 	mov.w	r2, #4294967295
 80111e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111e4:	f10a 0a01 	add.w	sl, sl, #1
 80111e8:	9304      	str	r3, [sp, #16]
 80111ea:	9307      	str	r3, [sp, #28]
 80111ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80111f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80111f2:	4654      	mov	r4, sl
 80111f4:	2205      	movs	r2, #5
 80111f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111fa:	4853      	ldr	r0, [pc, #332]	@ (8011348 <_vfiprintf_r+0x21c>)
 80111fc:	f7ee ffe8 	bl	80001d0 <memchr>
 8011200:	9a04      	ldr	r2, [sp, #16]
 8011202:	b9d8      	cbnz	r0, 801123c <_vfiprintf_r+0x110>
 8011204:	06d1      	lsls	r1, r2, #27
 8011206:	bf44      	itt	mi
 8011208:	2320      	movmi	r3, #32
 801120a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801120e:	0713      	lsls	r3, r2, #28
 8011210:	bf44      	itt	mi
 8011212:	232b      	movmi	r3, #43	@ 0x2b
 8011214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011218:	f89a 3000 	ldrb.w	r3, [sl]
 801121c:	2b2a      	cmp	r3, #42	@ 0x2a
 801121e:	d015      	beq.n	801124c <_vfiprintf_r+0x120>
 8011220:	9a07      	ldr	r2, [sp, #28]
 8011222:	4654      	mov	r4, sl
 8011224:	2000      	movs	r0, #0
 8011226:	f04f 0c0a 	mov.w	ip, #10
 801122a:	4621      	mov	r1, r4
 801122c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011230:	3b30      	subs	r3, #48	@ 0x30
 8011232:	2b09      	cmp	r3, #9
 8011234:	d94b      	bls.n	80112ce <_vfiprintf_r+0x1a2>
 8011236:	b1b0      	cbz	r0, 8011266 <_vfiprintf_r+0x13a>
 8011238:	9207      	str	r2, [sp, #28]
 801123a:	e014      	b.n	8011266 <_vfiprintf_r+0x13a>
 801123c:	eba0 0308 	sub.w	r3, r0, r8
 8011240:	fa09 f303 	lsl.w	r3, r9, r3
 8011244:	4313      	orrs	r3, r2
 8011246:	9304      	str	r3, [sp, #16]
 8011248:	46a2      	mov	sl, r4
 801124a:	e7d2      	b.n	80111f2 <_vfiprintf_r+0xc6>
 801124c:	9b03      	ldr	r3, [sp, #12]
 801124e:	1d19      	adds	r1, r3, #4
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	9103      	str	r1, [sp, #12]
 8011254:	2b00      	cmp	r3, #0
 8011256:	bfbb      	ittet	lt
 8011258:	425b      	neglt	r3, r3
 801125a:	f042 0202 	orrlt.w	r2, r2, #2
 801125e:	9307      	strge	r3, [sp, #28]
 8011260:	9307      	strlt	r3, [sp, #28]
 8011262:	bfb8      	it	lt
 8011264:	9204      	strlt	r2, [sp, #16]
 8011266:	7823      	ldrb	r3, [r4, #0]
 8011268:	2b2e      	cmp	r3, #46	@ 0x2e
 801126a:	d10a      	bne.n	8011282 <_vfiprintf_r+0x156>
 801126c:	7863      	ldrb	r3, [r4, #1]
 801126e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011270:	d132      	bne.n	80112d8 <_vfiprintf_r+0x1ac>
 8011272:	9b03      	ldr	r3, [sp, #12]
 8011274:	1d1a      	adds	r2, r3, #4
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	9203      	str	r2, [sp, #12]
 801127a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801127e:	3402      	adds	r4, #2
 8011280:	9305      	str	r3, [sp, #20]
 8011282:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011358 <_vfiprintf_r+0x22c>
 8011286:	7821      	ldrb	r1, [r4, #0]
 8011288:	2203      	movs	r2, #3
 801128a:	4650      	mov	r0, sl
 801128c:	f7ee ffa0 	bl	80001d0 <memchr>
 8011290:	b138      	cbz	r0, 80112a2 <_vfiprintf_r+0x176>
 8011292:	9b04      	ldr	r3, [sp, #16]
 8011294:	eba0 000a 	sub.w	r0, r0, sl
 8011298:	2240      	movs	r2, #64	@ 0x40
 801129a:	4082      	lsls	r2, r0
 801129c:	4313      	orrs	r3, r2
 801129e:	3401      	adds	r4, #1
 80112a0:	9304      	str	r3, [sp, #16]
 80112a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112a6:	4829      	ldr	r0, [pc, #164]	@ (801134c <_vfiprintf_r+0x220>)
 80112a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80112ac:	2206      	movs	r2, #6
 80112ae:	f7ee ff8f 	bl	80001d0 <memchr>
 80112b2:	2800      	cmp	r0, #0
 80112b4:	d03f      	beq.n	8011336 <_vfiprintf_r+0x20a>
 80112b6:	4b26      	ldr	r3, [pc, #152]	@ (8011350 <_vfiprintf_r+0x224>)
 80112b8:	bb1b      	cbnz	r3, 8011302 <_vfiprintf_r+0x1d6>
 80112ba:	9b03      	ldr	r3, [sp, #12]
 80112bc:	3307      	adds	r3, #7
 80112be:	f023 0307 	bic.w	r3, r3, #7
 80112c2:	3308      	adds	r3, #8
 80112c4:	9303      	str	r3, [sp, #12]
 80112c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112c8:	443b      	add	r3, r7
 80112ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80112cc:	e76a      	b.n	80111a4 <_vfiprintf_r+0x78>
 80112ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80112d2:	460c      	mov	r4, r1
 80112d4:	2001      	movs	r0, #1
 80112d6:	e7a8      	b.n	801122a <_vfiprintf_r+0xfe>
 80112d8:	2300      	movs	r3, #0
 80112da:	3401      	adds	r4, #1
 80112dc:	9305      	str	r3, [sp, #20]
 80112de:	4619      	mov	r1, r3
 80112e0:	f04f 0c0a 	mov.w	ip, #10
 80112e4:	4620      	mov	r0, r4
 80112e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112ea:	3a30      	subs	r2, #48	@ 0x30
 80112ec:	2a09      	cmp	r2, #9
 80112ee:	d903      	bls.n	80112f8 <_vfiprintf_r+0x1cc>
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d0c6      	beq.n	8011282 <_vfiprintf_r+0x156>
 80112f4:	9105      	str	r1, [sp, #20]
 80112f6:	e7c4      	b.n	8011282 <_vfiprintf_r+0x156>
 80112f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80112fc:	4604      	mov	r4, r0
 80112fe:	2301      	movs	r3, #1
 8011300:	e7f0      	b.n	80112e4 <_vfiprintf_r+0x1b8>
 8011302:	ab03      	add	r3, sp, #12
 8011304:	9300      	str	r3, [sp, #0]
 8011306:	462a      	mov	r2, r5
 8011308:	4b12      	ldr	r3, [pc, #72]	@ (8011354 <_vfiprintf_r+0x228>)
 801130a:	a904      	add	r1, sp, #16
 801130c:	4630      	mov	r0, r6
 801130e:	f7fb fe83 	bl	800d018 <_printf_float>
 8011312:	4607      	mov	r7, r0
 8011314:	1c78      	adds	r0, r7, #1
 8011316:	d1d6      	bne.n	80112c6 <_vfiprintf_r+0x19a>
 8011318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801131a:	07d9      	lsls	r1, r3, #31
 801131c:	d405      	bmi.n	801132a <_vfiprintf_r+0x1fe>
 801131e:	89ab      	ldrh	r3, [r5, #12]
 8011320:	059a      	lsls	r2, r3, #22
 8011322:	d402      	bmi.n	801132a <_vfiprintf_r+0x1fe>
 8011324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011326:	f7fc fe1b 	bl	800df60 <__retarget_lock_release_recursive>
 801132a:	89ab      	ldrh	r3, [r5, #12]
 801132c:	065b      	lsls	r3, r3, #25
 801132e:	f53f af1f 	bmi.w	8011170 <_vfiprintf_r+0x44>
 8011332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011334:	e71e      	b.n	8011174 <_vfiprintf_r+0x48>
 8011336:	ab03      	add	r3, sp, #12
 8011338:	9300      	str	r3, [sp, #0]
 801133a:	462a      	mov	r2, r5
 801133c:	4b05      	ldr	r3, [pc, #20]	@ (8011354 <_vfiprintf_r+0x228>)
 801133e:	a904      	add	r1, sp, #16
 8011340:	4630      	mov	r0, r6
 8011342:	f7fc f901 	bl	800d548 <_printf_i>
 8011346:	e7e4      	b.n	8011312 <_vfiprintf_r+0x1e6>
 8011348:	08012f49 	.word	0x08012f49
 801134c:	08012f53 	.word	0x08012f53
 8011350:	0800d019 	.word	0x0800d019
 8011354:	08011109 	.word	0x08011109
 8011358:	08012f4f 	.word	0x08012f4f

0801135c <__swbuf_r>:
 801135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801135e:	460e      	mov	r6, r1
 8011360:	4614      	mov	r4, r2
 8011362:	4605      	mov	r5, r0
 8011364:	b118      	cbz	r0, 801136e <__swbuf_r+0x12>
 8011366:	6a03      	ldr	r3, [r0, #32]
 8011368:	b90b      	cbnz	r3, 801136e <__swbuf_r+0x12>
 801136a:	f7fc fcad 	bl	800dcc8 <__sinit>
 801136e:	69a3      	ldr	r3, [r4, #24]
 8011370:	60a3      	str	r3, [r4, #8]
 8011372:	89a3      	ldrh	r3, [r4, #12]
 8011374:	071a      	lsls	r2, r3, #28
 8011376:	d501      	bpl.n	801137c <__swbuf_r+0x20>
 8011378:	6923      	ldr	r3, [r4, #16]
 801137a:	b943      	cbnz	r3, 801138e <__swbuf_r+0x32>
 801137c:	4621      	mov	r1, r4
 801137e:	4628      	mov	r0, r5
 8011380:	f000 f82a 	bl	80113d8 <__swsetup_r>
 8011384:	b118      	cbz	r0, 801138e <__swbuf_r+0x32>
 8011386:	f04f 37ff 	mov.w	r7, #4294967295
 801138a:	4638      	mov	r0, r7
 801138c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801138e:	6823      	ldr	r3, [r4, #0]
 8011390:	6922      	ldr	r2, [r4, #16]
 8011392:	1a98      	subs	r0, r3, r2
 8011394:	6963      	ldr	r3, [r4, #20]
 8011396:	b2f6      	uxtb	r6, r6
 8011398:	4283      	cmp	r3, r0
 801139a:	4637      	mov	r7, r6
 801139c:	dc05      	bgt.n	80113aa <__swbuf_r+0x4e>
 801139e:	4621      	mov	r1, r4
 80113a0:	4628      	mov	r0, r5
 80113a2:	f7ff fa53 	bl	801084c <_fflush_r>
 80113a6:	2800      	cmp	r0, #0
 80113a8:	d1ed      	bne.n	8011386 <__swbuf_r+0x2a>
 80113aa:	68a3      	ldr	r3, [r4, #8]
 80113ac:	3b01      	subs	r3, #1
 80113ae:	60a3      	str	r3, [r4, #8]
 80113b0:	6823      	ldr	r3, [r4, #0]
 80113b2:	1c5a      	adds	r2, r3, #1
 80113b4:	6022      	str	r2, [r4, #0]
 80113b6:	701e      	strb	r6, [r3, #0]
 80113b8:	6962      	ldr	r2, [r4, #20]
 80113ba:	1c43      	adds	r3, r0, #1
 80113bc:	429a      	cmp	r2, r3
 80113be:	d004      	beq.n	80113ca <__swbuf_r+0x6e>
 80113c0:	89a3      	ldrh	r3, [r4, #12]
 80113c2:	07db      	lsls	r3, r3, #31
 80113c4:	d5e1      	bpl.n	801138a <__swbuf_r+0x2e>
 80113c6:	2e0a      	cmp	r6, #10
 80113c8:	d1df      	bne.n	801138a <__swbuf_r+0x2e>
 80113ca:	4621      	mov	r1, r4
 80113cc:	4628      	mov	r0, r5
 80113ce:	f7ff fa3d 	bl	801084c <_fflush_r>
 80113d2:	2800      	cmp	r0, #0
 80113d4:	d0d9      	beq.n	801138a <__swbuf_r+0x2e>
 80113d6:	e7d6      	b.n	8011386 <__swbuf_r+0x2a>

080113d8 <__swsetup_r>:
 80113d8:	b538      	push	{r3, r4, r5, lr}
 80113da:	4b29      	ldr	r3, [pc, #164]	@ (8011480 <__swsetup_r+0xa8>)
 80113dc:	4605      	mov	r5, r0
 80113de:	6818      	ldr	r0, [r3, #0]
 80113e0:	460c      	mov	r4, r1
 80113e2:	b118      	cbz	r0, 80113ec <__swsetup_r+0x14>
 80113e4:	6a03      	ldr	r3, [r0, #32]
 80113e6:	b90b      	cbnz	r3, 80113ec <__swsetup_r+0x14>
 80113e8:	f7fc fc6e 	bl	800dcc8 <__sinit>
 80113ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113f0:	0719      	lsls	r1, r3, #28
 80113f2:	d422      	bmi.n	801143a <__swsetup_r+0x62>
 80113f4:	06da      	lsls	r2, r3, #27
 80113f6:	d407      	bmi.n	8011408 <__swsetup_r+0x30>
 80113f8:	2209      	movs	r2, #9
 80113fa:	602a      	str	r2, [r5, #0]
 80113fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011400:	81a3      	strh	r3, [r4, #12]
 8011402:	f04f 30ff 	mov.w	r0, #4294967295
 8011406:	e033      	b.n	8011470 <__swsetup_r+0x98>
 8011408:	0758      	lsls	r0, r3, #29
 801140a:	d512      	bpl.n	8011432 <__swsetup_r+0x5a>
 801140c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801140e:	b141      	cbz	r1, 8011422 <__swsetup_r+0x4a>
 8011410:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011414:	4299      	cmp	r1, r3
 8011416:	d002      	beq.n	801141e <__swsetup_r+0x46>
 8011418:	4628      	mov	r0, r5
 801141a:	f7fd fc05 	bl	800ec28 <_free_r>
 801141e:	2300      	movs	r3, #0
 8011420:	6363      	str	r3, [r4, #52]	@ 0x34
 8011422:	89a3      	ldrh	r3, [r4, #12]
 8011424:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011428:	81a3      	strh	r3, [r4, #12]
 801142a:	2300      	movs	r3, #0
 801142c:	6063      	str	r3, [r4, #4]
 801142e:	6923      	ldr	r3, [r4, #16]
 8011430:	6023      	str	r3, [r4, #0]
 8011432:	89a3      	ldrh	r3, [r4, #12]
 8011434:	f043 0308 	orr.w	r3, r3, #8
 8011438:	81a3      	strh	r3, [r4, #12]
 801143a:	6923      	ldr	r3, [r4, #16]
 801143c:	b94b      	cbnz	r3, 8011452 <__swsetup_r+0x7a>
 801143e:	89a3      	ldrh	r3, [r4, #12]
 8011440:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011448:	d003      	beq.n	8011452 <__swsetup_r+0x7a>
 801144a:	4621      	mov	r1, r4
 801144c:	4628      	mov	r0, r5
 801144e:	f000 f883 	bl	8011558 <__smakebuf_r>
 8011452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011456:	f013 0201 	ands.w	r2, r3, #1
 801145a:	d00a      	beq.n	8011472 <__swsetup_r+0x9a>
 801145c:	2200      	movs	r2, #0
 801145e:	60a2      	str	r2, [r4, #8]
 8011460:	6962      	ldr	r2, [r4, #20]
 8011462:	4252      	negs	r2, r2
 8011464:	61a2      	str	r2, [r4, #24]
 8011466:	6922      	ldr	r2, [r4, #16]
 8011468:	b942      	cbnz	r2, 801147c <__swsetup_r+0xa4>
 801146a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801146e:	d1c5      	bne.n	80113fc <__swsetup_r+0x24>
 8011470:	bd38      	pop	{r3, r4, r5, pc}
 8011472:	0799      	lsls	r1, r3, #30
 8011474:	bf58      	it	pl
 8011476:	6962      	ldrpl	r2, [r4, #20]
 8011478:	60a2      	str	r2, [r4, #8]
 801147a:	e7f4      	b.n	8011466 <__swsetup_r+0x8e>
 801147c:	2000      	movs	r0, #0
 801147e:	e7f7      	b.n	8011470 <__swsetup_r+0x98>
 8011480:	20000144 	.word	0x20000144

08011484 <_raise_r>:
 8011484:	291f      	cmp	r1, #31
 8011486:	b538      	push	{r3, r4, r5, lr}
 8011488:	4605      	mov	r5, r0
 801148a:	460c      	mov	r4, r1
 801148c:	d904      	bls.n	8011498 <_raise_r+0x14>
 801148e:	2316      	movs	r3, #22
 8011490:	6003      	str	r3, [r0, #0]
 8011492:	f04f 30ff 	mov.w	r0, #4294967295
 8011496:	bd38      	pop	{r3, r4, r5, pc}
 8011498:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801149a:	b112      	cbz	r2, 80114a2 <_raise_r+0x1e>
 801149c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114a0:	b94b      	cbnz	r3, 80114b6 <_raise_r+0x32>
 80114a2:	4628      	mov	r0, r5
 80114a4:	f000 f830 	bl	8011508 <_getpid_r>
 80114a8:	4622      	mov	r2, r4
 80114aa:	4601      	mov	r1, r0
 80114ac:	4628      	mov	r0, r5
 80114ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114b2:	f000 b817 	b.w	80114e4 <_kill_r>
 80114b6:	2b01      	cmp	r3, #1
 80114b8:	d00a      	beq.n	80114d0 <_raise_r+0x4c>
 80114ba:	1c59      	adds	r1, r3, #1
 80114bc:	d103      	bne.n	80114c6 <_raise_r+0x42>
 80114be:	2316      	movs	r3, #22
 80114c0:	6003      	str	r3, [r0, #0]
 80114c2:	2001      	movs	r0, #1
 80114c4:	e7e7      	b.n	8011496 <_raise_r+0x12>
 80114c6:	2100      	movs	r1, #0
 80114c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80114cc:	4620      	mov	r0, r4
 80114ce:	4798      	blx	r3
 80114d0:	2000      	movs	r0, #0
 80114d2:	e7e0      	b.n	8011496 <_raise_r+0x12>

080114d4 <raise>:
 80114d4:	4b02      	ldr	r3, [pc, #8]	@ (80114e0 <raise+0xc>)
 80114d6:	4601      	mov	r1, r0
 80114d8:	6818      	ldr	r0, [r3, #0]
 80114da:	f7ff bfd3 	b.w	8011484 <_raise_r>
 80114de:	bf00      	nop
 80114e0:	20000144 	.word	0x20000144

080114e4 <_kill_r>:
 80114e4:	b538      	push	{r3, r4, r5, lr}
 80114e6:	4d07      	ldr	r5, [pc, #28]	@ (8011504 <_kill_r+0x20>)
 80114e8:	2300      	movs	r3, #0
 80114ea:	4604      	mov	r4, r0
 80114ec:	4608      	mov	r0, r1
 80114ee:	4611      	mov	r1, r2
 80114f0:	602b      	str	r3, [r5, #0]
 80114f2:	f7f2 f877 	bl	80035e4 <_kill>
 80114f6:	1c43      	adds	r3, r0, #1
 80114f8:	d102      	bne.n	8011500 <_kill_r+0x1c>
 80114fa:	682b      	ldr	r3, [r5, #0]
 80114fc:	b103      	cbz	r3, 8011500 <_kill_r+0x1c>
 80114fe:	6023      	str	r3, [r4, #0]
 8011500:	bd38      	pop	{r3, r4, r5, pc}
 8011502:	bf00      	nop
 8011504:	200023e4 	.word	0x200023e4

08011508 <_getpid_r>:
 8011508:	f7f2 b864 	b.w	80035d4 <_getpid>

0801150c <__swhatbuf_r>:
 801150c:	b570      	push	{r4, r5, r6, lr}
 801150e:	460c      	mov	r4, r1
 8011510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011514:	2900      	cmp	r1, #0
 8011516:	b096      	sub	sp, #88	@ 0x58
 8011518:	4615      	mov	r5, r2
 801151a:	461e      	mov	r6, r3
 801151c:	da0d      	bge.n	801153a <__swhatbuf_r+0x2e>
 801151e:	89a3      	ldrh	r3, [r4, #12]
 8011520:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011524:	f04f 0100 	mov.w	r1, #0
 8011528:	bf14      	ite	ne
 801152a:	2340      	movne	r3, #64	@ 0x40
 801152c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011530:	2000      	movs	r0, #0
 8011532:	6031      	str	r1, [r6, #0]
 8011534:	602b      	str	r3, [r5, #0]
 8011536:	b016      	add	sp, #88	@ 0x58
 8011538:	bd70      	pop	{r4, r5, r6, pc}
 801153a:	466a      	mov	r2, sp
 801153c:	f000 f848 	bl	80115d0 <_fstat_r>
 8011540:	2800      	cmp	r0, #0
 8011542:	dbec      	blt.n	801151e <__swhatbuf_r+0x12>
 8011544:	9901      	ldr	r1, [sp, #4]
 8011546:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801154a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801154e:	4259      	negs	r1, r3
 8011550:	4159      	adcs	r1, r3
 8011552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011556:	e7eb      	b.n	8011530 <__swhatbuf_r+0x24>

08011558 <__smakebuf_r>:
 8011558:	898b      	ldrh	r3, [r1, #12]
 801155a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801155c:	079d      	lsls	r5, r3, #30
 801155e:	4606      	mov	r6, r0
 8011560:	460c      	mov	r4, r1
 8011562:	d507      	bpl.n	8011574 <__smakebuf_r+0x1c>
 8011564:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011568:	6023      	str	r3, [r4, #0]
 801156a:	6123      	str	r3, [r4, #16]
 801156c:	2301      	movs	r3, #1
 801156e:	6163      	str	r3, [r4, #20]
 8011570:	b003      	add	sp, #12
 8011572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011574:	ab01      	add	r3, sp, #4
 8011576:	466a      	mov	r2, sp
 8011578:	f7ff ffc8 	bl	801150c <__swhatbuf_r>
 801157c:	9f00      	ldr	r7, [sp, #0]
 801157e:	4605      	mov	r5, r0
 8011580:	4639      	mov	r1, r7
 8011582:	4630      	mov	r0, r6
 8011584:	f7fd fbc4 	bl	800ed10 <_malloc_r>
 8011588:	b948      	cbnz	r0, 801159e <__smakebuf_r+0x46>
 801158a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801158e:	059a      	lsls	r2, r3, #22
 8011590:	d4ee      	bmi.n	8011570 <__smakebuf_r+0x18>
 8011592:	f023 0303 	bic.w	r3, r3, #3
 8011596:	f043 0302 	orr.w	r3, r3, #2
 801159a:	81a3      	strh	r3, [r4, #12]
 801159c:	e7e2      	b.n	8011564 <__smakebuf_r+0xc>
 801159e:	89a3      	ldrh	r3, [r4, #12]
 80115a0:	6020      	str	r0, [r4, #0]
 80115a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115a6:	81a3      	strh	r3, [r4, #12]
 80115a8:	9b01      	ldr	r3, [sp, #4]
 80115aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80115ae:	b15b      	cbz	r3, 80115c8 <__smakebuf_r+0x70>
 80115b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115b4:	4630      	mov	r0, r6
 80115b6:	f000 f81d 	bl	80115f4 <_isatty_r>
 80115ba:	b128      	cbz	r0, 80115c8 <__smakebuf_r+0x70>
 80115bc:	89a3      	ldrh	r3, [r4, #12]
 80115be:	f023 0303 	bic.w	r3, r3, #3
 80115c2:	f043 0301 	orr.w	r3, r3, #1
 80115c6:	81a3      	strh	r3, [r4, #12]
 80115c8:	89a3      	ldrh	r3, [r4, #12]
 80115ca:	431d      	orrs	r5, r3
 80115cc:	81a5      	strh	r5, [r4, #12]
 80115ce:	e7cf      	b.n	8011570 <__smakebuf_r+0x18>

080115d0 <_fstat_r>:
 80115d0:	b538      	push	{r3, r4, r5, lr}
 80115d2:	4d07      	ldr	r5, [pc, #28]	@ (80115f0 <_fstat_r+0x20>)
 80115d4:	2300      	movs	r3, #0
 80115d6:	4604      	mov	r4, r0
 80115d8:	4608      	mov	r0, r1
 80115da:	4611      	mov	r1, r2
 80115dc:	602b      	str	r3, [r5, #0]
 80115de:	f7f2 f861 	bl	80036a4 <_fstat>
 80115e2:	1c43      	adds	r3, r0, #1
 80115e4:	d102      	bne.n	80115ec <_fstat_r+0x1c>
 80115e6:	682b      	ldr	r3, [r5, #0]
 80115e8:	b103      	cbz	r3, 80115ec <_fstat_r+0x1c>
 80115ea:	6023      	str	r3, [r4, #0]
 80115ec:	bd38      	pop	{r3, r4, r5, pc}
 80115ee:	bf00      	nop
 80115f0:	200023e4 	.word	0x200023e4

080115f4 <_isatty_r>:
 80115f4:	b538      	push	{r3, r4, r5, lr}
 80115f6:	4d06      	ldr	r5, [pc, #24]	@ (8011610 <_isatty_r+0x1c>)
 80115f8:	2300      	movs	r3, #0
 80115fa:	4604      	mov	r4, r0
 80115fc:	4608      	mov	r0, r1
 80115fe:	602b      	str	r3, [r5, #0]
 8011600:	f7f2 f860 	bl	80036c4 <_isatty>
 8011604:	1c43      	adds	r3, r0, #1
 8011606:	d102      	bne.n	801160e <_isatty_r+0x1a>
 8011608:	682b      	ldr	r3, [r5, #0]
 801160a:	b103      	cbz	r3, 801160e <_isatty_r+0x1a>
 801160c:	6023      	str	r3, [r4, #0]
 801160e:	bd38      	pop	{r3, r4, r5, pc}
 8011610:	200023e4 	.word	0x200023e4

08011614 <sqrt>:
 8011614:	b538      	push	{r3, r4, r5, lr}
 8011616:	ed2d 8b02 	vpush	{d8}
 801161a:	ec55 4b10 	vmov	r4, r5, d0
 801161e:	f000 f925 	bl	801186c <__ieee754_sqrt>
 8011622:	4622      	mov	r2, r4
 8011624:	462b      	mov	r3, r5
 8011626:	4620      	mov	r0, r4
 8011628:	4629      	mov	r1, r5
 801162a:	eeb0 8a40 	vmov.f32	s16, s0
 801162e:	eef0 8a60 	vmov.f32	s17, s1
 8011632:	f7ef fa7b 	bl	8000b2c <__aeabi_dcmpun>
 8011636:	b990      	cbnz	r0, 801165e <sqrt+0x4a>
 8011638:	2200      	movs	r2, #0
 801163a:	2300      	movs	r3, #0
 801163c:	4620      	mov	r0, r4
 801163e:	4629      	mov	r1, r5
 8011640:	f7ef fa4c 	bl	8000adc <__aeabi_dcmplt>
 8011644:	b158      	cbz	r0, 801165e <sqrt+0x4a>
 8011646:	f7fc fc5f 	bl	800df08 <__errno>
 801164a:	2321      	movs	r3, #33	@ 0x21
 801164c:	6003      	str	r3, [r0, #0]
 801164e:	2200      	movs	r2, #0
 8011650:	2300      	movs	r3, #0
 8011652:	4610      	mov	r0, r2
 8011654:	4619      	mov	r1, r3
 8011656:	f7ef f8f9 	bl	800084c <__aeabi_ddiv>
 801165a:	ec41 0b18 	vmov	d8, r0, r1
 801165e:	eeb0 0a48 	vmov.f32	s0, s16
 8011662:	eef0 0a68 	vmov.f32	s1, s17
 8011666:	ecbd 8b02 	vpop	{d8}
 801166a:	bd38      	pop	{r3, r4, r5, pc}
 801166c:	0000      	movs	r0, r0
	...

08011670 <cos>:
 8011670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011672:	ec53 2b10 	vmov	r2, r3, d0
 8011676:	4826      	ldr	r0, [pc, #152]	@ (8011710 <cos+0xa0>)
 8011678:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801167c:	4281      	cmp	r1, r0
 801167e:	d806      	bhi.n	801168e <cos+0x1e>
 8011680:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011708 <cos+0x98>
 8011684:	b005      	add	sp, #20
 8011686:	f85d eb04 	ldr.w	lr, [sp], #4
 801168a:	f000 b9c9 	b.w	8011a20 <__kernel_cos>
 801168e:	4821      	ldr	r0, [pc, #132]	@ (8011714 <cos+0xa4>)
 8011690:	4281      	cmp	r1, r0
 8011692:	d908      	bls.n	80116a6 <cos+0x36>
 8011694:	4610      	mov	r0, r2
 8011696:	4619      	mov	r1, r3
 8011698:	f7ee fdf6 	bl	8000288 <__aeabi_dsub>
 801169c:	ec41 0b10 	vmov	d0, r0, r1
 80116a0:	b005      	add	sp, #20
 80116a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80116a6:	4668      	mov	r0, sp
 80116a8:	f000 fb3e 	bl	8011d28 <__ieee754_rem_pio2>
 80116ac:	f000 0003 	and.w	r0, r0, #3
 80116b0:	2801      	cmp	r0, #1
 80116b2:	d00b      	beq.n	80116cc <cos+0x5c>
 80116b4:	2802      	cmp	r0, #2
 80116b6:	d015      	beq.n	80116e4 <cos+0x74>
 80116b8:	b9d8      	cbnz	r0, 80116f2 <cos+0x82>
 80116ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116be:	ed9d 0b00 	vldr	d0, [sp]
 80116c2:	f000 f9ad 	bl	8011a20 <__kernel_cos>
 80116c6:	ec51 0b10 	vmov	r0, r1, d0
 80116ca:	e7e7      	b.n	801169c <cos+0x2c>
 80116cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116d0:	ed9d 0b00 	vldr	d0, [sp]
 80116d4:	f000 fa6c 	bl	8011bb0 <__kernel_sin>
 80116d8:	ec53 2b10 	vmov	r2, r3, d0
 80116dc:	4610      	mov	r0, r2
 80116de:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80116e2:	e7db      	b.n	801169c <cos+0x2c>
 80116e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116e8:	ed9d 0b00 	vldr	d0, [sp]
 80116ec:	f000 f998 	bl	8011a20 <__kernel_cos>
 80116f0:	e7f2      	b.n	80116d8 <cos+0x68>
 80116f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116f6:	ed9d 0b00 	vldr	d0, [sp]
 80116fa:	2001      	movs	r0, #1
 80116fc:	f000 fa58 	bl	8011bb0 <__kernel_sin>
 8011700:	e7e1      	b.n	80116c6 <cos+0x56>
 8011702:	bf00      	nop
 8011704:	f3af 8000 	nop.w
	...
 8011710:	3fe921fb 	.word	0x3fe921fb
 8011714:	7fefffff 	.word	0x7fefffff

08011718 <sin>:
 8011718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801171a:	ec53 2b10 	vmov	r2, r3, d0
 801171e:	4826      	ldr	r0, [pc, #152]	@ (80117b8 <sin+0xa0>)
 8011720:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011724:	4281      	cmp	r1, r0
 8011726:	d807      	bhi.n	8011738 <sin+0x20>
 8011728:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80117b0 <sin+0x98>
 801172c:	2000      	movs	r0, #0
 801172e:	b005      	add	sp, #20
 8011730:	f85d eb04 	ldr.w	lr, [sp], #4
 8011734:	f000 ba3c 	b.w	8011bb0 <__kernel_sin>
 8011738:	4820      	ldr	r0, [pc, #128]	@ (80117bc <sin+0xa4>)
 801173a:	4281      	cmp	r1, r0
 801173c:	d908      	bls.n	8011750 <sin+0x38>
 801173e:	4610      	mov	r0, r2
 8011740:	4619      	mov	r1, r3
 8011742:	f7ee fda1 	bl	8000288 <__aeabi_dsub>
 8011746:	ec41 0b10 	vmov	d0, r0, r1
 801174a:	b005      	add	sp, #20
 801174c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011750:	4668      	mov	r0, sp
 8011752:	f000 fae9 	bl	8011d28 <__ieee754_rem_pio2>
 8011756:	f000 0003 	and.w	r0, r0, #3
 801175a:	2801      	cmp	r0, #1
 801175c:	d00c      	beq.n	8011778 <sin+0x60>
 801175e:	2802      	cmp	r0, #2
 8011760:	d011      	beq.n	8011786 <sin+0x6e>
 8011762:	b9e8      	cbnz	r0, 80117a0 <sin+0x88>
 8011764:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011768:	ed9d 0b00 	vldr	d0, [sp]
 801176c:	2001      	movs	r0, #1
 801176e:	f000 fa1f 	bl	8011bb0 <__kernel_sin>
 8011772:	ec51 0b10 	vmov	r0, r1, d0
 8011776:	e7e6      	b.n	8011746 <sin+0x2e>
 8011778:	ed9d 1b02 	vldr	d1, [sp, #8]
 801177c:	ed9d 0b00 	vldr	d0, [sp]
 8011780:	f000 f94e 	bl	8011a20 <__kernel_cos>
 8011784:	e7f5      	b.n	8011772 <sin+0x5a>
 8011786:	ed9d 1b02 	vldr	d1, [sp, #8]
 801178a:	ed9d 0b00 	vldr	d0, [sp]
 801178e:	2001      	movs	r0, #1
 8011790:	f000 fa0e 	bl	8011bb0 <__kernel_sin>
 8011794:	ec53 2b10 	vmov	r2, r3, d0
 8011798:	4610      	mov	r0, r2
 801179a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801179e:	e7d2      	b.n	8011746 <sin+0x2e>
 80117a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80117a4:	ed9d 0b00 	vldr	d0, [sp]
 80117a8:	f000 f93a 	bl	8011a20 <__kernel_cos>
 80117ac:	e7f2      	b.n	8011794 <sin+0x7c>
 80117ae:	bf00      	nop
	...
 80117b8:	3fe921fb 	.word	0x3fe921fb
 80117bc:	7fefffff 	.word	0x7fefffff

080117c0 <fmaxf>:
 80117c0:	b508      	push	{r3, lr}
 80117c2:	ed2d 8b02 	vpush	{d8}
 80117c6:	eeb0 8a40 	vmov.f32	s16, s0
 80117ca:	eef0 8a60 	vmov.f32	s17, s1
 80117ce:	f000 f831 	bl	8011834 <__fpclassifyf>
 80117d2:	b930      	cbnz	r0, 80117e2 <fmaxf+0x22>
 80117d4:	eeb0 8a68 	vmov.f32	s16, s17
 80117d8:	eeb0 0a48 	vmov.f32	s0, s16
 80117dc:	ecbd 8b02 	vpop	{d8}
 80117e0:	bd08      	pop	{r3, pc}
 80117e2:	eeb0 0a68 	vmov.f32	s0, s17
 80117e6:	f000 f825 	bl	8011834 <__fpclassifyf>
 80117ea:	2800      	cmp	r0, #0
 80117ec:	d0f4      	beq.n	80117d8 <fmaxf+0x18>
 80117ee:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80117f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f6:	dded      	ble.n	80117d4 <fmaxf+0x14>
 80117f8:	e7ee      	b.n	80117d8 <fmaxf+0x18>

080117fa <fminf>:
 80117fa:	b508      	push	{r3, lr}
 80117fc:	ed2d 8b02 	vpush	{d8}
 8011800:	eeb0 8a40 	vmov.f32	s16, s0
 8011804:	eef0 8a60 	vmov.f32	s17, s1
 8011808:	f000 f814 	bl	8011834 <__fpclassifyf>
 801180c:	b930      	cbnz	r0, 801181c <fminf+0x22>
 801180e:	eeb0 8a68 	vmov.f32	s16, s17
 8011812:	eeb0 0a48 	vmov.f32	s0, s16
 8011816:	ecbd 8b02 	vpop	{d8}
 801181a:	bd08      	pop	{r3, pc}
 801181c:	eeb0 0a68 	vmov.f32	s0, s17
 8011820:	f000 f808 	bl	8011834 <__fpclassifyf>
 8011824:	2800      	cmp	r0, #0
 8011826:	d0f4      	beq.n	8011812 <fminf+0x18>
 8011828:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011830:	d5ed      	bpl.n	801180e <fminf+0x14>
 8011832:	e7ee      	b.n	8011812 <fminf+0x18>

08011834 <__fpclassifyf>:
 8011834:	ee10 3a10 	vmov	r3, s0
 8011838:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801183c:	d00d      	beq.n	801185a <__fpclassifyf+0x26>
 801183e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8011842:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8011846:	d30a      	bcc.n	801185e <__fpclassifyf+0x2a>
 8011848:	4b07      	ldr	r3, [pc, #28]	@ (8011868 <__fpclassifyf+0x34>)
 801184a:	1e42      	subs	r2, r0, #1
 801184c:	429a      	cmp	r2, r3
 801184e:	d908      	bls.n	8011862 <__fpclassifyf+0x2e>
 8011850:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8011854:	4258      	negs	r0, r3
 8011856:	4158      	adcs	r0, r3
 8011858:	4770      	bx	lr
 801185a:	2002      	movs	r0, #2
 801185c:	4770      	bx	lr
 801185e:	2004      	movs	r0, #4
 8011860:	4770      	bx	lr
 8011862:	2003      	movs	r0, #3
 8011864:	4770      	bx	lr
 8011866:	bf00      	nop
 8011868:	007ffffe 	.word	0x007ffffe

0801186c <__ieee754_sqrt>:
 801186c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011870:	4a68      	ldr	r2, [pc, #416]	@ (8011a14 <__ieee754_sqrt+0x1a8>)
 8011872:	ec55 4b10 	vmov	r4, r5, d0
 8011876:	43aa      	bics	r2, r5
 8011878:	462b      	mov	r3, r5
 801187a:	4621      	mov	r1, r4
 801187c:	d110      	bne.n	80118a0 <__ieee754_sqrt+0x34>
 801187e:	4622      	mov	r2, r4
 8011880:	4620      	mov	r0, r4
 8011882:	4629      	mov	r1, r5
 8011884:	f7ee feb8 	bl	80005f8 <__aeabi_dmul>
 8011888:	4602      	mov	r2, r0
 801188a:	460b      	mov	r3, r1
 801188c:	4620      	mov	r0, r4
 801188e:	4629      	mov	r1, r5
 8011890:	f7ee fcfc 	bl	800028c <__adddf3>
 8011894:	4604      	mov	r4, r0
 8011896:	460d      	mov	r5, r1
 8011898:	ec45 4b10 	vmov	d0, r4, r5
 801189c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118a0:	2d00      	cmp	r5, #0
 80118a2:	dc0e      	bgt.n	80118c2 <__ieee754_sqrt+0x56>
 80118a4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80118a8:	4322      	orrs	r2, r4
 80118aa:	d0f5      	beq.n	8011898 <__ieee754_sqrt+0x2c>
 80118ac:	b19d      	cbz	r5, 80118d6 <__ieee754_sqrt+0x6a>
 80118ae:	4622      	mov	r2, r4
 80118b0:	4620      	mov	r0, r4
 80118b2:	4629      	mov	r1, r5
 80118b4:	f7ee fce8 	bl	8000288 <__aeabi_dsub>
 80118b8:	4602      	mov	r2, r0
 80118ba:	460b      	mov	r3, r1
 80118bc:	f7ee ffc6 	bl	800084c <__aeabi_ddiv>
 80118c0:	e7e8      	b.n	8011894 <__ieee754_sqrt+0x28>
 80118c2:	152a      	asrs	r2, r5, #20
 80118c4:	d115      	bne.n	80118f2 <__ieee754_sqrt+0x86>
 80118c6:	2000      	movs	r0, #0
 80118c8:	e009      	b.n	80118de <__ieee754_sqrt+0x72>
 80118ca:	0acb      	lsrs	r3, r1, #11
 80118cc:	3a15      	subs	r2, #21
 80118ce:	0549      	lsls	r1, r1, #21
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d0fa      	beq.n	80118ca <__ieee754_sqrt+0x5e>
 80118d4:	e7f7      	b.n	80118c6 <__ieee754_sqrt+0x5a>
 80118d6:	462a      	mov	r2, r5
 80118d8:	e7fa      	b.n	80118d0 <__ieee754_sqrt+0x64>
 80118da:	005b      	lsls	r3, r3, #1
 80118dc:	3001      	adds	r0, #1
 80118de:	02dc      	lsls	r4, r3, #11
 80118e0:	d5fb      	bpl.n	80118da <__ieee754_sqrt+0x6e>
 80118e2:	1e44      	subs	r4, r0, #1
 80118e4:	1b12      	subs	r2, r2, r4
 80118e6:	f1c0 0420 	rsb	r4, r0, #32
 80118ea:	fa21 f404 	lsr.w	r4, r1, r4
 80118ee:	4323      	orrs	r3, r4
 80118f0:	4081      	lsls	r1, r0
 80118f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80118f6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80118fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80118fe:	07d2      	lsls	r2, r2, #31
 8011900:	bf5c      	itt	pl
 8011902:	005b      	lslpl	r3, r3, #1
 8011904:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8011908:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801190c:	bf58      	it	pl
 801190e:	0049      	lslpl	r1, r1, #1
 8011910:	2600      	movs	r6, #0
 8011912:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8011916:	106d      	asrs	r5, r5, #1
 8011918:	0049      	lsls	r1, r1, #1
 801191a:	2016      	movs	r0, #22
 801191c:	4632      	mov	r2, r6
 801191e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8011922:	1917      	adds	r7, r2, r4
 8011924:	429f      	cmp	r7, r3
 8011926:	bfde      	ittt	le
 8011928:	193a      	addle	r2, r7, r4
 801192a:	1bdb      	suble	r3, r3, r7
 801192c:	1936      	addle	r6, r6, r4
 801192e:	0fcf      	lsrs	r7, r1, #31
 8011930:	3801      	subs	r0, #1
 8011932:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8011936:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801193a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801193e:	d1f0      	bne.n	8011922 <__ieee754_sqrt+0xb6>
 8011940:	4604      	mov	r4, r0
 8011942:	2720      	movs	r7, #32
 8011944:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011948:	429a      	cmp	r2, r3
 801194a:	eb00 0e0c 	add.w	lr, r0, ip
 801194e:	db02      	blt.n	8011956 <__ieee754_sqrt+0xea>
 8011950:	d113      	bne.n	801197a <__ieee754_sqrt+0x10e>
 8011952:	458e      	cmp	lr, r1
 8011954:	d811      	bhi.n	801197a <__ieee754_sqrt+0x10e>
 8011956:	f1be 0f00 	cmp.w	lr, #0
 801195a:	eb0e 000c 	add.w	r0, lr, ip
 801195e:	da42      	bge.n	80119e6 <__ieee754_sqrt+0x17a>
 8011960:	2800      	cmp	r0, #0
 8011962:	db40      	blt.n	80119e6 <__ieee754_sqrt+0x17a>
 8011964:	f102 0801 	add.w	r8, r2, #1
 8011968:	1a9b      	subs	r3, r3, r2
 801196a:	458e      	cmp	lr, r1
 801196c:	bf88      	it	hi
 801196e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011972:	eba1 010e 	sub.w	r1, r1, lr
 8011976:	4464      	add	r4, ip
 8011978:	4642      	mov	r2, r8
 801197a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801197e:	3f01      	subs	r7, #1
 8011980:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011984:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011988:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801198c:	d1dc      	bne.n	8011948 <__ieee754_sqrt+0xdc>
 801198e:	4319      	orrs	r1, r3
 8011990:	d01b      	beq.n	80119ca <__ieee754_sqrt+0x15e>
 8011992:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8011a18 <__ieee754_sqrt+0x1ac>
 8011996:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8011a1c <__ieee754_sqrt+0x1b0>
 801199a:	e9da 0100 	ldrd	r0, r1, [sl]
 801199e:	e9db 2300 	ldrd	r2, r3, [fp]
 80119a2:	f7ee fc71 	bl	8000288 <__aeabi_dsub>
 80119a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80119aa:	4602      	mov	r2, r0
 80119ac:	460b      	mov	r3, r1
 80119ae:	4640      	mov	r0, r8
 80119b0:	4649      	mov	r1, r9
 80119b2:	f7ef f89d 	bl	8000af0 <__aeabi_dcmple>
 80119b6:	b140      	cbz	r0, 80119ca <__ieee754_sqrt+0x15e>
 80119b8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80119bc:	e9da 0100 	ldrd	r0, r1, [sl]
 80119c0:	e9db 2300 	ldrd	r2, r3, [fp]
 80119c4:	d111      	bne.n	80119ea <__ieee754_sqrt+0x17e>
 80119c6:	3601      	adds	r6, #1
 80119c8:	463c      	mov	r4, r7
 80119ca:	1072      	asrs	r2, r6, #1
 80119cc:	0863      	lsrs	r3, r4, #1
 80119ce:	07f1      	lsls	r1, r6, #31
 80119d0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80119d4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80119d8:	bf48      	it	mi
 80119da:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80119de:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80119e2:	4618      	mov	r0, r3
 80119e4:	e756      	b.n	8011894 <__ieee754_sqrt+0x28>
 80119e6:	4690      	mov	r8, r2
 80119e8:	e7be      	b.n	8011968 <__ieee754_sqrt+0xfc>
 80119ea:	f7ee fc4f 	bl	800028c <__adddf3>
 80119ee:	e9da 8900 	ldrd	r8, r9, [sl]
 80119f2:	4602      	mov	r2, r0
 80119f4:	460b      	mov	r3, r1
 80119f6:	4640      	mov	r0, r8
 80119f8:	4649      	mov	r1, r9
 80119fa:	f7ef f86f 	bl	8000adc <__aeabi_dcmplt>
 80119fe:	b120      	cbz	r0, 8011a0a <__ieee754_sqrt+0x19e>
 8011a00:	1ca0      	adds	r0, r4, #2
 8011a02:	bf08      	it	eq
 8011a04:	3601      	addeq	r6, #1
 8011a06:	3402      	adds	r4, #2
 8011a08:	e7df      	b.n	80119ca <__ieee754_sqrt+0x15e>
 8011a0a:	1c63      	adds	r3, r4, #1
 8011a0c:	f023 0401 	bic.w	r4, r3, #1
 8011a10:	e7db      	b.n	80119ca <__ieee754_sqrt+0x15e>
 8011a12:	bf00      	nop
 8011a14:	7ff00000 	.word	0x7ff00000
 8011a18:	20000308 	.word	0x20000308
 8011a1c:	20000300 	.word	0x20000300

08011a20 <__kernel_cos>:
 8011a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a24:	ec57 6b10 	vmov	r6, r7, d0
 8011a28:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011a2c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8011a30:	ed8d 1b00 	vstr	d1, [sp]
 8011a34:	d206      	bcs.n	8011a44 <__kernel_cos+0x24>
 8011a36:	4630      	mov	r0, r6
 8011a38:	4639      	mov	r1, r7
 8011a3a:	f7ef f88d 	bl	8000b58 <__aeabi_d2iz>
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	f000 8088 	beq.w	8011b54 <__kernel_cos+0x134>
 8011a44:	4632      	mov	r2, r6
 8011a46:	463b      	mov	r3, r7
 8011a48:	4630      	mov	r0, r6
 8011a4a:	4639      	mov	r1, r7
 8011a4c:	f7ee fdd4 	bl	80005f8 <__aeabi_dmul>
 8011a50:	4b51      	ldr	r3, [pc, #324]	@ (8011b98 <__kernel_cos+0x178>)
 8011a52:	2200      	movs	r2, #0
 8011a54:	4604      	mov	r4, r0
 8011a56:	460d      	mov	r5, r1
 8011a58:	f7ee fdce 	bl	80005f8 <__aeabi_dmul>
 8011a5c:	a340      	add	r3, pc, #256	@ (adr r3, 8011b60 <__kernel_cos+0x140>)
 8011a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a62:	4682      	mov	sl, r0
 8011a64:	468b      	mov	fp, r1
 8011a66:	4620      	mov	r0, r4
 8011a68:	4629      	mov	r1, r5
 8011a6a:	f7ee fdc5 	bl	80005f8 <__aeabi_dmul>
 8011a6e:	a33e      	add	r3, pc, #248	@ (adr r3, 8011b68 <__kernel_cos+0x148>)
 8011a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a74:	f7ee fc0a 	bl	800028c <__adddf3>
 8011a78:	4622      	mov	r2, r4
 8011a7a:	462b      	mov	r3, r5
 8011a7c:	f7ee fdbc 	bl	80005f8 <__aeabi_dmul>
 8011a80:	a33b      	add	r3, pc, #236	@ (adr r3, 8011b70 <__kernel_cos+0x150>)
 8011a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a86:	f7ee fbff 	bl	8000288 <__aeabi_dsub>
 8011a8a:	4622      	mov	r2, r4
 8011a8c:	462b      	mov	r3, r5
 8011a8e:	f7ee fdb3 	bl	80005f8 <__aeabi_dmul>
 8011a92:	a339      	add	r3, pc, #228	@ (adr r3, 8011b78 <__kernel_cos+0x158>)
 8011a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a98:	f7ee fbf8 	bl	800028c <__adddf3>
 8011a9c:	4622      	mov	r2, r4
 8011a9e:	462b      	mov	r3, r5
 8011aa0:	f7ee fdaa 	bl	80005f8 <__aeabi_dmul>
 8011aa4:	a336      	add	r3, pc, #216	@ (adr r3, 8011b80 <__kernel_cos+0x160>)
 8011aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aaa:	f7ee fbed 	bl	8000288 <__aeabi_dsub>
 8011aae:	4622      	mov	r2, r4
 8011ab0:	462b      	mov	r3, r5
 8011ab2:	f7ee fda1 	bl	80005f8 <__aeabi_dmul>
 8011ab6:	a334      	add	r3, pc, #208	@ (adr r3, 8011b88 <__kernel_cos+0x168>)
 8011ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abc:	f7ee fbe6 	bl	800028c <__adddf3>
 8011ac0:	4622      	mov	r2, r4
 8011ac2:	462b      	mov	r3, r5
 8011ac4:	f7ee fd98 	bl	80005f8 <__aeabi_dmul>
 8011ac8:	4622      	mov	r2, r4
 8011aca:	462b      	mov	r3, r5
 8011acc:	f7ee fd94 	bl	80005f8 <__aeabi_dmul>
 8011ad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	460d      	mov	r5, r1
 8011ad8:	4630      	mov	r0, r6
 8011ada:	4639      	mov	r1, r7
 8011adc:	f7ee fd8c 	bl	80005f8 <__aeabi_dmul>
 8011ae0:	460b      	mov	r3, r1
 8011ae2:	4602      	mov	r2, r0
 8011ae4:	4629      	mov	r1, r5
 8011ae6:	4620      	mov	r0, r4
 8011ae8:	f7ee fbce 	bl	8000288 <__aeabi_dsub>
 8011aec:	4b2b      	ldr	r3, [pc, #172]	@ (8011b9c <__kernel_cos+0x17c>)
 8011aee:	4598      	cmp	r8, r3
 8011af0:	4606      	mov	r6, r0
 8011af2:	460f      	mov	r7, r1
 8011af4:	d810      	bhi.n	8011b18 <__kernel_cos+0xf8>
 8011af6:	4602      	mov	r2, r0
 8011af8:	460b      	mov	r3, r1
 8011afa:	4650      	mov	r0, sl
 8011afc:	4659      	mov	r1, fp
 8011afe:	f7ee fbc3 	bl	8000288 <__aeabi_dsub>
 8011b02:	460b      	mov	r3, r1
 8011b04:	4926      	ldr	r1, [pc, #152]	@ (8011ba0 <__kernel_cos+0x180>)
 8011b06:	4602      	mov	r2, r0
 8011b08:	2000      	movs	r0, #0
 8011b0a:	f7ee fbbd 	bl	8000288 <__aeabi_dsub>
 8011b0e:	ec41 0b10 	vmov	d0, r0, r1
 8011b12:	b003      	add	sp, #12
 8011b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b18:	4b22      	ldr	r3, [pc, #136]	@ (8011ba4 <__kernel_cos+0x184>)
 8011b1a:	4921      	ldr	r1, [pc, #132]	@ (8011ba0 <__kernel_cos+0x180>)
 8011b1c:	4598      	cmp	r8, r3
 8011b1e:	bf8c      	ite	hi
 8011b20:	4d21      	ldrhi	r5, [pc, #132]	@ (8011ba8 <__kernel_cos+0x188>)
 8011b22:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8011b26:	2400      	movs	r4, #0
 8011b28:	4622      	mov	r2, r4
 8011b2a:	462b      	mov	r3, r5
 8011b2c:	2000      	movs	r0, #0
 8011b2e:	f7ee fbab 	bl	8000288 <__aeabi_dsub>
 8011b32:	4622      	mov	r2, r4
 8011b34:	4680      	mov	r8, r0
 8011b36:	4689      	mov	r9, r1
 8011b38:	462b      	mov	r3, r5
 8011b3a:	4650      	mov	r0, sl
 8011b3c:	4659      	mov	r1, fp
 8011b3e:	f7ee fba3 	bl	8000288 <__aeabi_dsub>
 8011b42:	4632      	mov	r2, r6
 8011b44:	463b      	mov	r3, r7
 8011b46:	f7ee fb9f 	bl	8000288 <__aeabi_dsub>
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	460b      	mov	r3, r1
 8011b4e:	4640      	mov	r0, r8
 8011b50:	4649      	mov	r1, r9
 8011b52:	e7da      	b.n	8011b0a <__kernel_cos+0xea>
 8011b54:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8011b90 <__kernel_cos+0x170>
 8011b58:	e7db      	b.n	8011b12 <__kernel_cos+0xf2>
 8011b5a:	bf00      	nop
 8011b5c:	f3af 8000 	nop.w
 8011b60:	be8838d4 	.word	0xbe8838d4
 8011b64:	bda8fae9 	.word	0xbda8fae9
 8011b68:	bdb4b1c4 	.word	0xbdb4b1c4
 8011b6c:	3e21ee9e 	.word	0x3e21ee9e
 8011b70:	809c52ad 	.word	0x809c52ad
 8011b74:	3e927e4f 	.word	0x3e927e4f
 8011b78:	19cb1590 	.word	0x19cb1590
 8011b7c:	3efa01a0 	.word	0x3efa01a0
 8011b80:	16c15177 	.word	0x16c15177
 8011b84:	3f56c16c 	.word	0x3f56c16c
 8011b88:	5555554c 	.word	0x5555554c
 8011b8c:	3fa55555 	.word	0x3fa55555
 8011b90:	00000000 	.word	0x00000000
 8011b94:	3ff00000 	.word	0x3ff00000
 8011b98:	3fe00000 	.word	0x3fe00000
 8011b9c:	3fd33332 	.word	0x3fd33332
 8011ba0:	3ff00000 	.word	0x3ff00000
 8011ba4:	3fe90000 	.word	0x3fe90000
 8011ba8:	3fd20000 	.word	0x3fd20000
 8011bac:	00000000 	.word	0x00000000

08011bb0 <__kernel_sin>:
 8011bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb4:	ec55 4b10 	vmov	r4, r5, d0
 8011bb8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011bbc:	b085      	sub	sp, #20
 8011bbe:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8011bc2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011bc6:	4680      	mov	r8, r0
 8011bc8:	d205      	bcs.n	8011bd6 <__kernel_sin+0x26>
 8011bca:	4620      	mov	r0, r4
 8011bcc:	4629      	mov	r1, r5
 8011bce:	f7ee ffc3 	bl	8000b58 <__aeabi_d2iz>
 8011bd2:	2800      	cmp	r0, #0
 8011bd4:	d052      	beq.n	8011c7c <__kernel_sin+0xcc>
 8011bd6:	4622      	mov	r2, r4
 8011bd8:	462b      	mov	r3, r5
 8011bda:	4620      	mov	r0, r4
 8011bdc:	4629      	mov	r1, r5
 8011bde:	f7ee fd0b 	bl	80005f8 <__aeabi_dmul>
 8011be2:	4682      	mov	sl, r0
 8011be4:	468b      	mov	fp, r1
 8011be6:	4602      	mov	r2, r0
 8011be8:	460b      	mov	r3, r1
 8011bea:	4620      	mov	r0, r4
 8011bec:	4629      	mov	r1, r5
 8011bee:	f7ee fd03 	bl	80005f8 <__aeabi_dmul>
 8011bf2:	a342      	add	r3, pc, #264	@ (adr r3, 8011cfc <__kernel_sin+0x14c>)
 8011bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf8:	e9cd 0100 	strd	r0, r1, [sp]
 8011bfc:	4650      	mov	r0, sl
 8011bfe:	4659      	mov	r1, fp
 8011c00:	f7ee fcfa 	bl	80005f8 <__aeabi_dmul>
 8011c04:	a33f      	add	r3, pc, #252	@ (adr r3, 8011d04 <__kernel_sin+0x154>)
 8011c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0a:	f7ee fb3d 	bl	8000288 <__aeabi_dsub>
 8011c0e:	4652      	mov	r2, sl
 8011c10:	465b      	mov	r3, fp
 8011c12:	f7ee fcf1 	bl	80005f8 <__aeabi_dmul>
 8011c16:	a33d      	add	r3, pc, #244	@ (adr r3, 8011d0c <__kernel_sin+0x15c>)
 8011c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1c:	f7ee fb36 	bl	800028c <__adddf3>
 8011c20:	4652      	mov	r2, sl
 8011c22:	465b      	mov	r3, fp
 8011c24:	f7ee fce8 	bl	80005f8 <__aeabi_dmul>
 8011c28:	a33a      	add	r3, pc, #232	@ (adr r3, 8011d14 <__kernel_sin+0x164>)
 8011c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2e:	f7ee fb2b 	bl	8000288 <__aeabi_dsub>
 8011c32:	4652      	mov	r2, sl
 8011c34:	465b      	mov	r3, fp
 8011c36:	f7ee fcdf 	bl	80005f8 <__aeabi_dmul>
 8011c3a:	a338      	add	r3, pc, #224	@ (adr r3, 8011d1c <__kernel_sin+0x16c>)
 8011c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c40:	f7ee fb24 	bl	800028c <__adddf3>
 8011c44:	4606      	mov	r6, r0
 8011c46:	460f      	mov	r7, r1
 8011c48:	f1b8 0f00 	cmp.w	r8, #0
 8011c4c:	d11b      	bne.n	8011c86 <__kernel_sin+0xd6>
 8011c4e:	4602      	mov	r2, r0
 8011c50:	460b      	mov	r3, r1
 8011c52:	4650      	mov	r0, sl
 8011c54:	4659      	mov	r1, fp
 8011c56:	f7ee fccf 	bl	80005f8 <__aeabi_dmul>
 8011c5a:	a325      	add	r3, pc, #148	@ (adr r3, 8011cf0 <__kernel_sin+0x140>)
 8011c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c60:	f7ee fb12 	bl	8000288 <__aeabi_dsub>
 8011c64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c68:	f7ee fcc6 	bl	80005f8 <__aeabi_dmul>
 8011c6c:	4602      	mov	r2, r0
 8011c6e:	460b      	mov	r3, r1
 8011c70:	4620      	mov	r0, r4
 8011c72:	4629      	mov	r1, r5
 8011c74:	f7ee fb0a 	bl	800028c <__adddf3>
 8011c78:	4604      	mov	r4, r0
 8011c7a:	460d      	mov	r5, r1
 8011c7c:	ec45 4b10 	vmov	d0, r4, r5
 8011c80:	b005      	add	sp, #20
 8011c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8011cf8 <__kernel_sin+0x148>)
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	f7ee fcb3 	bl	80005f8 <__aeabi_dmul>
 8011c92:	4632      	mov	r2, r6
 8011c94:	4680      	mov	r8, r0
 8011c96:	4689      	mov	r9, r1
 8011c98:	463b      	mov	r3, r7
 8011c9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c9e:	f7ee fcab 	bl	80005f8 <__aeabi_dmul>
 8011ca2:	4602      	mov	r2, r0
 8011ca4:	460b      	mov	r3, r1
 8011ca6:	4640      	mov	r0, r8
 8011ca8:	4649      	mov	r1, r9
 8011caa:	f7ee faed 	bl	8000288 <__aeabi_dsub>
 8011cae:	4652      	mov	r2, sl
 8011cb0:	465b      	mov	r3, fp
 8011cb2:	f7ee fca1 	bl	80005f8 <__aeabi_dmul>
 8011cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011cba:	f7ee fae5 	bl	8000288 <__aeabi_dsub>
 8011cbe:	a30c      	add	r3, pc, #48	@ (adr r3, 8011cf0 <__kernel_sin+0x140>)
 8011cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc4:	4606      	mov	r6, r0
 8011cc6:	460f      	mov	r7, r1
 8011cc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ccc:	f7ee fc94 	bl	80005f8 <__aeabi_dmul>
 8011cd0:	4602      	mov	r2, r0
 8011cd2:	460b      	mov	r3, r1
 8011cd4:	4630      	mov	r0, r6
 8011cd6:	4639      	mov	r1, r7
 8011cd8:	f7ee fad8 	bl	800028c <__adddf3>
 8011cdc:	4602      	mov	r2, r0
 8011cde:	460b      	mov	r3, r1
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	4629      	mov	r1, r5
 8011ce4:	f7ee fad0 	bl	8000288 <__aeabi_dsub>
 8011ce8:	e7c6      	b.n	8011c78 <__kernel_sin+0xc8>
 8011cea:	bf00      	nop
 8011cec:	f3af 8000 	nop.w
 8011cf0:	55555549 	.word	0x55555549
 8011cf4:	3fc55555 	.word	0x3fc55555
 8011cf8:	3fe00000 	.word	0x3fe00000
 8011cfc:	5acfd57c 	.word	0x5acfd57c
 8011d00:	3de5d93a 	.word	0x3de5d93a
 8011d04:	8a2b9ceb 	.word	0x8a2b9ceb
 8011d08:	3e5ae5e6 	.word	0x3e5ae5e6
 8011d0c:	57b1fe7d 	.word	0x57b1fe7d
 8011d10:	3ec71de3 	.word	0x3ec71de3
 8011d14:	19c161d5 	.word	0x19c161d5
 8011d18:	3f2a01a0 	.word	0x3f2a01a0
 8011d1c:	1110f8a6 	.word	0x1110f8a6
 8011d20:	3f811111 	.word	0x3f811111
 8011d24:	00000000 	.word	0x00000000

08011d28 <__ieee754_rem_pio2>:
 8011d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d2c:	ec57 6b10 	vmov	r6, r7, d0
 8011d30:	4bc5      	ldr	r3, [pc, #788]	@ (8012048 <__ieee754_rem_pio2+0x320>)
 8011d32:	b08d      	sub	sp, #52	@ 0x34
 8011d34:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011d38:	4598      	cmp	r8, r3
 8011d3a:	4604      	mov	r4, r0
 8011d3c:	9704      	str	r7, [sp, #16]
 8011d3e:	d807      	bhi.n	8011d50 <__ieee754_rem_pio2+0x28>
 8011d40:	2200      	movs	r2, #0
 8011d42:	2300      	movs	r3, #0
 8011d44:	ed80 0b00 	vstr	d0, [r0]
 8011d48:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011d4c:	2500      	movs	r5, #0
 8011d4e:	e028      	b.n	8011da2 <__ieee754_rem_pio2+0x7a>
 8011d50:	4bbe      	ldr	r3, [pc, #760]	@ (801204c <__ieee754_rem_pio2+0x324>)
 8011d52:	4598      	cmp	r8, r3
 8011d54:	d878      	bhi.n	8011e48 <__ieee754_rem_pio2+0x120>
 8011d56:	9b04      	ldr	r3, [sp, #16]
 8011d58:	4dbd      	ldr	r5, [pc, #756]	@ (8012050 <__ieee754_rem_pio2+0x328>)
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	4630      	mov	r0, r6
 8011d5e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8012010 <__ieee754_rem_pio2+0x2e8>)
 8011d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d64:	4639      	mov	r1, r7
 8011d66:	dd38      	ble.n	8011dda <__ieee754_rem_pio2+0xb2>
 8011d68:	f7ee fa8e 	bl	8000288 <__aeabi_dsub>
 8011d6c:	45a8      	cmp	r8, r5
 8011d6e:	4606      	mov	r6, r0
 8011d70:	460f      	mov	r7, r1
 8011d72:	d01a      	beq.n	8011daa <__ieee754_rem_pio2+0x82>
 8011d74:	a3a8      	add	r3, pc, #672	@ (adr r3, 8012018 <__ieee754_rem_pio2+0x2f0>)
 8011d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7a:	f7ee fa85 	bl	8000288 <__aeabi_dsub>
 8011d7e:	4602      	mov	r2, r0
 8011d80:	460b      	mov	r3, r1
 8011d82:	4680      	mov	r8, r0
 8011d84:	4689      	mov	r9, r1
 8011d86:	4630      	mov	r0, r6
 8011d88:	4639      	mov	r1, r7
 8011d8a:	f7ee fa7d 	bl	8000288 <__aeabi_dsub>
 8011d8e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8012018 <__ieee754_rem_pio2+0x2f0>)
 8011d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d94:	f7ee fa78 	bl	8000288 <__aeabi_dsub>
 8011d98:	e9c4 8900 	strd	r8, r9, [r4]
 8011d9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011da0:	2501      	movs	r5, #1
 8011da2:	4628      	mov	r0, r5
 8011da4:	b00d      	add	sp, #52	@ 0x34
 8011da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011daa:	a39d      	add	r3, pc, #628	@ (adr r3, 8012020 <__ieee754_rem_pio2+0x2f8>)
 8011dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db0:	f7ee fa6a 	bl	8000288 <__aeabi_dsub>
 8011db4:	a39c      	add	r3, pc, #624	@ (adr r3, 8012028 <__ieee754_rem_pio2+0x300>)
 8011db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dba:	4606      	mov	r6, r0
 8011dbc:	460f      	mov	r7, r1
 8011dbe:	f7ee fa63 	bl	8000288 <__aeabi_dsub>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	460b      	mov	r3, r1
 8011dc6:	4680      	mov	r8, r0
 8011dc8:	4689      	mov	r9, r1
 8011dca:	4630      	mov	r0, r6
 8011dcc:	4639      	mov	r1, r7
 8011dce:	f7ee fa5b 	bl	8000288 <__aeabi_dsub>
 8011dd2:	a395      	add	r3, pc, #596	@ (adr r3, 8012028 <__ieee754_rem_pio2+0x300>)
 8011dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd8:	e7dc      	b.n	8011d94 <__ieee754_rem_pio2+0x6c>
 8011dda:	f7ee fa57 	bl	800028c <__adddf3>
 8011dde:	45a8      	cmp	r8, r5
 8011de0:	4606      	mov	r6, r0
 8011de2:	460f      	mov	r7, r1
 8011de4:	d018      	beq.n	8011e18 <__ieee754_rem_pio2+0xf0>
 8011de6:	a38c      	add	r3, pc, #560	@ (adr r3, 8012018 <__ieee754_rem_pio2+0x2f0>)
 8011de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dec:	f7ee fa4e 	bl	800028c <__adddf3>
 8011df0:	4602      	mov	r2, r0
 8011df2:	460b      	mov	r3, r1
 8011df4:	4680      	mov	r8, r0
 8011df6:	4689      	mov	r9, r1
 8011df8:	4630      	mov	r0, r6
 8011dfa:	4639      	mov	r1, r7
 8011dfc:	f7ee fa44 	bl	8000288 <__aeabi_dsub>
 8011e00:	a385      	add	r3, pc, #532	@ (adr r3, 8012018 <__ieee754_rem_pio2+0x2f0>)
 8011e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e06:	f7ee fa41 	bl	800028c <__adddf3>
 8011e0a:	f04f 35ff 	mov.w	r5, #4294967295
 8011e0e:	e9c4 8900 	strd	r8, r9, [r4]
 8011e12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011e16:	e7c4      	b.n	8011da2 <__ieee754_rem_pio2+0x7a>
 8011e18:	a381      	add	r3, pc, #516	@ (adr r3, 8012020 <__ieee754_rem_pio2+0x2f8>)
 8011e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e1e:	f7ee fa35 	bl	800028c <__adddf3>
 8011e22:	a381      	add	r3, pc, #516	@ (adr r3, 8012028 <__ieee754_rem_pio2+0x300>)
 8011e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e28:	4606      	mov	r6, r0
 8011e2a:	460f      	mov	r7, r1
 8011e2c:	f7ee fa2e 	bl	800028c <__adddf3>
 8011e30:	4602      	mov	r2, r0
 8011e32:	460b      	mov	r3, r1
 8011e34:	4680      	mov	r8, r0
 8011e36:	4689      	mov	r9, r1
 8011e38:	4630      	mov	r0, r6
 8011e3a:	4639      	mov	r1, r7
 8011e3c:	f7ee fa24 	bl	8000288 <__aeabi_dsub>
 8011e40:	a379      	add	r3, pc, #484	@ (adr r3, 8012028 <__ieee754_rem_pio2+0x300>)
 8011e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e46:	e7de      	b.n	8011e06 <__ieee754_rem_pio2+0xde>
 8011e48:	4b82      	ldr	r3, [pc, #520]	@ (8012054 <__ieee754_rem_pio2+0x32c>)
 8011e4a:	4598      	cmp	r8, r3
 8011e4c:	f200 80d1 	bhi.w	8011ff2 <__ieee754_rem_pio2+0x2ca>
 8011e50:	f000 f966 	bl	8012120 <fabs>
 8011e54:	ec57 6b10 	vmov	r6, r7, d0
 8011e58:	a375      	add	r3, pc, #468	@ (adr r3, 8012030 <__ieee754_rem_pio2+0x308>)
 8011e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e5e:	4630      	mov	r0, r6
 8011e60:	4639      	mov	r1, r7
 8011e62:	f7ee fbc9 	bl	80005f8 <__aeabi_dmul>
 8011e66:	4b7c      	ldr	r3, [pc, #496]	@ (8012058 <__ieee754_rem_pio2+0x330>)
 8011e68:	2200      	movs	r2, #0
 8011e6a:	f7ee fa0f 	bl	800028c <__adddf3>
 8011e6e:	f7ee fe73 	bl	8000b58 <__aeabi_d2iz>
 8011e72:	4605      	mov	r5, r0
 8011e74:	f7ee fb56 	bl	8000524 <__aeabi_i2d>
 8011e78:	4602      	mov	r2, r0
 8011e7a:	460b      	mov	r3, r1
 8011e7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011e80:	a363      	add	r3, pc, #396	@ (adr r3, 8012010 <__ieee754_rem_pio2+0x2e8>)
 8011e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e86:	f7ee fbb7 	bl	80005f8 <__aeabi_dmul>
 8011e8a:	4602      	mov	r2, r0
 8011e8c:	460b      	mov	r3, r1
 8011e8e:	4630      	mov	r0, r6
 8011e90:	4639      	mov	r1, r7
 8011e92:	f7ee f9f9 	bl	8000288 <__aeabi_dsub>
 8011e96:	a360      	add	r3, pc, #384	@ (adr r3, 8012018 <__ieee754_rem_pio2+0x2f0>)
 8011e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9c:	4682      	mov	sl, r0
 8011e9e:	468b      	mov	fp, r1
 8011ea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ea4:	f7ee fba8 	bl	80005f8 <__aeabi_dmul>
 8011ea8:	2d1f      	cmp	r5, #31
 8011eaa:	4606      	mov	r6, r0
 8011eac:	460f      	mov	r7, r1
 8011eae:	dc0c      	bgt.n	8011eca <__ieee754_rem_pio2+0x1a2>
 8011eb0:	4b6a      	ldr	r3, [pc, #424]	@ (801205c <__ieee754_rem_pio2+0x334>)
 8011eb2:	1e6a      	subs	r2, r5, #1
 8011eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011eb8:	4543      	cmp	r3, r8
 8011eba:	d006      	beq.n	8011eca <__ieee754_rem_pio2+0x1a2>
 8011ebc:	4632      	mov	r2, r6
 8011ebe:	463b      	mov	r3, r7
 8011ec0:	4650      	mov	r0, sl
 8011ec2:	4659      	mov	r1, fp
 8011ec4:	f7ee f9e0 	bl	8000288 <__aeabi_dsub>
 8011ec8:	e00e      	b.n	8011ee8 <__ieee754_rem_pio2+0x1c0>
 8011eca:	463b      	mov	r3, r7
 8011ecc:	4632      	mov	r2, r6
 8011ece:	4650      	mov	r0, sl
 8011ed0:	4659      	mov	r1, fp
 8011ed2:	f7ee f9d9 	bl	8000288 <__aeabi_dsub>
 8011ed6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011eda:	9305      	str	r3, [sp, #20]
 8011edc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011ee0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8011ee4:	2b10      	cmp	r3, #16
 8011ee6:	dc02      	bgt.n	8011eee <__ieee754_rem_pio2+0x1c6>
 8011ee8:	e9c4 0100 	strd	r0, r1, [r4]
 8011eec:	e039      	b.n	8011f62 <__ieee754_rem_pio2+0x23a>
 8011eee:	a34c      	add	r3, pc, #304	@ (adr r3, 8012020 <__ieee754_rem_pio2+0x2f8>)
 8011ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ef8:	f7ee fb7e 	bl	80005f8 <__aeabi_dmul>
 8011efc:	4606      	mov	r6, r0
 8011efe:	460f      	mov	r7, r1
 8011f00:	4602      	mov	r2, r0
 8011f02:	460b      	mov	r3, r1
 8011f04:	4650      	mov	r0, sl
 8011f06:	4659      	mov	r1, fp
 8011f08:	f7ee f9be 	bl	8000288 <__aeabi_dsub>
 8011f0c:	4602      	mov	r2, r0
 8011f0e:	460b      	mov	r3, r1
 8011f10:	4680      	mov	r8, r0
 8011f12:	4689      	mov	r9, r1
 8011f14:	4650      	mov	r0, sl
 8011f16:	4659      	mov	r1, fp
 8011f18:	f7ee f9b6 	bl	8000288 <__aeabi_dsub>
 8011f1c:	4632      	mov	r2, r6
 8011f1e:	463b      	mov	r3, r7
 8011f20:	f7ee f9b2 	bl	8000288 <__aeabi_dsub>
 8011f24:	a340      	add	r3, pc, #256	@ (adr r3, 8012028 <__ieee754_rem_pio2+0x300>)
 8011f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2a:	4606      	mov	r6, r0
 8011f2c:	460f      	mov	r7, r1
 8011f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f32:	f7ee fb61 	bl	80005f8 <__aeabi_dmul>
 8011f36:	4632      	mov	r2, r6
 8011f38:	463b      	mov	r3, r7
 8011f3a:	f7ee f9a5 	bl	8000288 <__aeabi_dsub>
 8011f3e:	4602      	mov	r2, r0
 8011f40:	460b      	mov	r3, r1
 8011f42:	4606      	mov	r6, r0
 8011f44:	460f      	mov	r7, r1
 8011f46:	4640      	mov	r0, r8
 8011f48:	4649      	mov	r1, r9
 8011f4a:	f7ee f99d 	bl	8000288 <__aeabi_dsub>
 8011f4e:	9a05      	ldr	r2, [sp, #20]
 8011f50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011f54:	1ad3      	subs	r3, r2, r3
 8011f56:	2b31      	cmp	r3, #49	@ 0x31
 8011f58:	dc20      	bgt.n	8011f9c <__ieee754_rem_pio2+0x274>
 8011f5a:	e9c4 0100 	strd	r0, r1, [r4]
 8011f5e:	46c2      	mov	sl, r8
 8011f60:	46cb      	mov	fp, r9
 8011f62:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011f66:	4650      	mov	r0, sl
 8011f68:	4642      	mov	r2, r8
 8011f6a:	464b      	mov	r3, r9
 8011f6c:	4659      	mov	r1, fp
 8011f6e:	f7ee f98b 	bl	8000288 <__aeabi_dsub>
 8011f72:	463b      	mov	r3, r7
 8011f74:	4632      	mov	r2, r6
 8011f76:	f7ee f987 	bl	8000288 <__aeabi_dsub>
 8011f7a:	9b04      	ldr	r3, [sp, #16]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011f82:	f6bf af0e 	bge.w	8011da2 <__ieee754_rem_pio2+0x7a>
 8011f86:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8011f8a:	6063      	str	r3, [r4, #4]
 8011f8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011f90:	f8c4 8000 	str.w	r8, [r4]
 8011f94:	60a0      	str	r0, [r4, #8]
 8011f96:	60e3      	str	r3, [r4, #12]
 8011f98:	426d      	negs	r5, r5
 8011f9a:	e702      	b.n	8011da2 <__ieee754_rem_pio2+0x7a>
 8011f9c:	a326      	add	r3, pc, #152	@ (adr r3, 8012038 <__ieee754_rem_pio2+0x310>)
 8011f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fa6:	f7ee fb27 	bl	80005f8 <__aeabi_dmul>
 8011faa:	4606      	mov	r6, r0
 8011fac:	460f      	mov	r7, r1
 8011fae:	4602      	mov	r2, r0
 8011fb0:	460b      	mov	r3, r1
 8011fb2:	4640      	mov	r0, r8
 8011fb4:	4649      	mov	r1, r9
 8011fb6:	f7ee f967 	bl	8000288 <__aeabi_dsub>
 8011fba:	4602      	mov	r2, r0
 8011fbc:	460b      	mov	r3, r1
 8011fbe:	4682      	mov	sl, r0
 8011fc0:	468b      	mov	fp, r1
 8011fc2:	4640      	mov	r0, r8
 8011fc4:	4649      	mov	r1, r9
 8011fc6:	f7ee f95f 	bl	8000288 <__aeabi_dsub>
 8011fca:	4632      	mov	r2, r6
 8011fcc:	463b      	mov	r3, r7
 8011fce:	f7ee f95b 	bl	8000288 <__aeabi_dsub>
 8011fd2:	a31b      	add	r3, pc, #108	@ (adr r3, 8012040 <__ieee754_rem_pio2+0x318>)
 8011fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd8:	4606      	mov	r6, r0
 8011fda:	460f      	mov	r7, r1
 8011fdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fe0:	f7ee fb0a 	bl	80005f8 <__aeabi_dmul>
 8011fe4:	4632      	mov	r2, r6
 8011fe6:	463b      	mov	r3, r7
 8011fe8:	f7ee f94e 	bl	8000288 <__aeabi_dsub>
 8011fec:	4606      	mov	r6, r0
 8011fee:	460f      	mov	r7, r1
 8011ff0:	e764      	b.n	8011ebc <__ieee754_rem_pio2+0x194>
 8011ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8012060 <__ieee754_rem_pio2+0x338>)
 8011ff4:	4598      	cmp	r8, r3
 8011ff6:	d935      	bls.n	8012064 <__ieee754_rem_pio2+0x33c>
 8011ff8:	4632      	mov	r2, r6
 8011ffa:	463b      	mov	r3, r7
 8011ffc:	4630      	mov	r0, r6
 8011ffe:	4639      	mov	r1, r7
 8012000:	f7ee f942 	bl	8000288 <__aeabi_dsub>
 8012004:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012008:	e9c4 0100 	strd	r0, r1, [r4]
 801200c:	e69e      	b.n	8011d4c <__ieee754_rem_pio2+0x24>
 801200e:	bf00      	nop
 8012010:	54400000 	.word	0x54400000
 8012014:	3ff921fb 	.word	0x3ff921fb
 8012018:	1a626331 	.word	0x1a626331
 801201c:	3dd0b461 	.word	0x3dd0b461
 8012020:	1a600000 	.word	0x1a600000
 8012024:	3dd0b461 	.word	0x3dd0b461
 8012028:	2e037073 	.word	0x2e037073
 801202c:	3ba3198a 	.word	0x3ba3198a
 8012030:	6dc9c883 	.word	0x6dc9c883
 8012034:	3fe45f30 	.word	0x3fe45f30
 8012038:	2e000000 	.word	0x2e000000
 801203c:	3ba3198a 	.word	0x3ba3198a
 8012040:	252049c1 	.word	0x252049c1
 8012044:	397b839a 	.word	0x397b839a
 8012048:	3fe921fb 	.word	0x3fe921fb
 801204c:	4002d97b 	.word	0x4002d97b
 8012050:	3ff921fb 	.word	0x3ff921fb
 8012054:	413921fb 	.word	0x413921fb
 8012058:	3fe00000 	.word	0x3fe00000
 801205c:	08013000 	.word	0x08013000
 8012060:	7fefffff 	.word	0x7fefffff
 8012064:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012068:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801206c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012070:	4630      	mov	r0, r6
 8012072:	460f      	mov	r7, r1
 8012074:	f7ee fd70 	bl	8000b58 <__aeabi_d2iz>
 8012078:	f7ee fa54 	bl	8000524 <__aeabi_i2d>
 801207c:	4602      	mov	r2, r0
 801207e:	460b      	mov	r3, r1
 8012080:	4630      	mov	r0, r6
 8012082:	4639      	mov	r1, r7
 8012084:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012088:	f7ee f8fe 	bl	8000288 <__aeabi_dsub>
 801208c:	4b22      	ldr	r3, [pc, #136]	@ (8012118 <__ieee754_rem_pio2+0x3f0>)
 801208e:	2200      	movs	r2, #0
 8012090:	f7ee fab2 	bl	80005f8 <__aeabi_dmul>
 8012094:	460f      	mov	r7, r1
 8012096:	4606      	mov	r6, r0
 8012098:	f7ee fd5e 	bl	8000b58 <__aeabi_d2iz>
 801209c:	f7ee fa42 	bl	8000524 <__aeabi_i2d>
 80120a0:	4602      	mov	r2, r0
 80120a2:	460b      	mov	r3, r1
 80120a4:	4630      	mov	r0, r6
 80120a6:	4639      	mov	r1, r7
 80120a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80120ac:	f7ee f8ec 	bl	8000288 <__aeabi_dsub>
 80120b0:	4b19      	ldr	r3, [pc, #100]	@ (8012118 <__ieee754_rem_pio2+0x3f0>)
 80120b2:	2200      	movs	r2, #0
 80120b4:	f7ee faa0 	bl	80005f8 <__aeabi_dmul>
 80120b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80120bc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80120c0:	f04f 0803 	mov.w	r8, #3
 80120c4:	2600      	movs	r6, #0
 80120c6:	2700      	movs	r7, #0
 80120c8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80120cc:	4632      	mov	r2, r6
 80120ce:	463b      	mov	r3, r7
 80120d0:	46c2      	mov	sl, r8
 80120d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80120d6:	f7ee fcf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80120da:	2800      	cmp	r0, #0
 80120dc:	d1f4      	bne.n	80120c8 <__ieee754_rem_pio2+0x3a0>
 80120de:	4b0f      	ldr	r3, [pc, #60]	@ (801211c <__ieee754_rem_pio2+0x3f4>)
 80120e0:	9301      	str	r3, [sp, #4]
 80120e2:	2302      	movs	r3, #2
 80120e4:	9300      	str	r3, [sp, #0]
 80120e6:	462a      	mov	r2, r5
 80120e8:	4653      	mov	r3, sl
 80120ea:	4621      	mov	r1, r4
 80120ec:	a806      	add	r0, sp, #24
 80120ee:	f000 f81f 	bl	8012130 <__kernel_rem_pio2>
 80120f2:	9b04      	ldr	r3, [sp, #16]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	4605      	mov	r5, r0
 80120f8:	f6bf ae53 	bge.w	8011da2 <__ieee754_rem_pio2+0x7a>
 80120fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8012100:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012104:	e9c4 2300 	strd	r2, r3, [r4]
 8012108:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801210c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012110:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8012114:	e740      	b.n	8011f98 <__ieee754_rem_pio2+0x270>
 8012116:	bf00      	nop
 8012118:	41700000 	.word	0x41700000
 801211c:	08013080 	.word	0x08013080

08012120 <fabs>:
 8012120:	ec51 0b10 	vmov	r0, r1, d0
 8012124:	4602      	mov	r2, r0
 8012126:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801212a:	ec43 2b10 	vmov	d0, r2, r3
 801212e:	4770      	bx	lr

08012130 <__kernel_rem_pio2>:
 8012130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012134:	ed2d 8b02 	vpush	{d8}
 8012138:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801213c:	f112 0f14 	cmn.w	r2, #20
 8012140:	9306      	str	r3, [sp, #24]
 8012142:	9104      	str	r1, [sp, #16]
 8012144:	4bbe      	ldr	r3, [pc, #760]	@ (8012440 <__kernel_rem_pio2+0x310>)
 8012146:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8012148:	9008      	str	r0, [sp, #32]
 801214a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801214e:	9300      	str	r3, [sp, #0]
 8012150:	9b06      	ldr	r3, [sp, #24]
 8012152:	f103 33ff 	add.w	r3, r3, #4294967295
 8012156:	bfa8      	it	ge
 8012158:	1ed4      	subge	r4, r2, #3
 801215a:	9305      	str	r3, [sp, #20]
 801215c:	bfb2      	itee	lt
 801215e:	2400      	movlt	r4, #0
 8012160:	2318      	movge	r3, #24
 8012162:	fb94 f4f3 	sdivge	r4, r4, r3
 8012166:	f06f 0317 	mvn.w	r3, #23
 801216a:	fb04 3303 	mla	r3, r4, r3, r3
 801216e:	eb03 0b02 	add.w	fp, r3, r2
 8012172:	9b00      	ldr	r3, [sp, #0]
 8012174:	9a05      	ldr	r2, [sp, #20]
 8012176:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8012430 <__kernel_rem_pio2+0x300>
 801217a:	eb03 0802 	add.w	r8, r3, r2
 801217e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012180:	1aa7      	subs	r7, r4, r2
 8012182:	ae20      	add	r6, sp, #128	@ 0x80
 8012184:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012188:	2500      	movs	r5, #0
 801218a:	4545      	cmp	r5, r8
 801218c:	dd13      	ble.n	80121b6 <__kernel_rem_pio2+0x86>
 801218e:	9b06      	ldr	r3, [sp, #24]
 8012190:	aa20      	add	r2, sp, #128	@ 0x80
 8012192:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012196:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801219a:	f04f 0800 	mov.w	r8, #0
 801219e:	9b00      	ldr	r3, [sp, #0]
 80121a0:	4598      	cmp	r8, r3
 80121a2:	dc31      	bgt.n	8012208 <__kernel_rem_pio2+0xd8>
 80121a4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8012430 <__kernel_rem_pio2+0x300>
 80121a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80121ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80121b0:	462f      	mov	r7, r5
 80121b2:	2600      	movs	r6, #0
 80121b4:	e01b      	b.n	80121ee <__kernel_rem_pio2+0xbe>
 80121b6:	42ef      	cmn	r7, r5
 80121b8:	d407      	bmi.n	80121ca <__kernel_rem_pio2+0x9a>
 80121ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80121be:	f7ee f9b1 	bl	8000524 <__aeabi_i2d>
 80121c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80121c6:	3501      	adds	r5, #1
 80121c8:	e7df      	b.n	801218a <__kernel_rem_pio2+0x5a>
 80121ca:	ec51 0b18 	vmov	r0, r1, d8
 80121ce:	e7f8      	b.n	80121c2 <__kernel_rem_pio2+0x92>
 80121d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80121d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80121d8:	f7ee fa0e 	bl	80005f8 <__aeabi_dmul>
 80121dc:	4602      	mov	r2, r0
 80121de:	460b      	mov	r3, r1
 80121e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121e4:	f7ee f852 	bl	800028c <__adddf3>
 80121e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121ec:	3601      	adds	r6, #1
 80121ee:	9b05      	ldr	r3, [sp, #20]
 80121f0:	429e      	cmp	r6, r3
 80121f2:	f1a7 0708 	sub.w	r7, r7, #8
 80121f6:	ddeb      	ble.n	80121d0 <__kernel_rem_pio2+0xa0>
 80121f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80121fc:	f108 0801 	add.w	r8, r8, #1
 8012200:	ecaa 7b02 	vstmia	sl!, {d7}
 8012204:	3508      	adds	r5, #8
 8012206:	e7ca      	b.n	801219e <__kernel_rem_pio2+0x6e>
 8012208:	9b00      	ldr	r3, [sp, #0]
 801220a:	f8dd 8000 	ldr.w	r8, [sp]
 801220e:	aa0c      	add	r2, sp, #48	@ 0x30
 8012210:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012214:	930a      	str	r3, [sp, #40]	@ 0x28
 8012216:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012218:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801221c:	9309      	str	r3, [sp, #36]	@ 0x24
 801221e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8012222:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012224:	ab98      	add	r3, sp, #608	@ 0x260
 8012226:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801222a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801222e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012232:	ac0c      	add	r4, sp, #48	@ 0x30
 8012234:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012236:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801223a:	46a1      	mov	r9, r4
 801223c:	46c2      	mov	sl, r8
 801223e:	f1ba 0f00 	cmp.w	sl, #0
 8012242:	f1a5 0508 	sub.w	r5, r5, #8
 8012246:	dc77      	bgt.n	8012338 <__kernel_rem_pio2+0x208>
 8012248:	4658      	mov	r0, fp
 801224a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801224e:	f000 fac7 	bl	80127e0 <scalbn>
 8012252:	ec57 6b10 	vmov	r6, r7, d0
 8012256:	2200      	movs	r2, #0
 8012258:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801225c:	4630      	mov	r0, r6
 801225e:	4639      	mov	r1, r7
 8012260:	f7ee f9ca 	bl	80005f8 <__aeabi_dmul>
 8012264:	ec41 0b10 	vmov	d0, r0, r1
 8012268:	f000 fb3a 	bl	80128e0 <floor>
 801226c:	4b75      	ldr	r3, [pc, #468]	@ (8012444 <__kernel_rem_pio2+0x314>)
 801226e:	ec51 0b10 	vmov	r0, r1, d0
 8012272:	2200      	movs	r2, #0
 8012274:	f7ee f9c0 	bl	80005f8 <__aeabi_dmul>
 8012278:	4602      	mov	r2, r0
 801227a:	460b      	mov	r3, r1
 801227c:	4630      	mov	r0, r6
 801227e:	4639      	mov	r1, r7
 8012280:	f7ee f802 	bl	8000288 <__aeabi_dsub>
 8012284:	460f      	mov	r7, r1
 8012286:	4606      	mov	r6, r0
 8012288:	f7ee fc66 	bl	8000b58 <__aeabi_d2iz>
 801228c:	9002      	str	r0, [sp, #8]
 801228e:	f7ee f949 	bl	8000524 <__aeabi_i2d>
 8012292:	4602      	mov	r2, r0
 8012294:	460b      	mov	r3, r1
 8012296:	4630      	mov	r0, r6
 8012298:	4639      	mov	r1, r7
 801229a:	f7ed fff5 	bl	8000288 <__aeabi_dsub>
 801229e:	f1bb 0f00 	cmp.w	fp, #0
 80122a2:	4606      	mov	r6, r0
 80122a4:	460f      	mov	r7, r1
 80122a6:	dd6c      	ble.n	8012382 <__kernel_rem_pio2+0x252>
 80122a8:	f108 31ff 	add.w	r1, r8, #4294967295
 80122ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80122ae:	9d02      	ldr	r5, [sp, #8]
 80122b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80122b4:	f1cb 0018 	rsb	r0, fp, #24
 80122b8:	fa43 f200 	asr.w	r2, r3, r0
 80122bc:	4415      	add	r5, r2
 80122be:	4082      	lsls	r2, r0
 80122c0:	1a9b      	subs	r3, r3, r2
 80122c2:	aa0c      	add	r2, sp, #48	@ 0x30
 80122c4:	9502      	str	r5, [sp, #8]
 80122c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80122ca:	f1cb 0217 	rsb	r2, fp, #23
 80122ce:	fa43 f902 	asr.w	r9, r3, r2
 80122d2:	f1b9 0f00 	cmp.w	r9, #0
 80122d6:	dd64      	ble.n	80123a2 <__kernel_rem_pio2+0x272>
 80122d8:	9b02      	ldr	r3, [sp, #8]
 80122da:	2200      	movs	r2, #0
 80122dc:	3301      	adds	r3, #1
 80122de:	9302      	str	r3, [sp, #8]
 80122e0:	4615      	mov	r5, r2
 80122e2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80122e6:	4590      	cmp	r8, r2
 80122e8:	f300 80b8 	bgt.w	801245c <__kernel_rem_pio2+0x32c>
 80122ec:	f1bb 0f00 	cmp.w	fp, #0
 80122f0:	dd07      	ble.n	8012302 <__kernel_rem_pio2+0x1d2>
 80122f2:	f1bb 0f01 	cmp.w	fp, #1
 80122f6:	f000 80bf 	beq.w	8012478 <__kernel_rem_pio2+0x348>
 80122fa:	f1bb 0f02 	cmp.w	fp, #2
 80122fe:	f000 80c6 	beq.w	801248e <__kernel_rem_pio2+0x35e>
 8012302:	f1b9 0f02 	cmp.w	r9, #2
 8012306:	d14c      	bne.n	80123a2 <__kernel_rem_pio2+0x272>
 8012308:	4632      	mov	r2, r6
 801230a:	463b      	mov	r3, r7
 801230c:	494e      	ldr	r1, [pc, #312]	@ (8012448 <__kernel_rem_pio2+0x318>)
 801230e:	2000      	movs	r0, #0
 8012310:	f7ed ffba 	bl	8000288 <__aeabi_dsub>
 8012314:	4606      	mov	r6, r0
 8012316:	460f      	mov	r7, r1
 8012318:	2d00      	cmp	r5, #0
 801231a:	d042      	beq.n	80123a2 <__kernel_rem_pio2+0x272>
 801231c:	4658      	mov	r0, fp
 801231e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8012438 <__kernel_rem_pio2+0x308>
 8012322:	f000 fa5d 	bl	80127e0 <scalbn>
 8012326:	4630      	mov	r0, r6
 8012328:	4639      	mov	r1, r7
 801232a:	ec53 2b10 	vmov	r2, r3, d0
 801232e:	f7ed ffab 	bl	8000288 <__aeabi_dsub>
 8012332:	4606      	mov	r6, r0
 8012334:	460f      	mov	r7, r1
 8012336:	e034      	b.n	80123a2 <__kernel_rem_pio2+0x272>
 8012338:	4b44      	ldr	r3, [pc, #272]	@ (801244c <__kernel_rem_pio2+0x31c>)
 801233a:	2200      	movs	r2, #0
 801233c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012340:	f7ee f95a 	bl	80005f8 <__aeabi_dmul>
 8012344:	f7ee fc08 	bl	8000b58 <__aeabi_d2iz>
 8012348:	f7ee f8ec 	bl	8000524 <__aeabi_i2d>
 801234c:	4b40      	ldr	r3, [pc, #256]	@ (8012450 <__kernel_rem_pio2+0x320>)
 801234e:	2200      	movs	r2, #0
 8012350:	4606      	mov	r6, r0
 8012352:	460f      	mov	r7, r1
 8012354:	f7ee f950 	bl	80005f8 <__aeabi_dmul>
 8012358:	4602      	mov	r2, r0
 801235a:	460b      	mov	r3, r1
 801235c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012360:	f7ed ff92 	bl	8000288 <__aeabi_dsub>
 8012364:	f7ee fbf8 	bl	8000b58 <__aeabi_d2iz>
 8012368:	e9d5 2300 	ldrd	r2, r3, [r5]
 801236c:	f849 0b04 	str.w	r0, [r9], #4
 8012370:	4639      	mov	r1, r7
 8012372:	4630      	mov	r0, r6
 8012374:	f7ed ff8a 	bl	800028c <__adddf3>
 8012378:	f10a 3aff 	add.w	sl, sl, #4294967295
 801237c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012380:	e75d      	b.n	801223e <__kernel_rem_pio2+0x10e>
 8012382:	d107      	bne.n	8012394 <__kernel_rem_pio2+0x264>
 8012384:	f108 33ff 	add.w	r3, r8, #4294967295
 8012388:	aa0c      	add	r2, sp, #48	@ 0x30
 801238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801238e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8012392:	e79e      	b.n	80122d2 <__kernel_rem_pio2+0x1a2>
 8012394:	4b2f      	ldr	r3, [pc, #188]	@ (8012454 <__kernel_rem_pio2+0x324>)
 8012396:	2200      	movs	r2, #0
 8012398:	f7ee fbb4 	bl	8000b04 <__aeabi_dcmpge>
 801239c:	2800      	cmp	r0, #0
 801239e:	d143      	bne.n	8012428 <__kernel_rem_pio2+0x2f8>
 80123a0:	4681      	mov	r9, r0
 80123a2:	2200      	movs	r2, #0
 80123a4:	2300      	movs	r3, #0
 80123a6:	4630      	mov	r0, r6
 80123a8:	4639      	mov	r1, r7
 80123aa:	f7ee fb8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80123ae:	2800      	cmp	r0, #0
 80123b0:	f000 80bf 	beq.w	8012532 <__kernel_rem_pio2+0x402>
 80123b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80123b8:	2200      	movs	r2, #0
 80123ba:	9900      	ldr	r1, [sp, #0]
 80123bc:	428b      	cmp	r3, r1
 80123be:	da6e      	bge.n	801249e <__kernel_rem_pio2+0x36e>
 80123c0:	2a00      	cmp	r2, #0
 80123c2:	f000 8089 	beq.w	80124d8 <__kernel_rem_pio2+0x3a8>
 80123c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80123ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80123cc:	f1ab 0b18 	sub.w	fp, fp, #24
 80123d0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d0f6      	beq.n	80123c6 <__kernel_rem_pio2+0x296>
 80123d8:	4658      	mov	r0, fp
 80123da:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8012438 <__kernel_rem_pio2+0x308>
 80123de:	f000 f9ff 	bl	80127e0 <scalbn>
 80123e2:	f108 0301 	add.w	r3, r8, #1
 80123e6:	00da      	lsls	r2, r3, #3
 80123e8:	9205      	str	r2, [sp, #20]
 80123ea:	ec55 4b10 	vmov	r4, r5, d0
 80123ee:	aa70      	add	r2, sp, #448	@ 0x1c0
 80123f0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801244c <__kernel_rem_pio2+0x31c>
 80123f4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80123f8:	4646      	mov	r6, r8
 80123fa:	f04f 0a00 	mov.w	sl, #0
 80123fe:	2e00      	cmp	r6, #0
 8012400:	f280 80cf 	bge.w	80125a2 <__kernel_rem_pio2+0x472>
 8012404:	4644      	mov	r4, r8
 8012406:	2c00      	cmp	r4, #0
 8012408:	f2c0 80fd 	blt.w	8012606 <__kernel_rem_pio2+0x4d6>
 801240c:	4b12      	ldr	r3, [pc, #72]	@ (8012458 <__kernel_rem_pio2+0x328>)
 801240e:	461f      	mov	r7, r3
 8012410:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012412:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012416:	9306      	str	r3, [sp, #24]
 8012418:	f04f 0a00 	mov.w	sl, #0
 801241c:	f04f 0b00 	mov.w	fp, #0
 8012420:	2600      	movs	r6, #0
 8012422:	eba8 0504 	sub.w	r5, r8, r4
 8012426:	e0e2      	b.n	80125ee <__kernel_rem_pio2+0x4be>
 8012428:	f04f 0902 	mov.w	r9, #2
 801242c:	e754      	b.n	80122d8 <__kernel_rem_pio2+0x1a8>
 801242e:	bf00      	nop
	...
 801243c:	3ff00000 	.word	0x3ff00000
 8012440:	080131c8 	.word	0x080131c8
 8012444:	40200000 	.word	0x40200000
 8012448:	3ff00000 	.word	0x3ff00000
 801244c:	3e700000 	.word	0x3e700000
 8012450:	41700000 	.word	0x41700000
 8012454:	3fe00000 	.word	0x3fe00000
 8012458:	08013188 	.word	0x08013188
 801245c:	f854 3b04 	ldr.w	r3, [r4], #4
 8012460:	b945      	cbnz	r5, 8012474 <__kernel_rem_pio2+0x344>
 8012462:	b123      	cbz	r3, 801246e <__kernel_rem_pio2+0x33e>
 8012464:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8012468:	f844 3c04 	str.w	r3, [r4, #-4]
 801246c:	2301      	movs	r3, #1
 801246e:	3201      	adds	r2, #1
 8012470:	461d      	mov	r5, r3
 8012472:	e738      	b.n	80122e6 <__kernel_rem_pio2+0x1b6>
 8012474:	1acb      	subs	r3, r1, r3
 8012476:	e7f7      	b.n	8012468 <__kernel_rem_pio2+0x338>
 8012478:	f108 32ff 	add.w	r2, r8, #4294967295
 801247c:	ab0c      	add	r3, sp, #48	@ 0x30
 801247e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012482:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012486:	a90c      	add	r1, sp, #48	@ 0x30
 8012488:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801248c:	e739      	b.n	8012302 <__kernel_rem_pio2+0x1d2>
 801248e:	f108 32ff 	add.w	r2, r8, #4294967295
 8012492:	ab0c      	add	r3, sp, #48	@ 0x30
 8012494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012498:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801249c:	e7f3      	b.n	8012486 <__kernel_rem_pio2+0x356>
 801249e:	a90c      	add	r1, sp, #48	@ 0x30
 80124a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80124a4:	3b01      	subs	r3, #1
 80124a6:	430a      	orrs	r2, r1
 80124a8:	e787      	b.n	80123ba <__kernel_rem_pio2+0x28a>
 80124aa:	3401      	adds	r4, #1
 80124ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80124b0:	2a00      	cmp	r2, #0
 80124b2:	d0fa      	beq.n	80124aa <__kernel_rem_pio2+0x37a>
 80124b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80124ba:	eb0d 0503 	add.w	r5, sp, r3
 80124be:	9b06      	ldr	r3, [sp, #24]
 80124c0:	aa20      	add	r2, sp, #128	@ 0x80
 80124c2:	4443      	add	r3, r8
 80124c4:	f108 0701 	add.w	r7, r8, #1
 80124c8:	3d98      	subs	r5, #152	@ 0x98
 80124ca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80124ce:	4444      	add	r4, r8
 80124d0:	42bc      	cmp	r4, r7
 80124d2:	da04      	bge.n	80124de <__kernel_rem_pio2+0x3ae>
 80124d4:	46a0      	mov	r8, r4
 80124d6:	e6a2      	b.n	801221e <__kernel_rem_pio2+0xee>
 80124d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124da:	2401      	movs	r4, #1
 80124dc:	e7e6      	b.n	80124ac <__kernel_rem_pio2+0x37c>
 80124de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124e0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80124e4:	f7ee f81e 	bl	8000524 <__aeabi_i2d>
 80124e8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80127b0 <__kernel_rem_pio2+0x680>
 80124ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80124f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80124f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80124f8:	46b2      	mov	sl, r6
 80124fa:	f04f 0800 	mov.w	r8, #0
 80124fe:	9b05      	ldr	r3, [sp, #20]
 8012500:	4598      	cmp	r8, r3
 8012502:	dd05      	ble.n	8012510 <__kernel_rem_pio2+0x3e0>
 8012504:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012508:	3701      	adds	r7, #1
 801250a:	eca5 7b02 	vstmia	r5!, {d7}
 801250e:	e7df      	b.n	80124d0 <__kernel_rem_pio2+0x3a0>
 8012510:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8012514:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012518:	f7ee f86e 	bl	80005f8 <__aeabi_dmul>
 801251c:	4602      	mov	r2, r0
 801251e:	460b      	mov	r3, r1
 8012520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012524:	f7ed feb2 	bl	800028c <__adddf3>
 8012528:	f108 0801 	add.w	r8, r8, #1
 801252c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012530:	e7e5      	b.n	80124fe <__kernel_rem_pio2+0x3ce>
 8012532:	f1cb 0000 	rsb	r0, fp, #0
 8012536:	ec47 6b10 	vmov	d0, r6, r7
 801253a:	f000 f951 	bl	80127e0 <scalbn>
 801253e:	ec55 4b10 	vmov	r4, r5, d0
 8012542:	4b9d      	ldr	r3, [pc, #628]	@ (80127b8 <__kernel_rem_pio2+0x688>)
 8012544:	2200      	movs	r2, #0
 8012546:	4620      	mov	r0, r4
 8012548:	4629      	mov	r1, r5
 801254a:	f7ee fadb 	bl	8000b04 <__aeabi_dcmpge>
 801254e:	b300      	cbz	r0, 8012592 <__kernel_rem_pio2+0x462>
 8012550:	4b9a      	ldr	r3, [pc, #616]	@ (80127bc <__kernel_rem_pio2+0x68c>)
 8012552:	2200      	movs	r2, #0
 8012554:	4620      	mov	r0, r4
 8012556:	4629      	mov	r1, r5
 8012558:	f7ee f84e 	bl	80005f8 <__aeabi_dmul>
 801255c:	f7ee fafc 	bl	8000b58 <__aeabi_d2iz>
 8012560:	4606      	mov	r6, r0
 8012562:	f7ed ffdf 	bl	8000524 <__aeabi_i2d>
 8012566:	4b94      	ldr	r3, [pc, #592]	@ (80127b8 <__kernel_rem_pio2+0x688>)
 8012568:	2200      	movs	r2, #0
 801256a:	f7ee f845 	bl	80005f8 <__aeabi_dmul>
 801256e:	460b      	mov	r3, r1
 8012570:	4602      	mov	r2, r0
 8012572:	4629      	mov	r1, r5
 8012574:	4620      	mov	r0, r4
 8012576:	f7ed fe87 	bl	8000288 <__aeabi_dsub>
 801257a:	f7ee faed 	bl	8000b58 <__aeabi_d2iz>
 801257e:	ab0c      	add	r3, sp, #48	@ 0x30
 8012580:	f10b 0b18 	add.w	fp, fp, #24
 8012584:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8012588:	f108 0801 	add.w	r8, r8, #1
 801258c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8012590:	e722      	b.n	80123d8 <__kernel_rem_pio2+0x2a8>
 8012592:	4620      	mov	r0, r4
 8012594:	4629      	mov	r1, r5
 8012596:	f7ee fadf 	bl	8000b58 <__aeabi_d2iz>
 801259a:	ab0c      	add	r3, sp, #48	@ 0x30
 801259c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80125a0:	e71a      	b.n	80123d8 <__kernel_rem_pio2+0x2a8>
 80125a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80125a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80125a8:	f7ed ffbc 	bl	8000524 <__aeabi_i2d>
 80125ac:	4622      	mov	r2, r4
 80125ae:	462b      	mov	r3, r5
 80125b0:	f7ee f822 	bl	80005f8 <__aeabi_dmul>
 80125b4:	4652      	mov	r2, sl
 80125b6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80125ba:	465b      	mov	r3, fp
 80125bc:	4620      	mov	r0, r4
 80125be:	4629      	mov	r1, r5
 80125c0:	f7ee f81a 	bl	80005f8 <__aeabi_dmul>
 80125c4:	3e01      	subs	r6, #1
 80125c6:	4604      	mov	r4, r0
 80125c8:	460d      	mov	r5, r1
 80125ca:	e718      	b.n	80123fe <__kernel_rem_pio2+0x2ce>
 80125cc:	9906      	ldr	r1, [sp, #24]
 80125ce:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80125d2:	9106      	str	r1, [sp, #24]
 80125d4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80125d8:	f7ee f80e 	bl	80005f8 <__aeabi_dmul>
 80125dc:	4602      	mov	r2, r0
 80125de:	460b      	mov	r3, r1
 80125e0:	4650      	mov	r0, sl
 80125e2:	4659      	mov	r1, fp
 80125e4:	f7ed fe52 	bl	800028c <__adddf3>
 80125e8:	3601      	adds	r6, #1
 80125ea:	4682      	mov	sl, r0
 80125ec:	468b      	mov	fp, r1
 80125ee:	9b00      	ldr	r3, [sp, #0]
 80125f0:	429e      	cmp	r6, r3
 80125f2:	dc01      	bgt.n	80125f8 <__kernel_rem_pio2+0x4c8>
 80125f4:	42b5      	cmp	r5, r6
 80125f6:	dae9      	bge.n	80125cc <__kernel_rem_pio2+0x49c>
 80125f8:	ab48      	add	r3, sp, #288	@ 0x120
 80125fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80125fe:	e9c5 ab00 	strd	sl, fp, [r5]
 8012602:	3c01      	subs	r4, #1
 8012604:	e6ff      	b.n	8012406 <__kernel_rem_pio2+0x2d6>
 8012606:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8012608:	2b02      	cmp	r3, #2
 801260a:	dc0b      	bgt.n	8012624 <__kernel_rem_pio2+0x4f4>
 801260c:	2b00      	cmp	r3, #0
 801260e:	dc39      	bgt.n	8012684 <__kernel_rem_pio2+0x554>
 8012610:	d05d      	beq.n	80126ce <__kernel_rem_pio2+0x59e>
 8012612:	9b02      	ldr	r3, [sp, #8]
 8012614:	f003 0007 	and.w	r0, r3, #7
 8012618:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801261c:	ecbd 8b02 	vpop	{d8}
 8012620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012624:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8012626:	2b03      	cmp	r3, #3
 8012628:	d1f3      	bne.n	8012612 <__kernel_rem_pio2+0x4e2>
 801262a:	9b05      	ldr	r3, [sp, #20]
 801262c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012630:	eb0d 0403 	add.w	r4, sp, r3
 8012634:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8012638:	4625      	mov	r5, r4
 801263a:	46c2      	mov	sl, r8
 801263c:	f1ba 0f00 	cmp.w	sl, #0
 8012640:	f1a5 0508 	sub.w	r5, r5, #8
 8012644:	dc6b      	bgt.n	801271e <__kernel_rem_pio2+0x5ee>
 8012646:	4645      	mov	r5, r8
 8012648:	2d01      	cmp	r5, #1
 801264a:	f1a4 0408 	sub.w	r4, r4, #8
 801264e:	f300 8087 	bgt.w	8012760 <__kernel_rem_pio2+0x630>
 8012652:	9c05      	ldr	r4, [sp, #20]
 8012654:	ab48      	add	r3, sp, #288	@ 0x120
 8012656:	441c      	add	r4, r3
 8012658:	2000      	movs	r0, #0
 801265a:	2100      	movs	r1, #0
 801265c:	f1b8 0f01 	cmp.w	r8, #1
 8012660:	f300 809c 	bgt.w	801279c <__kernel_rem_pio2+0x66c>
 8012664:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8012668:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801266c:	f1b9 0f00 	cmp.w	r9, #0
 8012670:	f040 80a6 	bne.w	80127c0 <__kernel_rem_pio2+0x690>
 8012674:	9b04      	ldr	r3, [sp, #16]
 8012676:	e9c3 7800 	strd	r7, r8, [r3]
 801267a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801267e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012682:	e7c6      	b.n	8012612 <__kernel_rem_pio2+0x4e2>
 8012684:	9d05      	ldr	r5, [sp, #20]
 8012686:	ab48      	add	r3, sp, #288	@ 0x120
 8012688:	441d      	add	r5, r3
 801268a:	4644      	mov	r4, r8
 801268c:	2000      	movs	r0, #0
 801268e:	2100      	movs	r1, #0
 8012690:	2c00      	cmp	r4, #0
 8012692:	da35      	bge.n	8012700 <__kernel_rem_pio2+0x5d0>
 8012694:	f1b9 0f00 	cmp.w	r9, #0
 8012698:	d038      	beq.n	801270c <__kernel_rem_pio2+0x5dc>
 801269a:	4602      	mov	r2, r0
 801269c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80126a0:	9c04      	ldr	r4, [sp, #16]
 80126a2:	e9c4 2300 	strd	r2, r3, [r4]
 80126a6:	4602      	mov	r2, r0
 80126a8:	460b      	mov	r3, r1
 80126aa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80126ae:	f7ed fdeb 	bl	8000288 <__aeabi_dsub>
 80126b2:	ad4a      	add	r5, sp, #296	@ 0x128
 80126b4:	2401      	movs	r4, #1
 80126b6:	45a0      	cmp	r8, r4
 80126b8:	da2b      	bge.n	8012712 <__kernel_rem_pio2+0x5e2>
 80126ba:	f1b9 0f00 	cmp.w	r9, #0
 80126be:	d002      	beq.n	80126c6 <__kernel_rem_pio2+0x596>
 80126c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80126c4:	4619      	mov	r1, r3
 80126c6:	9b04      	ldr	r3, [sp, #16]
 80126c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80126cc:	e7a1      	b.n	8012612 <__kernel_rem_pio2+0x4e2>
 80126ce:	9c05      	ldr	r4, [sp, #20]
 80126d0:	ab48      	add	r3, sp, #288	@ 0x120
 80126d2:	441c      	add	r4, r3
 80126d4:	2000      	movs	r0, #0
 80126d6:	2100      	movs	r1, #0
 80126d8:	f1b8 0f00 	cmp.w	r8, #0
 80126dc:	da09      	bge.n	80126f2 <__kernel_rem_pio2+0x5c2>
 80126de:	f1b9 0f00 	cmp.w	r9, #0
 80126e2:	d002      	beq.n	80126ea <__kernel_rem_pio2+0x5ba>
 80126e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80126e8:	4619      	mov	r1, r3
 80126ea:	9b04      	ldr	r3, [sp, #16]
 80126ec:	e9c3 0100 	strd	r0, r1, [r3]
 80126f0:	e78f      	b.n	8012612 <__kernel_rem_pio2+0x4e2>
 80126f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80126f6:	f7ed fdc9 	bl	800028c <__adddf3>
 80126fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80126fe:	e7eb      	b.n	80126d8 <__kernel_rem_pio2+0x5a8>
 8012700:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8012704:	f7ed fdc2 	bl	800028c <__adddf3>
 8012708:	3c01      	subs	r4, #1
 801270a:	e7c1      	b.n	8012690 <__kernel_rem_pio2+0x560>
 801270c:	4602      	mov	r2, r0
 801270e:	460b      	mov	r3, r1
 8012710:	e7c6      	b.n	80126a0 <__kernel_rem_pio2+0x570>
 8012712:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8012716:	f7ed fdb9 	bl	800028c <__adddf3>
 801271a:	3401      	adds	r4, #1
 801271c:	e7cb      	b.n	80126b6 <__kernel_rem_pio2+0x586>
 801271e:	ed95 7b00 	vldr	d7, [r5]
 8012722:	ed8d 7b00 	vstr	d7, [sp]
 8012726:	ed95 7b02 	vldr	d7, [r5, #8]
 801272a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801272e:	ec53 2b17 	vmov	r2, r3, d7
 8012732:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012736:	f7ed fda9 	bl	800028c <__adddf3>
 801273a:	4602      	mov	r2, r0
 801273c:	460b      	mov	r3, r1
 801273e:	4606      	mov	r6, r0
 8012740:	460f      	mov	r7, r1
 8012742:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012746:	f7ed fd9f 	bl	8000288 <__aeabi_dsub>
 801274a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801274e:	f7ed fd9d 	bl	800028c <__adddf3>
 8012752:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012756:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801275a:	e9c5 6700 	strd	r6, r7, [r5]
 801275e:	e76d      	b.n	801263c <__kernel_rem_pio2+0x50c>
 8012760:	ed94 7b00 	vldr	d7, [r4]
 8012764:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8012768:	ec51 0b17 	vmov	r0, r1, d7
 801276c:	4652      	mov	r2, sl
 801276e:	465b      	mov	r3, fp
 8012770:	ed8d 7b00 	vstr	d7, [sp]
 8012774:	f7ed fd8a 	bl	800028c <__adddf3>
 8012778:	4602      	mov	r2, r0
 801277a:	460b      	mov	r3, r1
 801277c:	4606      	mov	r6, r0
 801277e:	460f      	mov	r7, r1
 8012780:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012784:	f7ed fd80 	bl	8000288 <__aeabi_dsub>
 8012788:	4652      	mov	r2, sl
 801278a:	465b      	mov	r3, fp
 801278c:	f7ed fd7e 	bl	800028c <__adddf3>
 8012790:	3d01      	subs	r5, #1
 8012792:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012796:	e9c4 6700 	strd	r6, r7, [r4]
 801279a:	e755      	b.n	8012648 <__kernel_rem_pio2+0x518>
 801279c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80127a0:	f7ed fd74 	bl	800028c <__adddf3>
 80127a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80127a8:	e758      	b.n	801265c <__kernel_rem_pio2+0x52c>
 80127aa:	bf00      	nop
 80127ac:	f3af 8000 	nop.w
	...
 80127b8:	41700000 	.word	0x41700000
 80127bc:	3e700000 	.word	0x3e700000
 80127c0:	9b04      	ldr	r3, [sp, #16]
 80127c2:	9a04      	ldr	r2, [sp, #16]
 80127c4:	601f      	str	r7, [r3, #0]
 80127c6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80127ca:	605c      	str	r4, [r3, #4]
 80127cc:	609d      	str	r5, [r3, #8]
 80127ce:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80127d2:	60d3      	str	r3, [r2, #12]
 80127d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80127d8:	6110      	str	r0, [r2, #16]
 80127da:	6153      	str	r3, [r2, #20]
 80127dc:	e719      	b.n	8012612 <__kernel_rem_pio2+0x4e2>
 80127de:	bf00      	nop

080127e0 <scalbn>:
 80127e0:	b570      	push	{r4, r5, r6, lr}
 80127e2:	ec55 4b10 	vmov	r4, r5, d0
 80127e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80127ea:	4606      	mov	r6, r0
 80127ec:	462b      	mov	r3, r5
 80127ee:	b991      	cbnz	r1, 8012816 <scalbn+0x36>
 80127f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80127f4:	4323      	orrs	r3, r4
 80127f6:	d03d      	beq.n	8012874 <scalbn+0x94>
 80127f8:	4b35      	ldr	r3, [pc, #212]	@ (80128d0 <scalbn+0xf0>)
 80127fa:	4620      	mov	r0, r4
 80127fc:	4629      	mov	r1, r5
 80127fe:	2200      	movs	r2, #0
 8012800:	f7ed fefa 	bl	80005f8 <__aeabi_dmul>
 8012804:	4b33      	ldr	r3, [pc, #204]	@ (80128d4 <scalbn+0xf4>)
 8012806:	429e      	cmp	r6, r3
 8012808:	4604      	mov	r4, r0
 801280a:	460d      	mov	r5, r1
 801280c:	da0f      	bge.n	801282e <scalbn+0x4e>
 801280e:	a328      	add	r3, pc, #160	@ (adr r3, 80128b0 <scalbn+0xd0>)
 8012810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012814:	e01e      	b.n	8012854 <scalbn+0x74>
 8012816:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801281a:	4291      	cmp	r1, r2
 801281c:	d10b      	bne.n	8012836 <scalbn+0x56>
 801281e:	4622      	mov	r2, r4
 8012820:	4620      	mov	r0, r4
 8012822:	4629      	mov	r1, r5
 8012824:	f7ed fd32 	bl	800028c <__adddf3>
 8012828:	4604      	mov	r4, r0
 801282a:	460d      	mov	r5, r1
 801282c:	e022      	b.n	8012874 <scalbn+0x94>
 801282e:	460b      	mov	r3, r1
 8012830:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012834:	3936      	subs	r1, #54	@ 0x36
 8012836:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801283a:	4296      	cmp	r6, r2
 801283c:	dd0d      	ble.n	801285a <scalbn+0x7a>
 801283e:	2d00      	cmp	r5, #0
 8012840:	a11d      	add	r1, pc, #116	@ (adr r1, 80128b8 <scalbn+0xd8>)
 8012842:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012846:	da02      	bge.n	801284e <scalbn+0x6e>
 8012848:	a11d      	add	r1, pc, #116	@ (adr r1, 80128c0 <scalbn+0xe0>)
 801284a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801284e:	a31a      	add	r3, pc, #104	@ (adr r3, 80128b8 <scalbn+0xd8>)
 8012850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012854:	f7ed fed0 	bl	80005f8 <__aeabi_dmul>
 8012858:	e7e6      	b.n	8012828 <scalbn+0x48>
 801285a:	1872      	adds	r2, r6, r1
 801285c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012860:	428a      	cmp	r2, r1
 8012862:	dcec      	bgt.n	801283e <scalbn+0x5e>
 8012864:	2a00      	cmp	r2, #0
 8012866:	dd08      	ble.n	801287a <scalbn+0x9a>
 8012868:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801286c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8012870:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012874:	ec45 4b10 	vmov	d0, r4, r5
 8012878:	bd70      	pop	{r4, r5, r6, pc}
 801287a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801287e:	da08      	bge.n	8012892 <scalbn+0xb2>
 8012880:	2d00      	cmp	r5, #0
 8012882:	a10b      	add	r1, pc, #44	@ (adr r1, 80128b0 <scalbn+0xd0>)
 8012884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012888:	dac1      	bge.n	801280e <scalbn+0x2e>
 801288a:	a10f      	add	r1, pc, #60	@ (adr r1, 80128c8 <scalbn+0xe8>)
 801288c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012890:	e7bd      	b.n	801280e <scalbn+0x2e>
 8012892:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012896:	3236      	adds	r2, #54	@ 0x36
 8012898:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801289c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80128a0:	4620      	mov	r0, r4
 80128a2:	4b0d      	ldr	r3, [pc, #52]	@ (80128d8 <scalbn+0xf8>)
 80128a4:	4629      	mov	r1, r5
 80128a6:	2200      	movs	r2, #0
 80128a8:	e7d4      	b.n	8012854 <scalbn+0x74>
 80128aa:	bf00      	nop
 80128ac:	f3af 8000 	nop.w
 80128b0:	c2f8f359 	.word	0xc2f8f359
 80128b4:	01a56e1f 	.word	0x01a56e1f
 80128b8:	8800759c 	.word	0x8800759c
 80128bc:	7e37e43c 	.word	0x7e37e43c
 80128c0:	8800759c 	.word	0x8800759c
 80128c4:	fe37e43c 	.word	0xfe37e43c
 80128c8:	c2f8f359 	.word	0xc2f8f359
 80128cc:	81a56e1f 	.word	0x81a56e1f
 80128d0:	43500000 	.word	0x43500000
 80128d4:	ffff3cb0 	.word	0xffff3cb0
 80128d8:	3c900000 	.word	0x3c900000
 80128dc:	00000000 	.word	0x00000000

080128e0 <floor>:
 80128e0:	ec51 0b10 	vmov	r0, r1, d0
 80128e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80128e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80128f0:	2e13      	cmp	r6, #19
 80128f2:	460c      	mov	r4, r1
 80128f4:	4605      	mov	r5, r0
 80128f6:	4680      	mov	r8, r0
 80128f8:	dc34      	bgt.n	8012964 <floor+0x84>
 80128fa:	2e00      	cmp	r6, #0
 80128fc:	da17      	bge.n	801292e <floor+0x4e>
 80128fe:	a332      	add	r3, pc, #200	@ (adr r3, 80129c8 <floor+0xe8>)
 8012900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012904:	f7ed fcc2 	bl	800028c <__adddf3>
 8012908:	2200      	movs	r2, #0
 801290a:	2300      	movs	r3, #0
 801290c:	f7ee f904 	bl	8000b18 <__aeabi_dcmpgt>
 8012910:	b150      	cbz	r0, 8012928 <floor+0x48>
 8012912:	2c00      	cmp	r4, #0
 8012914:	da55      	bge.n	80129c2 <floor+0xe2>
 8012916:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801291a:	432c      	orrs	r4, r5
 801291c:	2500      	movs	r5, #0
 801291e:	42ac      	cmp	r4, r5
 8012920:	4c2b      	ldr	r4, [pc, #172]	@ (80129d0 <floor+0xf0>)
 8012922:	bf08      	it	eq
 8012924:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8012928:	4621      	mov	r1, r4
 801292a:	4628      	mov	r0, r5
 801292c:	e023      	b.n	8012976 <floor+0x96>
 801292e:	4f29      	ldr	r7, [pc, #164]	@ (80129d4 <floor+0xf4>)
 8012930:	4137      	asrs	r7, r6
 8012932:	ea01 0307 	and.w	r3, r1, r7
 8012936:	4303      	orrs	r3, r0
 8012938:	d01d      	beq.n	8012976 <floor+0x96>
 801293a:	a323      	add	r3, pc, #140	@ (adr r3, 80129c8 <floor+0xe8>)
 801293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012940:	f7ed fca4 	bl	800028c <__adddf3>
 8012944:	2200      	movs	r2, #0
 8012946:	2300      	movs	r3, #0
 8012948:	f7ee f8e6 	bl	8000b18 <__aeabi_dcmpgt>
 801294c:	2800      	cmp	r0, #0
 801294e:	d0eb      	beq.n	8012928 <floor+0x48>
 8012950:	2c00      	cmp	r4, #0
 8012952:	bfbe      	ittt	lt
 8012954:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8012958:	4133      	asrlt	r3, r6
 801295a:	18e4      	addlt	r4, r4, r3
 801295c:	ea24 0407 	bic.w	r4, r4, r7
 8012960:	2500      	movs	r5, #0
 8012962:	e7e1      	b.n	8012928 <floor+0x48>
 8012964:	2e33      	cmp	r6, #51	@ 0x33
 8012966:	dd0a      	ble.n	801297e <floor+0x9e>
 8012968:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801296c:	d103      	bne.n	8012976 <floor+0x96>
 801296e:	4602      	mov	r2, r0
 8012970:	460b      	mov	r3, r1
 8012972:	f7ed fc8b 	bl	800028c <__adddf3>
 8012976:	ec41 0b10 	vmov	d0, r0, r1
 801297a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801297e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8012982:	f04f 37ff 	mov.w	r7, #4294967295
 8012986:	40df      	lsrs	r7, r3
 8012988:	4207      	tst	r7, r0
 801298a:	d0f4      	beq.n	8012976 <floor+0x96>
 801298c:	a30e      	add	r3, pc, #56	@ (adr r3, 80129c8 <floor+0xe8>)
 801298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012992:	f7ed fc7b 	bl	800028c <__adddf3>
 8012996:	2200      	movs	r2, #0
 8012998:	2300      	movs	r3, #0
 801299a:	f7ee f8bd 	bl	8000b18 <__aeabi_dcmpgt>
 801299e:	2800      	cmp	r0, #0
 80129a0:	d0c2      	beq.n	8012928 <floor+0x48>
 80129a2:	2c00      	cmp	r4, #0
 80129a4:	da0a      	bge.n	80129bc <floor+0xdc>
 80129a6:	2e14      	cmp	r6, #20
 80129a8:	d101      	bne.n	80129ae <floor+0xce>
 80129aa:	3401      	adds	r4, #1
 80129ac:	e006      	b.n	80129bc <floor+0xdc>
 80129ae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80129b2:	2301      	movs	r3, #1
 80129b4:	40b3      	lsls	r3, r6
 80129b6:	441d      	add	r5, r3
 80129b8:	4545      	cmp	r5, r8
 80129ba:	d3f6      	bcc.n	80129aa <floor+0xca>
 80129bc:	ea25 0507 	bic.w	r5, r5, r7
 80129c0:	e7b2      	b.n	8012928 <floor+0x48>
 80129c2:	2500      	movs	r5, #0
 80129c4:	462c      	mov	r4, r5
 80129c6:	e7af      	b.n	8012928 <floor+0x48>
 80129c8:	8800759c 	.word	0x8800759c
 80129cc:	7e37e43c 	.word	0x7e37e43c
 80129d0:	bff00000 	.word	0xbff00000
 80129d4:	000fffff 	.word	0x000fffff

080129d8 <_init>:
 80129d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129da:	bf00      	nop
 80129dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129de:	bc08      	pop	{r3}
 80129e0:	469e      	mov	lr, r3
 80129e2:	4770      	bx	lr

080129e4 <_fini>:
 80129e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129e6:	bf00      	nop
 80129e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129ea:	bc08      	pop	{r3}
 80129ec:	469e      	mov	lr, r3
 80129ee:	4770      	bx	lr
